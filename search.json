[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "JupyerHub Guide",
    "section": "",
    "text": "JupyterHub Guide\nThis is a short guide to create and run the notbooks and environments in the JupiterHub for the Master course Microwave Remote Sensing (120.030) at the TU Wien.",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "index.html#starting-jupyterhub",
    "href": "index.html#starting-jupyterhub",
    "title": "JupyerHub Guide",
    "section": "Starting JupyterHub",
    "text": "Starting JupyterHub\nIn TUWEL, click on the JupyterHub icon , which redirects you to your own JupyterLab user environment. You should then select the Server for the Desktop Notebook from the Microwave Remote Sensing course. Be patient - this can take a couple of minutes.\n\n\n\nPlease note that all screenshots in this guide refer to the lecture 120.030 Microwave Remote Sensing (2024W), even if a few things are different for you, the overall functionality and interface remain the same.",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "index.html#exploring-jupyterlab",
    "href": "index.html#exploring-jupyterlab",
    "title": "JupyerHub Guide",
    "section": "Exploring JupyterLab",
    "text": "Exploring JupyterLab\nWhen you start your server for the first time, your point of entry will be this starting page:\n\n\n\nIn the center, you have the Launcher where you can create Python or other files, play around with Jupyter Notebooks, store intermediate data. You can also open a Python console, a terminal, a text file, and many more. On the left, you can see your home directory where you have the folders lectures and shared. There might be other folders as well, but don’t be concerned about them.\n\n\nAfter some intense coding and analysis, it can happen that you have many terminal and notebook tabs open. However, simply closing them does not quit the processes and running kernels in the background. Therefore, we recommend that you tidy up your running processes after some time, which can be done as marked by the top-left circle. As an overview, the number of running kernels and terminals are always shown at the bottom-left corner.",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "index.html#setup-of-exercise-environment",
    "href": "index.html#setup-of-exercise-environment",
    "title": "JupyerHub Guide",
    "section": "Setup of Exercise Environment",
    "text": "Setup of Exercise Environment\nTo use the Notebooks from the course, the following steps need to be taken:\n\nNavigate to the folder ~/shared/120.030-2024W/ where you should find a Makefile and a README.md.\n\n\n\n\n\nAt this level, you should open a Terminal using the Launcher and run the command\nmake notebooks\nWait until the installation is finished - this can take a couple of minutes.\nThe notebooks and an environment, where the important packages and all their dependencies are included, have been installed for you.\nIt might be necessary to re-login to the JupyterHub to see it coming into effect.\nNow you should see a folder named microwave-remote-sensing containing the notebooks and additional kernels in the Launcher of JupyterLab.\n\n\n\n\n\nSelect the kernel mrs-env kernel for execution of the code blocks in the notebook.\n\n\n\n\n \n\n\n\n\n\n\nIn case you could not select the correct server and could not find the folder from step one, you might be in the wrong server. You can change your server by selecting\nFile -&gt; Hub Control Panel\nand clicking on Stop My Server.\n\n\n\nThen press Start My Server and you should be able to select the “Desktop Notebook” for the “120.030-2024W: 120.030 Microwave Remote Sensing” course.",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "index.html#removing-exercise-environment",
    "href": "index.html#removing-exercise-environment",
    "title": "JupyerHub Guide",
    "section": "Removing Exercise Environment",
    "text": "Removing Exercise Environment\nTo remove the exercise notebooks as well as the Jupyter kernel Launch a terminal from ~/shared/120.030-2024W/ and type:\nmake delete",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "index.html#editing-jupyter-notebooks",
    "href": "index.html#editing-jupyter-notebooks",
    "title": "JupyerHub Guide",
    "section": "Editing Jupyter Notebooks",
    "text": "Editing Jupyter Notebooks\nThe homework exercises of the course are labeled as homework_exercise.ipynb. You are supposed to use these notebooks for the homework assignments and the completed notebooks should be submitted through TUWEL. The notebooks consist of two types of cells: Python and Markdown cells. Python cells contain executable Python code, whereas Markdown cells are used for open text and multiple choice questions. Double click on an existing cell to alter its content. To add new cells click select the cell type from the drop-down menu and click on the plus sign, as follows for Python cells:\n\nAnd for Markdown cells:\n\nFor the multiple choice questions double click on the Markdown cell and replace the correct answers, as follows:\n- [ ] Original\n- [x] Selected answer\n\nOriginal\nSelected answer\n\nTo save your work use the drop-down menu under File and select Save Notebook or use the shortcut CTRL + S.",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "unit_01/01_in_class_exercise.html",
    "href": "unit_01/01_in_class_exercise.html",
    "title": "1  Discover and Read SAR Data",
    "section": "",
    "text": "1.1 Data Discovery\nThis notebook demonstrates how to access radar data in a SpatioTemporal Asset Catalog (STAC) Catalogue using the pystac library. In this example, we use Sentinel-1 data from the EODC (earth observation data and high performance computing service provider based in Vienna) STAC catalog. In the further process, we will learn how to query a STAC catalog, select specific items, and display the metadata and the actual image.\neodc_catalog = pystac_client.Client.open(\"https://stac.eodc.eu/api/v1\")\n\neodc_catalog\nThe URL https://stac.eodc.eu/api/v1, served over Hypertext Transfer Protocol (HTTP), is a STAC-compliant API endpoint (specific URL address where an API service is available) that leads to the EODC Catalogue. Besides EODC’s, other catalogues can be found on STAC Index, such as United States Geological Survey (USGS) Landsat imagery, Sentinel Hub, Copernicus Data Space Ecosystem, and so on. Briefly spoken, STAC can be used to search, discover, and access metadata of these datasets with the same code. The EODC Catalogue can be accessed on the web via this link as well.\nEach STAC catalog, composed by different providers, has many collections. To get all collections of a catalog, we can print all of them and their ids, which are used to fetch them from the catalog.\ncollections = eodc_catalog.get_collections()\n\n# length of string of collection.id, for pretty print\nmax_length = max(len(collection.id) for collection in collections)\n\nfor collection in eodc_catalog.get_collections():\n    print(f\"{collection.id.ljust(max_length)}: {collection.title}\")\nTo get a specific collection from the catalog, we can use the client.get_collection() method and provide the collection name. We can then display its description, id, temporal and spatial extent, license, etc. In this notebook, we will work with the Sentinel-1 sigma naught 20m collection.\ncolllection_id = \"SENTINEL1_SIG0_20M\"\n\ncollection = eodc_catalog.get_collection(colllection_id)\ncollection\nEach collection has multiple items. An item is one spatio-temporal instance in the collection, for instance a satellite image. If items are needed for a specific timeframe or for a specific region of interest, we can define this as a query.\ntime_range = \"2022-10-01/2022-10-07\"  # a closed range\n# time_range = \"2022-01\"  # whole month, same can be done for a year and a day\n# time_range = \"2022-01-01/..\"  # up to the current date, an open range\n# time_range = \"2022-01-01T05:34:46\"  # a specific time instance\nA spatial region of interest can be defined in different ways. One option is to define a simple bounding box:\nlatmin, latmax = 46.3, 49.3  # South to North\nlonmin, lonmax = 13.8, 17.8  # West to East\n\nbounding_box = [lonmin, latmin, lonmax, latmax]\nIf the region of interest is not rectangular, we can also define a polygon:\n# GEOJSON can be created on geojson.io\n\n# This specific area of interest is a rectangle, but since it is\n# a closed polygon it seems like it has five nodes\n\narea_of_interest = {\n    \"coordinates\": [\n        [\n            [17.710928010825853, 49.257630084442496],\n            [13.881798300915221, 49.257630084442496],\n            [13.881798300915221, 46.34747715326259],\n            [17.710928010825853, 46.34747715326259],\n            [17.710928010825853, 49.257630084442496],\n        ]\n    ],\n    \"type\": \"Polygon\",\n}\nUsing our previously loaded STAC catalog, we can now search for items fullfilling our query. In this example we are using the bounding box. If we want to use an area of interest specified in the geojson format - one has to use the intersects parameter as documented in the comment below.\nsearch = eodc_catalog.search(\n    collections=colllection_id,  # can also be a list of several collections\n    bbox=bounding_box,  # search by bounding box\n    # intersects=area_of_interest,  # GeoJSON search\n    datetime=time_range,\n    # max_items=1  # number of max items to load\n)\n\n# If we comment everything besides colllection_id, we will load whole\n# collection for available region and time_range\n\nitems_eodc = search.item_collection()\nprint(f\"On EODC we found {len(items_eodc)} items for the given search query\")\nNow, we can fetch a single item, in this case a Sentinel-1 image, from the query results. A good practice is to always check what metadata the data provider has stored on the item level. This can be done by looking into the item properties.\nitem = items_eodc[0]\nitem.properties\nFor now, let’s display only the vertical-vertical (VV) polarized band of the item and some information about the data.\nitem.assets[\"VV\"].extra_fields.get(\"raster:bands\")[0]\nIn the EODC STAC catalogue an item can conveniently be displayed using its thumbnail.\nitem.assets[\"thumbnail\"].href\nNow we will plot the data on a map using the thumbnail and the python package folium. This is an easy way to quickly check how the data found by a search query looks on a map.\nmap = folium.Map(\n    location=[(latmin + latmax) / 2, (lonmin + lonmax) / 2],\n    zoom_start=7,\n    zoom_control=False,\n    scrollWheelZoom=False,\n    dragging=False,\n)\n\nfolium.GeoJson(area_of_interest, name=\"Area of Interest\").add_to(map)\n\nfor item in items_eodc:\n    # url leading to display of an item, can also be used as hyperlink\n    image_url = item.assets[\"thumbnail\"].href\n    bounds = item.bbox\n    folium.raster_layers.ImageOverlay(\n        image=image_url,\n        bounds=[[bounds[1], bounds[0]], [bounds[3], bounds[2]]],\n    ).add_to(map)\n\nfolium.LayerControl().add_to(map)\n\nmap\nFigure 1: Map of study area. Blue rectangle is the area covered by the discovered data.",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>EO Data Discovery</span>"
    ]
  },
  {
    "objectID": "unit_01/01_in_class_exercise.html#data-reading",
    "href": "unit_01/01_in_class_exercise.html#data-reading",
    "title": "1  Discover and Read SAR Data",
    "section": "1.2 Data Reading",
    "text": "1.2 Data Reading\nSTAC can also be a useful tool for the discovery of data, however it only loads metadata. This saves memory, but if one would like to do further analysis, the data has to be loaded into memory or downloaded on disk.\nIn the following, we will demonstrate this with the library odc-stac. Here we can define what data will loaded as bands; in this case VV sigma naught. Moreover we can resample the data by providing any coordinate reference system (CRS) and resolution as well as a method for resampling of continuos data (e.g. bilinear resampling). In the example below we use the EQUI7 Grid of Europe and a 20 meter sampling. This is the native format of sigma naught stored at EODC, so there will be no actual resampling. Note, also, that resampling is not advisable for this data, as it is provided on a logarithmic scale. More about this in the notebook “Backscattering Coefficients”.\nThe chunks argument is an advancement method for performing parallel computations on the data. We will not cover this in further detail.\n\nbands = \"VV\"  # Vertical-vertical polarized\ncrs = \"EPSG:27704\"  # Coordinate Reference System: EQUI7 Grid of Europe\nres = 20  # 20 meter\nchunks = {\"time\": 1, \"latitude\": 1000, \"longitude\": 1000}\nsig0_dc = odc_stac.load(\n    items_eodc,\n    bands=bands,\n    crs=crs,\n    resolution=res,\n    bbox=bounding_box,\n    chunks=chunks,\n    resampling=\"bilinear\",\n)\n\nLet’s have a look at the VV polarized band of the dataset.\n\nsig0_dc.VV\n\nAs we can see, the data is stored as a xarray DataArray. Xarray is a convenient package for multidimensional labeled arrays, like temperature, humidity, pressure, different bands of satellite imagery, and so on. The link provides detailed documentation. In a later notebook we will explore some more of the functionality of xarray. As we can see in the coordinates, the data here consists of 21 time steps.\nIn general, data from STAC is “lazily” loaded, which means that the structure of the DataArray is constructed, but the data is not loaded yet. It is loaded only at instance when it is needed, for example, for plotting, computations, and so on.\nSince the DataArray has currently a size of almost 18 GiB, we will subset it to the region of Vienna.\n\n# Create a bounding box covering the region of Vienna\nlatmin_smaller, latmax_smaller = 48, 48.4\nlonmin_smaller, lonmax_smaller = 16, 16.5\n\nsmaller_bounding_box = [\n    [latmin_smaller, lonmin_smaller],\n    [latmax_smaller, lonmax_smaller],\n]\n\nmap = folium.Map(\n    location=[\n        (latmin_smaller + latmax_smaller) / 2,\n        (lonmin_smaller + lonmax_smaller) / 2,\n    ],\n    zoom_start=8,\n    zoom_control=False,\n    scrollWheelZoom=False,\n    dragging=False,\n)\n\nfolium.GeoJson(area_of_interest, name=\"Area of Interest\").add_to(map)\n\nfolium.Rectangle(\n    bounds=smaller_bounding_box,\n    color=\"red\",\n).add_to(map)\n\nfor item in items_eodc:\n    image_url = item.assets[\"thumbnail\"].href\n    bounds = item.bbox\n    folium.raster_layers.ImageOverlay(\n        image=image_url,\n        bounds=[[bounds[1], bounds[0]], [bounds[3], bounds[2]]],\n    ).add_to(map)\n\nfolium.LayerControl().add_to(map)\n\nmap\n\nFigure 2: Map of study area. Blue rectangle is the area covered by the discovered data. Red rectangle covers the selected data.\nCreate a new dataset with the smaller bounding box covering the region of Vienna. We will leave out the arguments for resampling and directly use the native format as defined in the metadata.\n\nsig0_dc = odc_stac.load(\n    items_eodc,\n    bands=bands,\n    bbox=[lonmin_smaller, latmin_smaller, lonmax_smaller, latmax_smaller],\n    chunks=chunks,\n)\n\nDue to the way the data is acquired and stored, some items include “no data” areas. In our case, no data has the value -9999, but this can vary from data provider to data provider. This information can usually be found in the metadata. Furthermore, to save memory, data is often stored as integer (e.g. 25) and not in float (e.g. 2.5) format. For this reason, the backscatter values are often multiplied by a scale factor, in this case factor 10.\nAs Sentinel-1 satellites overpasses Austria every few days, only some time steps of the dataset will have physical data. As a final step, we will now decode the data and create a plot of two consecutive Sentinel-1 acquisitions of Vienna.\n\n# Retrieve the scale factor and NoData value from the metadata. raster:bands is\n# a STAC raster extension\nscale = item.assets[\"VV\"].extra_fields.get(\"raster:bands\")[0][\"scale\"]\nnodata = item.assets[\"VV\"].extra_fields.get(\"raster:bands\")[0][\"nodata\"]\n\n# Decode data with the NoData value and the scale factor\nsig0_dc = sig0_dc.where(sig0_dc != nodata) / scale\n\n# We should remove unnecessary dates when there was no data\n# (no satellite overpass)\nsig0_dc = sig0_dc.dropna(dim=\"time\")\n\n\nsig0_dc.VV.plot(col=\"time\", robust=True, cmap=\"Greys_r\", aspect=1, size=10)\n\nFigure 3: Sentinel-1 microwave backscatter image for two timeslices.",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>EO Data Discovery</span>"
    ]
  },
  {
    "objectID": "unit_01/02_in_class_exercise.html",
    "href": "unit_01/02_in_class_exercise.html",
    "title": "2  Unit Conversion",
    "section": "",
    "text": "2.1 Exploring the Data\nIn this notebook, we are going to have a look at the conversion of units. Sentinel-1 data, and most other SAR data, is usually provided in decibels (dB). In this notebook, we will discover the advantages of displaying SAR data in decibels and why we need to convert the data to a linear scale in order to make meaningful calculations. Let’s start with importing some libraries.\n\\[\n\\text{logarithmic} \\longleftrightarrow \\text{linear}\n\\] \\[\n[\\text{dB}] \\longleftrightarrow [\\text{m}^2 \\cdot \\text{m}^{-2}]\n\\]\nLet’s start by loading some sample data, in order to demonstrate why this conversion is important. Here we will have a look at some SAR data from the Sentinel-1. The data is provided in decibels (dB). In the following example, we will:",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversions</span>"
    ]
  },
  {
    "objectID": "unit_01/02_in_class_exercise.html#exploring-the-data",
    "href": "unit_01/02_in_class_exercise.html#exploring-the-data",
    "title": "2  Unit Conversion",
    "section": "",
    "text": "load data from Sentinel-1\nvisualize the data in logarithmic scale\ncompare the data with linear scale",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversions</span>"
    ]
  },
  {
    "objectID": "unit_01/02_in_class_exercise.html#search-for-some-data",
    "href": "unit_01/02_in_class_exercise.html#search-for-some-data",
    "title": "2  Unit Conversion",
    "section": "2.2 Search for some Data",
    "text": "2.2 Search for some Data\nNow, we start by loading data from Sentinel-1 from the EODC STAC Catalogue. We do this in the same way as in the previous notebook “Discover and Read SAR Data”.\n\nlatmin, latmax = 48, 48.5\nlonmin, lonmax = 16, 17\nbounds = (lonmin, latmin, lonmax, latmax)\n\ntime_range = \"2022-07-01/2022-07-31\"\n\nitems = (\n    pystac_client.Client.open(\"https://stac.eodc.eu/api/v1\")\n    .search(\n        bbox=bounds,\n        collections=[\"SENTINEL1_SIG0_20M\"],\n        datetime=time_range,\n        limit=100,\n    )\n    .item_collection()\n)\n\nprint(len(items), \"scenes found\")\n\n\nbands = \"VV\"\n\nsig0_dc = odc.stac.stac_load(\n    items,\n    bands=bands,\n    bbox=bounds,\n    chunks={\"time\": 5, \"x\": 1000, \"y\": 1000},\n)\n\nnodata = items[0].assets[\"VV\"].extra_fields[\"raster:bands\"][0][\"nodata\"]\nscale = items[0].assets[\"VV\"].extra_fields[\"raster:bands\"][0][\"scale\"]\n\nsig0_dc = (sig0_dc.where(sig0_dc != nodata) / scale).VV\nsig0_dc",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversions</span>"
    ]
  },
  {
    "objectID": "unit_01/02_in_class_exercise.html#comparison-of-the-data-in-db-and-linear-scale",
    "href": "unit_01/02_in_class_exercise.html#comparison-of-the-data-in-db-and-linear-scale",
    "title": "2  Unit Conversion",
    "section": "2.3 Comparison of the Data in dB and Linear Scale",
    "text": "2.3 Comparison of the Data in dB and Linear Scale\nIn the next two cells we will select a subset of the data. This is done to reduce the amount of data we are working with. The precise workflow is not important for now, since the theory is explained after the cells. They are just here to show the data we are working with.\n\nsubset = sig0_dc.sel(time=slice(\"2022-07-01\", \"2022-07-07\"))\nsubset = subset.dropna(\"time\", how=\"all\")\n\nNow plot the data.\n\naoi = subset.isel(time=0, x=slice(0, 500), y=slice(0, 500))\naoi_lin = 10 ** (aoi / 10)\n\nfig, ax = plt.subplots(2, 3, figsize=(14, 8))\n# upper left\nax_ul = ax[0, 0]\naoi.plot.imshow(robust=True, ax=ax_ul, cmap=\"Greys_r\")\nax_ul.set_title(r\"$\\sigma^0$ [$dB$] (robust plot)\")\nax_ul.axes.set_aspect(\"equal\")\n\n# upper middle\nax_um = ax[0, 1]\naoi.plot.imshow(robust=False, ax=ax_um, cmap=\"Greys_r\")\nax_um.set_title(r\"$\\sigma^0$ [$dB$] (not robust plot)\")\nax_um.axes.set_aspect(\"equal\")\n\n# upper right\nax_ur = ax[0, 2]\naoi.plot.hist(bins=50, ax=ax_ur, edgecolor=\"black\")\nax_ur.set_xlabel(r\"$\\sigma^0$ [$dB$]\")\nax_ur.set_title(r\"$\\sigma^0$ [$dB$] distribution\")\nax_ur.set_ylabel(\"n (number of pixels)\")\n\n# lower left\nax_ll = ax[1, 0]\naoi_lin.plot.imshow(robust=True, ax=ax_ll, cmap=\"Greys_r\")\nax_ll.set_title(r\"$\\sigma^0$ [$m^2 \\cdot m^{-2}$] (robust plot)\")\nax_ll.axes.set_aspect(\"equal\")\n\n# lower middle\nax_lm = ax[1, 1]\naoi_lin.plot.imshow(robust=False, ax=ax_lm, cmap=\"Greys_r\")\nax_lm.set_title(r\"$\\sigma^0$ [$m^2 \\cdot m^{-2}$] (not robust plot)\")\nax_lm.axes.set_aspect(\"equal\")\n\n# lower right\nax_lr = ax[1, 2]\naoi_lin.plot.hist(bins=50, ax=ax_lr, edgecolor=\"black\")\nax_lr.set_xlabel(r\"$\\sigma^0$ [$m^2 \\cdot m^{-2}$]\")\nax_lr.set_ylabel(\"n (number of pixels)\")\nax_lr.set_title(r\"$\\sigma^0$ [$m^2 \\cdot m^{-2}$] distribution\")\n\ntitle = (\n    r\"Sentinel-1 backscatter $\\sigma^0$ comparison\"\n    r\" in linear and logarithmic domain\"\n)\nfig.suptitle(title, horizontalalignment=\"center\")\nplt.tight_layout()\n\nFigure 1: Visually comparing \\(\\sigma^0\\) on a logarithmic and linear scale (left column). In addition, the benefit of using the robust plotting method is shown (middle column). The robust argument uses the 2nd and 98th percentiles of the data to compute the color limits to eliminate washing out the plot due to data outliers.\nIn the plot above you can see the difference between the two scales. The values in dB are more evenly distributed and are therefore easier to plot. The values in linear scale are more spread out and are therefore harder to interpret. This is why we use the dB scale for plotting/visualization.\nWhile the logarithmic scale facilitates visual interpretation, it has implications for mathematical operations. In the following, we’ll have a closer look at this. But first, let’s see how we can convert between the linear and the logarithmic domains.",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversions</span>"
    ]
  },
  {
    "objectID": "unit_01/02_in_class_exercise.html#conversion-formulas",
    "href": "unit_01/02_in_class_exercise.html#conversion-formulas",
    "title": "2  Unit Conversion",
    "section": "2.4 Conversion Formulas",
    "text": "2.4 Conversion Formulas\nThe decibel (dB) is a logarithmic unit used to express the ratio of two values of a physical quantity, often power or intensity. In the case of SAR data, the backscatter coefficient is often expressed in dB to facilitate visualization.\nIn order to convert the data from dB to linear scale, we use the following formula. Let \\(D\\) be the original value (dB) and \\(I\\) the converted value (\\(m^2m^{-2}\\)). The conversion of units can be expressed as: \\[\nD =  10  \\cdot \\log_{10} (I) = 10 \\cdot \\log_{10} (e) \\cdot \\ln (I)\\longrightarrow [dB]\n\\] Similarly, the conversion back to the original unit can be expressed as: \\[\nI = e^{\\frac{D}{10\\cdot \\log_{10}(e)}} = 10^{\\frac{D}{10}} \\longrightarrow [m^2m^{-2}]\n\\] You can find these formulas in the script for Microwave Remote Sensing on page 136 (equation 6.40).\nNow let’s implement the conversion in Python.\n\ndef lin2db(val: float) -&gt; float:\n    \"\"\"Converts value from linear to dB units.\n\n    :param val: Value in linear units.\n    :type val: float|int\n    :return: Value in dB.\n    :rtype: float\n    \"\"\"\n    return 10 * np.log10(val)\n\n\ndef db2lin(val: float) -&gt; float:\n    \"\"\"Converts value from dB to linear units.\n\n    :param val: Value in dB.\n    :type val: float|int\n    :return: Value in linear units.\n    :rtype: float\n    \"\"\"\n    return 10 ** (val / 10)\n\nWhen performing mathematical operations with SAR data it is important to be aware, that adding values in the logarithmic scale doesn’t work in the same way as adding regular (linear) values. This is because in the logarithmic scale, each unit step represents an equal multiplication. This means that an addition of two values in the logarithmic scale equals a multiplication of the values in the linear scale. Vice versa, a subtraction in a logarithmic scale equals a division in a linear scale. Let’s have a look at an example, where we add two values, once without the conversion to linear scale and once with the conversion to linear scale.\n\n# Logarithmic addition\n# Values in linear and decibel units\nval1_db, val2_db = 10, 12\n\n# Logarithmic addition\nsum_db = val1_db + val2_db\nprint(\"Logarithmic Addition:\")\nprint(f\"Logarithmic values: \\t{val1_db: &lt;5}, {val2_db: &lt;5} [dB]\")\nprint(f\"Logarithmic sum: \\t{val1_db} + {val2_db} = {sum_db: &lt;5} [dB]\")\n\n# Linear addition\nval1_lin, val2_lin = db2lin(val1_db), db2lin(val2_db)\nsum_lin = val1_lin + val2_lin\nprint(\"\\nLinear Addition:\")\nprint(\n    f\"\"\"Linear values: \\t\\t{val1_lin: &lt;5}, {val2_lin: &lt;5.2f} [lin]\n      \\t\\t\\t(converted from dB)\"\"\"\n)\nprint(f\"Linear sum: \\t\\t{val1_lin} + {val2_lin: .2f} = {sum_lin: .2f} [lin]\")\nprint(f\"\\t\\t\\t= {lin2db(sum_lin): .2f} [dB]\")\n\nAs you can see, the values in dB and in linear scale differ quite a bit. In the example above, the values differ by a factor of around 6 when looked at in linear scale.\nNow that we have some data, we will have a look at some practical examples where we will convert the data to linear scale. When we try to calculate the average \\(\\sigma^0\\) value across the scene, we need to do this by converting the data to linear scale first and then calculating the average and converting it back to dB.",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversions</span>"
    ]
  },
  {
    "objectID": "unit_01/02_in_class_exercise.html#creating-a-monthly-mosaic",
    "href": "unit_01/02_in_class_exercise.html#creating-a-monthly-mosaic",
    "title": "2  Unit Conversion",
    "section": "2.5 Creating a Monthly Mosaic",
    "text": "2.5 Creating a Monthly Mosaic\nSo in the beginning we have lazily loaded data for an area across a whole year. We therefore have around 700 images. We will now essentially compress the data of each month into one timestamp. This is done by using the resampling method together with an operation method like mean that includes summation. Since the data is in dB we need to convert it to linear scale first, then we can resample the data and convert it back to dB.\n\n# Convert to linear scale and calculate monthly means\n# Conversion by calculating with the xarray Object\nsig0_lin = 10 ** (sig0_dc / 10)\n\n# Resample to monthly means. Time accepts intervals identical to the pandas\n# resample function. 'D' for days, 'W' for weeks, 'ME' for months.\nsig0_lin_monthly = sig0_lin.resample(time=\"1ME\").mean()\n\n# Convert back to dB scale\n# Conversion by applying a function\nsig0_monthly = lin2db(sig0_lin_monthly)\nsig0_monthly\n\nThe dataset has now only 12 timestamps, one for each month. Next, we want to calculate the average \\(\\sigma^0\\) value across a subset of the scene for one month. We will do this again by converting the data to linear scale first and then calculating the average and converting it back to dB.\n\n# Lets take a data array with db values\ndb_array = (\n    sig0_monthly.sel(time=\"2022-07-30\", method=\"nearest\")\n    .isel(x=slice(300, 400), y=slice(500, 600))\n    .compute()\n)\n\n# Compute the linear values\nlin_array = db2lin(db_array)\n\n\n# Compute the average backscatter value in linear units across the whole scene\nlin_mean = lin_array.mean()\nprint(f\"Average backscatter value in linear units: {lin_mean.values: .3f}\")\ndb_from_lin_mean = lin2db(lin_mean)\nprint(f\"That value in dB: {db_from_lin_mean.values: .3f}\\n\")\n\n# Compute the average backscatter value in dB across the whole scene\ndb_mean = db_array.mean()\nprint(f\"Average backscatter value in dB: {db_mean.values: .3f}\")\n\nAs you can see in the example, the mean values across the scene are different in dB and linear scale. Therefore, it is important to be aware in which scale the data is stored to perform the correct type of mathematical operation or always convert the data to linear scale before doing any calculations.",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Unit Conversions</span>"
    ]
  },
  {
    "objectID": "unit_01/03_in_class_exercise.html",
    "href": "unit_01/03_in_class_exercise.html",
    "title": "3  Backscattering Coefficients",
    "section": "",
    "text": "3.1 Loading Backscatter Data\nIn this notebook, we will introduce some of the steps involved in the processing of Sentinel-1 Level1 Ground Range Detected (GRD) data to \\(\\sigma^0\\) (sig0) and \\(\\gamma^0\\) (gmr). Moreover, the notebook illustrates the importance and impact of geometric and radiometric terrain correction. As the processing of SAR data is a very time and hardware-intense task, we won’t perform the actual processing in this notebook. Instead, data at different processing steps is illustrated to highlight the impact of the processing steps.\nWe first load our data from the following intake catalog. Intake is somewhat similar to STAC in that it makes it easy to discover and load data. More importantly, this package allows us to hide some of the complexities involved with getting the data in the right format, which are not of concern in this notebook.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\ngtc_dc = cat[\"gtc\"].read().compute()\ngtc_dc\ngtc_dc.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    robust=True,\n    data_aspect=1,\n    cmap=\"Greys_r\",\n    groupby=\"band\",\n    rasterize=True,\n).opts(frame_height=600, framewise=False, aspect=\"equal\")\nFigure 2: The ground range detected values and geometrically terrain corrected values can be selected on the right-hand side of the graphic.\nThe geometrically terrain corrected values from the gtc_dc object (Figure 1) can be approximated to a certain extent, as we have sufficiently detailed information of topography in this area. This corrects for at least one typically occurring distortion in mountainous regions: “foreshortening”.\nFigure 3: Side Looking radar distortions (script Chapter 4).\nForeshortening can be spotted by eye, as it often has a radiometric consequence, where unusually bright areas fringe mountain ridges; a phenomenon called “highlighting”. This geometric artifact occurs due to the compression of the distance in the image of slopes facing the radar system and the consequentially higher density of scatterers per unit length. Now let’s zoom in on an example from the same datacube and display the original and corrected values side-by-side.\nfor_dc = gtc_dc.sel(x=slice(9.651, 9.706), y=slice(47.134, 47.079)).band_data\n\nfig, ax = plt.subplots(1, 2, figsize=(20, 8))\n\nbbox = {\"boxstyle\": \"round\", \"fc\": \"0.8\"}\narrowprops = {\"facecolor\": \"red\", \"shrink\": 0.05}\n\nax[1].annotate(\n    \"foreshortening/layover\",\n    xy=(9.674, 47.092),\n    xytext=(0.574, 0.192),\n    textcoords=\"subfigure fraction\",\n    bbox=bbox,\n    arrowprops=arrowprops,\n)\nax[1].annotate(\n    \"radar shadows\",\n    xy=(9.68, 47.119),\n    xytext=(0.6, 0.625),\n    textcoords=\"subfigure fraction\",\n    bbox=bbox,\n    arrowprops=arrowprops,\n)\n\nax[0].axes.set_aspect(\"equal\")\nax[1].axes.set_aspect(\"equal\")\n\nfor_dc.sel(band=\"grd\").plot(ax=ax[0], robust=True, cmap=\"Greys_r\")\nfor_dc.sel(band=\"sig0_gtc\").plot(ax=ax[1], robust=True, cmap=\"Greys_r\")\nFigure 4: Close-up inspection of geometric distortions in side-looking radar\nAs we can see, not all the geometric distortions can be corrected by the algorithm. Some of the pixels at the mountain ranges appear stretched, as in these areas not enough valid measurements are available. Moreover, we can see dark areas which are indicating radar shadows. These are image areas that could not be captured by the radar sensor and have values close to the noise floor of the Sensor (minimum detectable signal strength) ~ -28dB. It is important to note, that radar shadows are not the same for every image, as they depend on the acquisition geometry, in particular, the incidence angle and the flight direction of the satellite.",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Backscattering Coefficients</span>"
    ]
  },
  {
    "objectID": "unit_01/03_in_class_exercise.html#backscattering-coefficients",
    "href": "unit_01/03_in_class_exercise.html#backscattering-coefficients",
    "title": "3  Backscattering Coefficients",
    "section": "3.2 Backscattering Coefficients",
    "text": "3.2 Backscattering Coefficients\nIn this chapter, we will look at some of the different backscatter coefficients in more detail (\\(\\sigma^0_E\\) or \\(\\gamma^0_E\\)), where both coefficients are geometrically terrain corrected. The difference is the plane of the reference area, which is the ground area as a tangent on an ellipsoidal Earth model for \\(\\sigma^0_E\\) and perpendicular to the line of sight for \\(\\gamma^0_E\\) (Figure 5). For this, we load a new datacube which includes \\(\\sigma^0_E\\) and the Incidence Angle for each pixel. We visualize the cube with the same method as before.\n\ncoef_dc = cat.coef.read().compute()\ncoef_dc.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    robust=True,\n    data_aspect=1,\n    cmap=\"Greys_r\",\n    groupby=\"band\",\n    rasterize=True,\n).opts(frame_height=600, framewise=False, aspect=\"equal\")\n\nFigure 5: The \\(\\sigma^0_E\\) and the incidence angle can be selected on the right-hand side of the graphic.\nIn Figure 5 we can see the incidence angle image of our scene. We can see, that it depicts the differences between near to far range, but not the actual terrain as it refers to the ellipsoid. The slight patterns of the terrain that are visible are originating from the geometric terrain correction. We will use this information now to convert our (\\(\\sigma^0_E\\) to \\(\\gamma^0_E\\)) with the following equation (equation 6.20 in the script):\n\\[ \\gamma^0_E = \\sigma^0_E / \\cos(\\theta_i) \\]\nWe can perform this transformation with basic numpy operations on the xarray datacube.\n\n# linear scale\nsig0_db = coef_dc.sel(band=\"sig0_gtc\") / 10\nsig0_lin = 10 ** (coef_dc.sel(band=\"sig0_gtc\") / 10)\n# conversion to gamma\ngam0_lin = sig0_lin / np.cos(np.radians(coef_dc.sel(band=\"incidence_angle\")))\n# dB scale\ngam0_db = 10 * np.log(gam0_lin)\n# add to existing cube\ncoef_dc = xr.concat(\n    [coef_dc.sel(band=\"sig0_gtc\"), gam0_db.expand_dims(band=[\"gam0_gtc\"])], dim=\"band\"\n)\n\ncoef_dc.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    robust=False,\n    data_aspect=1,\n    cmap=\"Greys_r\",\n    groupby=\"band\",\n    rasterize=True,\n).opts(frame_height=600, framewise=False, aspect=\"equal\")\n\nFigure 6: \\(\\sigma^0_E\\), and \\(\\gamma^0_E\\) can be selected on the right-hand side of the graphic.\nComparing \\(\\sigma^0_E\\) and \\(\\gamma^0_E\\) in the figure, we can see that both look identical except for the range. This is because the only difference between \\(\\sigma^0_E\\) and \\(\\gamma^0_E\\) is the change of the reference area. While \\(\\sigma^0_E\\) is defined to be ground range, \\(\\gamma^0_E\\) is defined to be in the plane perpendicular to the line of sight from the sensor. This way, \\(\\gamma^0_E\\) mitigates the impact of the incidence angle. However, \\(\\gamma^0_E\\) is still based on the ellipsoid and does not account for the impact of the terrain on the radiometry.",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Backscattering Coefficients</span>"
    ]
  },
  {
    "objectID": "unit_02/04_in_class_exercise.html",
    "href": "unit_02/04_in_class_exercise.html",
    "title": "4  Datacubes",
    "section": "",
    "text": "4.1 Loading Data\nIn this notebook we discuss how we can easily compare images of two or more different time slices, satellites or other earth observation products. We limit our selves to products on a regular grid with an associated coordinate reference system (CRS), known as a raster. This means that each cell of the raster contains an attribute value and location coordinates. The process of combining such rasters to form datacubes is called raster stacking. We can have datacubes in many forms, such as the spatiotemporal datacube:\n\\[Z = f(x,y,t) \\quad \\text{,}\\]\nor when dealing with electromagnetic spectrum, the spectral wavelengths may form an additional dimension of a cube:\n\\[Z = f(x,y,t, \\lambda ) \\quad \\text{.} \\]\nWe also have already encountered the case where \\(Z\\) consists of multiple variables, such as seen in the xarray dataset.\n\\[{Z_1,Z_2,...,Z_3} = f(x,y,t) \\]\nTo perform raster stacking, we generally follow a certain routine (see also Figure 1).\nTo get the same projection, resolution, and region we have to resample one (or more) products. The desired projection, resolution, and region can be adopted from one of the original rasters or it can be a completely new projection of the data.\nFigure 1: Stacking of arrays to form datacubes (source: https://eox.at).\nIn this notebook we will study two different SAR products. SAR data from the Advanced Land Observing Satellite (Alos-2), which is a Japanese platform with an L-band sensor from the Japan Aerospace Exploration Agency (JAXA), and C-band data from the Copernicus Sentinel-1 mission. It is our goal to compare C- with L-band, so we need to somehow stack these arrays.\nBefore loading the data into memory we will first look at the area covered by the Sentinel-1 dataset on a map. This way we can select a region of interest for our hypothetical study. We will extract and transform the bounds of the data to longitude and latitude.\nbbox = xr.open_mfdataset(\n    make_gitlab_urls(\"sentinel-1\"),\n    engine=\"rasterio\",\n    combine=\"nested\",\n    concat_dim=\"band\",\n).rio.transform_bounds(\"EPSG:4326\")\n\nbbox = box(*bbox)\n\narea_map = folium.Map(\n    max_bounds=True,\n    location=[bbox.centroid.y, bbox.centroid.x],\n    scrollWheelZoom=False,\n)\n\n# bounds of image\nfolium.GeoJson(mapping(bbox), name=\"Area of Interest\", color=\"red\").add_to(area_map)\n\n# minimum longitude, minimum latitude, maximum longitude, maximum latitude\narea_of_interest = box(10.3, 45.5, 10.6, 45.6)\n\nfolium.GeoJson(mapping(area_of_interest), name=\"Area of Interest\").add_to(area_map)\n\narea_map\nFigure 2: Map of study area. Red rectangle is the area covered by the Sentinel-1 raster. Blue rectangle is the area of interest.\nOn the map we have drawn rectangles of the area covered by the images and of our selected study area. To prevent loading too much data we will now only load the data as defined by the blue rectangle on the folium map.\nThe Sentinel-1 data is now stored on disk as separate two-dimensional GeoTIFF files with a certain timestamp. The following s1_preprocess function allows to load all files in one go as a spatiotemporal datacube. Basically, the preprocessing function helps reading the timestamp from the file and adds this as a new dimension to the array. The latter allows a concatenation procedure where all files are joined along the new time dimension. In addition by providing area_of_interest.bounds to the parameter bbox we will only load the data of the previously defined area of interest.\ndef s1_preprocess(x, bbox, scale):\n    \"\"\"Preprocess file.\n\n    Parameters\n    ----------\n    x : xarray.Dataset\n      Input raster\n    bbox: tuple\n      Minimum longitude minimum latitude maximum longitude maximum latitude\n    scale: float\n      Scaling factor\n\n    Returns\n    -------\n    xarray.Dataset : Output stacked raster\n\n    \"\"\"\n    path = Path(urllib.parse.unquote_plus(x.encoding[\"source\"]))\n    filename = path.parent.name\n    x = x.rio.clip_box(*bbox, crs=\"EPSG:4326\")\n\n    date_str = filename.split(\"_\")[0][1:]\n    time_str = filename.split(\"_\")[1][:6]\n    datetime_str = date_str + time_str\n    date = pd.to_datetime(datetime_str, format=\"%Y%m%d%H%M%S\")\n    x = x.expand_dims(dim={\"time\": [date]})\n\n    x = (\n        x.rename({\"band_data\": \"s1_\" + path.parent.parent.stem})\n        .squeeze(\"band\")\n        .drop_vars(\"band\")\n    )\n\n    return x * scale\nWe load the data again with open_mfdataset and by providing the preprocess function, including the bounds of the area of interest and the scaling factor, as follows:\npartial_ = partial(s1_preprocess, bbox=area_of_interest.bounds, scale=0.01)\n\ns1_ds = xr.open_mfdataset(\n    make_gitlab_urls(\"sentinel-1\"),\n    engine=\"rasterio\",\n    combine=\"nested\",\n    chunks=-1,\n    preprocess=partial_,\n)",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/04_in_class_exercise.html#unlocking-geospatial-information",
    "href": "unit_02/04_in_class_exercise.html#unlocking-geospatial-information",
    "title": "4  Datacubes",
    "section": "4.2 Unlocking Geospatial Information",
    "text": "4.2 Unlocking Geospatial Information\nTo enable further stacking of ALOS-2 and Sentinel-1 data we need to know some more information about the raster. Hence we define the following function print_raster to get the projection (CRS), resolution, and region (bounds). The function leverages the functionality of rioxarray; a package for rasters.\n\ndef print_raster(raster, name):\n    \"\"\"Print Raster Metadata.\n\n    Parameters\n    ----------\n    raster: xarray.DataArray|xarray.DataSet\n        raster to process\n    name: string\n        name of product\n\n    \"\"\"\n    print(\n        f\"{name} Raster: \\n----------------\\n\"\n        f\"resolution: {raster.rio.resolution()} {raster.rio.crs.units_factor}\\n\"\n        f\"bounds: {raster.rio.bounds()}\\n\"\n        f\"CRS: {raster.rio.crs}\\n\"\n    )\n\n\nprint_raster(s1_ds, \"Sentinel-1\")\n\nThe CRS “EPSG 27704” is part of the EQUI7Grid. This grid provides equal-area tiles, meaning each tile represents the same area, which helps reducing distorsions. This feature is important for remote sensing as it reduces the so-called oversampling due to geometric distortions when projecting on a sphere. This particular projection is developed by TUWien.\nNow we will proceed with loading the ALOS-2 L-band data in much the same fashion as for Sentinel-1. Again timeslices are stored separately as individual GeoTIFFS and they need to be concatenated along the time dimension. We use a slightly different preprocessing function alos_preprocess for this purpose. The most notable difference of this function is the inclusion of a scaling factor for the 16-bit digital numbers (DN):\n\\[\\gamma^0_T = 10 * log_{10}(\\text{DN}^2) - 83.0 \\,dB\\]\nto correctly convert the integers to \\(\\gamma^0_T\\) in the dB range.\n\ndef alos_preprocess(x, bbox):\n    \"\"\"Preprocess file.\n\n    Parameters\n    ----------\n    x : xarray.Dataset\n      Input raster\n    bbox: tuple\n      minimum longitude minimum latitude maximum longitude maximum latitude\n\n    Returns\n    -------\n    xarray.Dataset : Output stacked raster\n\n    \"\"\"\n    path = Path(urllib.parse.unquote_plus(x.encoding[\"source\"]))\n    filename = path.parent.name\n    x = x.rio.clip_box(*bbox, crs=\"EPSG:4326\")\n\n    date_str = filename.split(\"_\")[0][15:22]\n    date = pd.to_datetime(date_str, format=\"%y%m%d\")\n    x = x.expand_dims(dim={\"time\": [date]})\n\n    x = (\n        x.rename({\"band_data\": \"alos_\" + path.parent.parent.stem})\n        .squeeze(\"band\")\n        .drop_vars(\"band\")\n    )\n\n    # conversion to dB scale of alos\n    return 10 * np.log10(x**2) - 83.0\n\nNow we load the data with the open_mfdataset function of xarray and we provide the preprocessing function (see above), which includes the selection of the bounds of an area of interest and the extraction of time stamps from the file name.\n\narea_of_interest = affinity.scale(area_of_interest, xfact=1.7, yfact=1.7)\npartial_ = partial(alos_preprocess, bbox=area_of_interest.bounds)\n\nalos_ds = xr.open_mfdataset(\n    make_gitlab_urls(\"alos-2\"),\n    engine=\"rasterio\",\n    combine=\"nested\",\n    chunks=-1,\n    preprocess=partial_,\n)\n\nAlso, for this dataset we will look at the metadata in order to compare it with Sentinel-1.\n\nprint_raster(alos_ds, \"ALOS-2\")",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/04_in_class_exercise.html#reprojecting",
    "href": "unit_02/04_in_class_exercise.html#reprojecting",
    "title": "4  Datacubes",
    "section": "4.3 Reprojecting",
    "text": "4.3 Reprojecting\nThe ALOS-2 is projected on an UTM grid. We would therefore like to reproject this data to match the projection of Sentinel-1. Furthermore, we will upsample the data to match the Sentinel-1 sampling. The rioxarray package has a very convenient method that can do this all in one go:reproject_match. For continuous data it is best to use a bilinear resampling strategy. As always you have to consider again that we deal with values in the dB range, so we need to convert to the linear scale before bilinear resampling.\n\nalos_ds_lin = 10 ** (alos_ds / 10)\nalos_ds_lin = alos_ds_lin.rio.reproject_match(\n    s1_ds,\n    resampling=Resampling.bilinear,\n)\nalos_ds = 10 * np.log10(alos_ds_lin)\n\nWe will overwrite the coordinate values of ALOS-2 with those of Sentinel-1. If we would not do this last step, small errors in how the numbers are stored would prevent stacking of the rasters.\n\nalos_ds = alos_ds.assign_coords(\n    {\n        \"x\": s1_ds.x.data,\n        \"y\": s1_ds.y.data,\n    }\n)\n\nLastly, we will turn the xarray.DataSet to an xarray.DataArray where a new dimension will constitute the sensor for measurement (satellite + polarization).\n\ns1_da = s1_ds.to_array(dim=\"sensor\")\nalos_da = alos_ds.to_array(dim=\"sensor\")\ns1_da",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/04_in_class_exercise.html#stacking-of-multiple-arrays",
    "href": "unit_02/04_in_class_exercise.html#stacking-of-multiple-arrays",
    "title": "4  Datacubes",
    "section": "4.4 Stacking of Multiple Arrays",
    "text": "4.4 Stacking of Multiple Arrays\nNow we are finally ready to stack Sentinel-1 C-band and ALOS-2 L-band arrays with the function concat of xarray. Now we can use the newly defined \"sensor\" dimension to concatenate the two arrays.\n\nfused_da = xr.concat([s1_da, alos_da], dim=\"sensor\").rename(\"gam0\")\nfused_da\n\nThe measurements for both satellites don’t occur at the same time. Hence the cube is now padded with 2-D arrays entirely filled with NaN (Not A Number) for some time slices. As we have learned in notebook 2 we can use the resample method to make temporally coherent timeslices for each month. To deal with the dB scale backscatter values as well as the low number of observations per month we use a median of the samples. As taking the median only sorts the samples according to the sample quantiles we do not have to convert the observations to the linear scale.\n\nfused_da = fused_da.resample(time=\"ME\", skipna=True).median().compute()\n\nWe can plot each of the variables: “ALOS-2” and “Sentinel-1” to check our results.\n\nfused_da.hvplot.image(robust=True, data_aspect=1, cmap=\"Greys_r\", rasterize=True).opts(\n    frame_height=600, aspect=\"equal\"\n)\n\nFigure 3: Stacked array with ALOS-2 L-band and Sentinel-1 C-band \\(\\gamma^0_T (dB)\\).",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/05_in_class_exercise.html",
    "href": "unit_02/05_in_class_exercise.html",
    "title": "5  Wavelength and Polarization",
    "section": "",
    "text": "5.1 Data Loading\nIn this notebook, we aim to demonstrate how C-band (4–8 GHz, wavelengths of approximately 3.75–7.5 cm) and L-band (1–2 GHz, wavelengths of approximately 15–30 cm) radio frequencies differ for different land covers and times of the year. In addition, we’ll look at co- and cross-polarized backscattering:\nWe load the data again with the help of intake.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nfused_ds = cat.fused.read()\nfused_ds\nThe loaded data contains the Leaf Area Index (LAI), which is used as an estimate of foliage cover of forest canopies. So high LAI is interpreted as forested area, whereas low values account for less vegetated areas (shrubs, grass-land, and crops).\nFirst we’ll have a look at the mean and standard deviation of LAI over all timeslices. This can be achieved by using the mean and std methods of the xarray object and by supplying a dimension over which these aggregating operations will be applied. We use the dimension “time”, thereby flattening the cube to a 2-D array with dimensions x and y.\nfig, ax = plt.subplots(1, 2, figsize=(15, 6))\n\nLAI_dc = fused_ds.LAI\nLAI_mean = LAI_dc.mean(\"time\")\nLAI_std = LAI_dc.std(\"time\")\n\nLAI_mean.plot(ax=ax[0], vmin=0, vmax=6).axes.set_aspect(\"equal\")\nLAI_std.plot(ax=ax[1], vmin=0, vmax=3).axes.set_aspect(\"equal\")\nplt.tight_layout()\nFigure 1: Map of mean LAI (left) and the associated standard deviation (right) for each pixel over time around Lake Garda.\nIt appears that the northern parts of our study area contain more and variable amounts of green elements per unit area. This might indicate a more complete coverage of foliage and thus forest.",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Wavelength and Polarization</span>"
    ]
  },
  {
    "objectID": "unit_02/05_in_class_exercise.html#timeseries",
    "href": "unit_02/05_in_class_exercise.html#timeseries",
    "title": "5  Wavelength and Polarization",
    "section": "5.2 Timeseries",
    "text": "5.2 Timeseries\nNow that we have detected possible forested areas, let’s delve a bit deeper into the data. Remember that we deal with a spatiotemporal datacube. This gives us the possibility to study changes for each time increment. Hence we can show what happens to LAI for areas marked with generally low values as well as high values. We can achieve this by filtering the datacube with the where method for areas marked with low and high mean LAI values. In turn we will aggregate the remaining datacube over the spatial dimensions (“x” and “y”) to get a mean values for each time increment.\n\nfig, ax = plt.subplots(1, 2, figsize=(15, 4))\n\nthreshold = 4\nLAI_low = LAI_dc.where(LAI_mean &lt; threshold)\nLAI_high = LAI_dc.where(LAI_mean &gt; threshold)\n\nLAI_low.mean([\"x\", \"y\"]).plot.scatter(x=\"time\", ax=ax[0], ylim=(0, 6))\nLAI_high.mean([\"x\", \"y\"]).plot.scatter(x=\"time\", ax=ax[1], ylim=(0, 6))\nax[0].set_title(\"Low Mean LAI ($\\\\bar{LAI} &lt; {threshold}$)\")\nax[1].set_title(\"High Mean LAI ($\\\\bar{LAI} &gt; {threshold}$)\")\nplt.tight_layout()\n\nFigure 2: Timeseries of mean LAI per timeslice for areas with low (left) and high (right) mean LAI of Figure1.\nNow we can see that areas with high mean LAI values (Figure 1) show a drop-off to values as low as those for areas with low mean LAI during the autumn months (Figure 2 ; right panel). Hence we might deduce that we deal with deciduous forest that becomes less green during autumn, as can be expected for the study area.\nRemember that longer wavelengths like L-bands are more likely to penetrate through a forest canopy and would interact more readily with larger object like tree trunks and the forest floor. In turn, C-band microwaves are more likely to interact with sparse and shrub vegetation. The polarization of the emitted and received microwaves is on the other hand dependent on the type of backscattering with co-polarization (HH and VV) happening more frequently with direct backscatter or double bounce scattering. Whereas volume scattering occurs when the radar signal is subject to multiple reflections within 3-dimensional matter, as the orientation of the main scatterers is random, the polarization of the backscattered signal is also random. Volume scattering can therefore cause an increase of cross-polarized intensity.\nLet’s put this to the test by checking the microwave backscatter signatures over forested and sparsely vegetated areas as well as water bodies (Lake Garda). Let’s first look at the different sensor readings for the beginning of summer and autumn.\n\nhv.output(widget_location=\"bottom\")\n\nt1 = (\n    fused_ds.gam0.isel(time=2)\n    .hvplot.image(\n        robust=True, data_aspect=1, cmap=\"Greys_r\", rasterize=True, clim=(-25, 0)\n    )\n    .opts(frame_height=400, aspect=\"equal\")\n)\n\nt2 = (\n    fused_ds.gam0.isel(time=-1)\n    .hvplot.image(\n        robust=True, data_aspect=1, cmap=\"Greys_r\", rasterize=True, clim=(-25, 0)\n    )\n    .opts(frame_height=400, aspect=\"equal\")\n)\n\nt1 + t2\n\nFigure 3: Maps of Sentinel-1 and Alos-2 \\(\\gamma^0_T \\,[dB]\\) for the beginning of summer (left) and autumn (right).\nThe most notable difference is the lower energy received for cross-polarized than for co-polarized microwaves for both Sentinel-1 and Alos-2. The latter differences are independent of the time of year. However, one can also note small changes in the received energy for the same satellite dependent on the time of year. To get a better feel for these changes over time we generate the following interactive plot. On the following plot one can select areas of a certain mean LAI (by clicking on the map) and see the associated timeseries of \\(\\gamma^0_T\\) for each of the sensors.\n\nLAI_image = LAI_mean.hvplot.image(rasterize=True, cmap=\"viridis\", clim=(0, 6)).opts(\n    title=\"Mean LAI (Selectable)\", frame_height=400, aspect=\"equal\"\n)\n\n\ndef get_timeseries(x, y):\n    \"\"\"Plot LAI timeseries.\n\n    Parameters\n    ----------\n    x: float\n        numeric value for x selected on LAI map\n    y: float\n        numeric value for y selected on LAI map\n\n    Returns\n    -------\n    hvplot.Scatter : LAI timeseries plot\n\n    \"\"\"\n    lai_value = LAI_mean.sel(x=x, y=y, method=\"nearest\").values\n\n    if np.isnan(lai_value):\n        select = fused_ds.where(LAI_mean.isnull())\n        label = \"Water\"\n    else:\n        mask = np.isclose(LAI_mean, lai_value, atol=0.05)\n        select = fused_ds.where(mask)\n        label = \"Mean LAI: \" + str(np.round(lai_value, 1))\n\n    return (\n        select.gam0.to_dataset(\"sensor\")\n        .median([\"x\", \"y\"], skipna=True)\n        .hvplot.scatter(ylim=(-30, 5))\n        .opts(title=label, frame_height=400)\n    )\n\n\npoint_stream = hv.streams.SingleTap(source=LAI_image)\ntime_series = hv.DynamicMap(get_timeseries, streams=[point_stream])\nLAI_image + time_series\n\nFigure 4: Map of MEAN LAI around Lake Garda. The pixel values can be seen by hovering your mouse over the pixels. Clicking on the pixel will generate the timeseries for the associated mean LAI on the right hand-side. (Right) Timeseries of for Sentinel-1 and Alos-2 \\(\\gamma^0_T [dB]\\).\nCan you see some patterns when analyzing the different wavelengths and polarizations?\nRemember again that we deal with a logarithmic scale. A measurement of 10 dB is 10 times brighter than the intensity measured at 0 dB, and 100 times brighter at 20 dB. The most notable difference is that the offset between cross- and co-polarised signals becomes larger at low LAI and lower at higher LAI. This might indicate the effect of volume scattering in forested areas where co- and cross-polarization render backscattering values more equal. You will study the differences among cross- and co-polarized backscattering in more detail in the homework exercise.",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Wavelength and Polarization</span>"
    ]
  },
  {
    "objectID": "unit_02/06_in_class_exercise.html",
    "href": "unit_02/06_in_class_exercise.html",
    "title": "6  Dielectric Properties",
    "section": "",
    "text": "6.1 Load Sentinel-1 Data\nIn this notebook, we will investigate the varying backscatter values associated with different land surfaces like water bodies, forests, grasslands and urban areas. We will use backscatter data from the Sentinel-1 satellite and we will utilize the CORINE Land Cover dataset to classify and extrapolate these surfaces, enabling us to analyze how different land cover types influence backscatter responses.\nFor our analysis we are using sigma naught backscatering data from Sentinel-1. The images we are analyzing cover the region south of Vienna and west of Lake Neusiedl. We load the data and and apply again a preprocessing function. Here we extract the scaling factor and the date the image was taken from the metadata. We will focus our attention to a smaller area containing a part of the Lake Neusiedl Lake and its surrounding land. The obtainedxarray dataset and is then converted to an array, because we only have one variable, the VV backscatter values.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nsig0_da = cat.neusiedler.read().sig0.compute()\nLet’s have a look at the data by plotting the first timeslice.\nsig0_da.isel(time=0).plot(robust=True, cmap=\"Greys_r\").axes.set_aspect(\"equal\")",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backscatter Variability</span>"
    ]
  },
  {
    "objectID": "unit_02/06_in_class_exercise.html#load-corine-landcover-data",
    "href": "unit_02/06_in_class_exercise.html#load-corine-landcover-data",
    "title": "6  Dielectric Properties",
    "section": "6.2 Load CORINE Landcover Data",
    "text": "6.2 Load CORINE Landcover Data\nWe will load the CORINE Land Cover, which is a pan-European land cover and land use inventory with 44 thematic classes. The resolution of this classification is 100 by 100m and the file was created in 2018 (CORINE Land Cover).\n\ncor_da = cat.corine.read().land_cover.compute()\n\n\n6.2.1 Colormapping and Encoding\nFor the different land cover types we use the official color encoding which can be found in CORINE Land Cover.\n\n# Load encoding\nwith cat.corine_cmap.read()[0] as f:\n    color_mapping_data = json.load(f)\n\n# Get mapping\ncolor_mapping = {item[\"value\"]: item for item in color_mapping_data[\"land_cover\"]}\n\n# Create cmap and norm for plotting\ncolors = [info[\"color\"] for info in color_mapping.values()]\ncategories = [info[\"value\"] for info in color_mapping.values()]\ncmap = ListedColormap(colors)\nnorm = BoundaryNorm([*categories, max(categories) + 1], len(categories))\n\nNow we can plot the CORINE Land Cover dataset.\n\npresent_landcover_codes = np.unique(cor_da.values[~np.isnan(cor_da.values)].astype(int))\n\n# Create the plot\nplot_corine_data(cor_da, cmap, norm, color_mapping, present_landcover_codes)\n\nNow we are ready to merge the backscatter data (sig0_da) with the land cover dataset (cor_da) to have one dataset combining all data.\n\nvar_ds = xr.merge([sig0_da, cor_da]).drop_vars(\"band\")\nvar_ds",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backscatter Variability</span>"
    ]
  },
  {
    "objectID": "unit_02/06_in_class_exercise.html#backscatter-variability",
    "href": "unit_02/06_in_class_exercise.html#backscatter-variability",
    "title": "6  Dielectric Properties",
    "section": "6.3 Backscatter Variability",
    "text": "6.3 Backscatter Variability\nWith this combined dataset we can study backscatter variability in relation to natural media. For example we can look at the backscatter variability for water by clipping the dataset to only contain the land cover class water, like so:\n\n# 41 = encoded value for water bodies\nencoded_value_for_waterbodies = 41\nwaterbodies_mask = var_ds.land_cover == encoded_value_for_waterbodies\nwaterbodies_mask.plot().axes.set_aspect(\"equal\")\n\nThis gives use backscatter values over water only.\n\nwaterbodies_sig0 = var_ds.sig0.isel(time=0).where(waterbodies_mask)\nwaterbodies_sig0.plot(robust=True, cmap=\"Greys_r\").axes.set_aspect(\"equal\")\n\nTo get an idea of the variability we can create a histogram. Radar backscatter from water bodies fluctuates with surface roughness, which changes with wind conditions, creating spatial and temporal variations in signal intensity.\n\nwaterbodies_sig0.plot.hist(bins=50, edgecolor=\"black\")",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backscatter Variability</span>"
    ]
  },
  {
    "objectID": "unit_02/06_in_class_exercise.html#variability-over-time",
    "href": "unit_02/06_in_class_exercise.html#variability-over-time",
    "title": "6  Dielectric Properties",
    "section": "6.4 Variability over Time",
    "text": "6.4 Variability over Time\nNext we will look at the changes in variability in backscatter values over time for each of the CORINE Land Cover types. We do this by creating the following interactive plot. We can spot that backscatter in agricultural fields varies due to seasonal cycles like planting, growing, and harvesting, each of which changes vegetation structure. Changes in backscatter are strongly related to soil moisture content from irrigation or rainfall. Ultimately, phenological stages of crops and canopy moisture dynamics can affect the backscatter signal.\n\nplot_variability_over_time(color_mapping, var_ds, present_landcover_codes)",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backscatter Variability</span>"
    ]
  },
  {
    "objectID": "unit_03/07_in_class_exercise.html",
    "href": "unit_03/07_in_class_exercise.html",
    "title": "7  Speckle Statistics",
    "section": "",
    "text": "7.1 Lake Neusiedl data\nThis notebook will provide an empirical demonstration of speckle - how it originates, how it visually and statistically looks like, and some of the most common approaches to filter it.\nSpeckle is defined as a kind of noise that affects all radar images. Given the multiple scattering contributions originating from the various elementary objects present within a resolution cell, the resulting backscatter signal can be described as a random constructive and destructive interference of wavelets. As a consequence, speckle is the reason why a granular pattern normally affects SAR images, making it more challenging to interpret and analyze them.\nCredits: ESRI\nLet’s make an example of a cornfield (with a typical backscattering value of about -10 dB). According to the following equation:\n\\[\n\\sigma^0 = \\frac{1}{\\text{area}} \\sum_{n \\in \\text{area}} \\sigma_n\n\\]\nWe should ideally have a uniform discrete sigma naught \\(\\sigma^0\\) value, given that the cornfield pixel is the only individual contributor.\nHowever, since we already learned from the previous notebooks that a pixel’s ground size can be in the order of tens of meters (i.e., 10 meters for Sentinel-1), we can imagine that different distributed targets in the scene contribute to the global backscattered information.\nLet´s replicate this behavior with an ideal uniform area constituted by 100 pixels and then by adding 30% of speckle.\nFigure 1: Synthetic data that emulates speckles in microwave backscattering\nWe can imagine that the second plot represents a real SAR acquisition over a cornfield, while the first plot represents an ideal uniform SAR image over a cornfield land (no speckle). The introduction of a simulated 30% speckle noise could be related to the presence of distributed scatterers of any sort present in the scene, which would cause a pixel-to-pixel variation in terms of intensity.\nAll the random contributions (such as the wind) would result in a different speckle pattern each time a SAR scene is acquired over the same area. Many subpixel contributors build up a complex scattered pattern in any SAR image, making it erroneous to rely on a single pixel intensity for making reliable image analysis. In order to enhance the degree of usability of a SAR image, several techniques have been put in place to mitigate speckle. We will now show two of the most common approaches: the temporal and the spatial filter.\nWe load a dataset that contains the CORINE land cover and Sentinel-1 \\(\\sigma^0_E\\) at a 20 meter resolution. This is the same data presented in notebook 6.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nfused_ds = cat.speckle.read().compute()\nfused_ds\nWe also create the same dashboard for backscatter of different landcover types over time. In order to make this code reusable and adaptable we will define the following function plot_variability, which allows the injection of a spatial and/or temporal filter. It is not important to understand all the code of the following cell!\n# Load encoding\nwith cat.corine_cmap.read()[0] as f:\n    color_mapping_data = json.load(f)\n\n# Get mapping\ncolor_mapping = {item[\"value\"]: item for item in color_mapping_data[\"land_cover\"]}\n\n# Get landcover codes present in the image\npresent_landcover_codes = np.unique(\n    fused_ds.land_cover.values[~np.isnan(fused_ds.land_cover.values)].astype(int)\n)\n\n\ndef load_image(var_ds, time, land_cover, x_range, y_range, filter_fun_spatial=None):\n    \"\"\"Callback Function Landcover.\n\n    Parameters\n    ----------\n    time: panda.datetime\n        time slice\n    landcover: int\n        land cover type\n    x_range: array_like\n        longitude range\n    y_range: array_like\n        latitude range\n\n    Returns\n    -------\n    holoviews.Image\n\n    \"\"\"\n    if time is not None:\n        var_ds = var_ds.sel(time=time)\n\n    if land_cover == \"\\xa0\\xa0\\xa0 Complete Land Cover\":\n        sig0_selected_ds = var_ds.sig0\n    else:\n        land_cover_value = int(land_cover.split()[0])\n        mask_ds = var_ds.land_cover == land_cover_value\n        sig0_selected_ds = var_ds.sig0.where(mask_ds)\n\n    if filter_fun_spatial is not None:\n        sig0_np = filter_fun_spatial(sig0_selected_ds.values)\n    else:\n        sig0_np = sig0_selected_ds.values\n\n    # Convert unfiltered data into Holoviews Image\n    img = hv.Dataset(\n        (sig0_selected_ds[\"x\"], sig0_selected_ds[\"y\"], sig0_np), [\"x\", \"y\"], \"sig0\"\n    )\n\n    if x_range and y_range:\n        img = img.select(x=x_range, y=y_range)\n\n    return hv.Image(img)\n\n\ndef plot_variability(var_ds, filter_fun_spatial=None, filter_fun_temporal=None):\n    robust_min = var_ds.sig0.quantile(0.02).item()\n    robust_max = var_ds.sig0.quantile(0.98).item()\n\n    bin_edges = [\n        i + j * 0.5\n        for i in range(int(robust_min) - 2, int(robust_max) + 2)\n        for j in range(2)\n    ]\n\n    land_cover = {\"\\xa0\\xa0\\xa0 Complete Land Cover\": 1}\n    land_cover.update(\n        {\n            f\"{int(value): 02} {color_mapping[value]['label']}\": int(value)\n            for value in present_landcover_codes\n        }\n    )\n    time = var_ds.sig0[\"time\"].values\n\n    rangexy = RangeXY()\n\n    if filter_fun_temporal is not None:\n        var_ds = filter_fun_temporal(var_ds)\n        load_image_ = partial(\n            load_image, var_ds=var_ds, filter_fun_spatial=filter_fun_spatial, time=None\n        )\n        dmap = (\n            hv.DynamicMap(load_image_, kdims=[\"Landcover\"], streams=[rangexy])\n            .redim.values(Landcover=land_cover)\n            .hist(normed=True, bins=bin_edges)\n        )\n\n    else:\n        load_image_ = partial(\n            load_image, var_ds=var_ds, filter_fun_spatial=filter_fun_spatial\n        )\n        dmap = (\n            hv.DynamicMap(load_image_, kdims=[\"Time\", \"Landcover\"], streams=[rangexy])\n            .redim.values(Time=time, Landcover=land_cover)\n            .hist(normed=True, bins=bin_edges)\n        )\n\n    image_opts = hv.opts.Image(\n        cmap=\"Greys_r\",\n        colorbar=True,\n        tools=[\"hover\"],\n        clim=(robust_min, robust_max),\n        aspect=\"equal\",\n        framewise=False,\n        frame_height=500,\n        frame_width=500,\n    )\n\n    hist_opts = hv.opts.Histogram(width=350, height=555)\n\n    return dmap.opts(image_opts, hist_opts)\nNow, lets work on the real-life dataset to see how speckle actually looks like.\nplot_variability(fused_ds)\nFigure 2: Lake Neusiedl \\(\\sigma^0_E\\) without any filter.\nThe speckle noise typically appears as a “salt-and-pepper” pattern. Also, please note the distribution of backscatter for each land cover. Even though speckle is known for following non-normal distributions (i.e., Rayleigh distribution for amplitude in the linear domain, and the Gumple for intensity in the log domain), we can assume that due to the Central Limit Theorem, the overall backscatter means (dB) tend to follow a Gaussian distribution.\nWe can mitigate speckle (it is impossible to remove it completely) by following approaches such as: - spatial filtering - taking mean backscatter value over the same land cover, or - temporal filtering - taking the average backscatter value over some time period.\nEither way, one pixel is never representative of ground truth! Therefore we need to look at samples and distributions.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Speckle Statistics</span>"
    ]
  },
  {
    "objectID": "unit_03/07_in_class_exercise.html#spatial-filtering",
    "href": "unit_03/07_in_class_exercise.html#spatial-filtering",
    "title": "7  Speckle Statistics",
    "section": "7.2 Spatial filtering",
    "text": "7.2 Spatial filtering\nWe first introduce a common spatial filter. The Lee filter is an adaptive speckle filter. The filter works using a kernel window with a configurable size, which refers to the dimensions of the neighborhood over which the filter operates. The kernel slides across the data, applying the smoothing operation at each pixel position of the image. It follows three assumptions:\n\nSAR speckle is modeled as a multiplicative noise - the brighter the area the noisier the data.\nThe noise and the signal are statistically independent of each other.\nThe sample mean and sample variance of a pixel is equal to its local mean and local variance.\n\nThis approach comes with some limitations: it reduces the spatial resolution of the SAR image.\nLet’s build up a function for applying a Lee filter with a kernel window size of 7 (do not forget to switch back to linear units before doing this computation and to dB after it):\n\ndef lee_filter(raster, size=7):\n    \"\"\"Parameters\n    raster: ndarray\n        2D array representing the noisy image (e.g., radar image with speckle)\n    size: int\n        Size of the kernel window for the filter (must be odd, default is 7)\n\n    Returns\n    -------\n    filtered_image (ndarray): The filtered image with reduced speckle noise\n\n    \"\"\"\n    raster = np.nan_to_num(raster)\n    raster = 10 ** (raster / 10)\n\n    # Mean and variance over local kernel window\n    mean_window = uniform_filter(raster, size=size)\n    mean_sq_window = uniform_filter(raster**2, size=size)\n    variance_window = mean_sq_window - mean_window**2\n\n    # Noise variance estimation (this could also be set manually)\n    overall_variance = np.var(raster)\n\n    # Compute the Lee filter\n    weights = variance_window / (variance_window + overall_variance)\n\n    return 10 * np.log10(mean_window + weights * (raster - mean_window))\n\n\nplot_variability(fused_ds, filter_fun_spatial=lee_filter)\n\nFigure 3: Lake Neusiedl \\(\\sigma^0_E\\) with a Lee filter applied.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Speckle Statistics</span>"
    ]
  },
  {
    "objectID": "unit_03/07_in_class_exercise.html#temporal-filtering",
    "href": "unit_03/07_in_class_exercise.html#temporal-filtering",
    "title": "7  Speckle Statistics",
    "section": "7.3 Temporal filtering",
    "text": "7.3 Temporal filtering\nTemporal filtering would involve taking the average of all previous (past) observations for each pixel. This approach comes with some limitations: it takes out the content-rich information tied to the temporal variability of backscatter.\n\ndef temporal_filter(raster):\n    \"\"\"Parameters\n    raster: ndarray\n        3D array representing the noisy image over time\n        (e.g., radar image with speckle)\n\n    Returns\n    -------\n    filtered_image (ndarray): The filtered image with reduced speckle noise\n\n    \"\"\"\n    return raster.mean(\"time\")\n\n\nplot_variability(fused_ds, filter_fun_temporal=temporal_filter)\n\nFigure 4: Lake Neusiedl \\(\\sigma^0_E\\) with a temporal filter applied.\nLet´s observe the histograms of the two plots. Especially in the region around the lake, it is clear that the distribution is now less dispersed and more centered around a central value.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Speckle Statistics</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html",
    "href": "unit_03/08_in_class_exercise.html",
    "title": "8  Interferograms",
    "section": "",
    "text": "8.1 Single Look Complex (SLC) Data\nOn July 5th, 2019, an earthquake with a magnitude of 7.1 mainshock struck eastern California, near the city of Ridgecrest. The seismic event produced a surface rupture spanning more than 50 kilometers with a complex vertical and horizontal offset pattern along the main fault line. SAR imagery can be employed for accurately measuring and describing ground motion through a well-established technique called SAR Interferometry. In this framework, the phase information contained in Synthetic Aperture Radar (SAR) data is employed. In this notebook, we will dive into the main interferometric SAR processing operations which involves retrieving the difference between the phase signals of repeated SAR acquisitions to analyze the shape and deformation of the Earth’s surface. In our case, we will use a pair of Single Look Complex (SLC) Sentinel-1 images to obtain an interferogram of the Ridgecrest earthquake.\nThis notebook will outline the process of working with interferograms and the steps needed to extract valuable information. Here, we will focus on displaying products generated by the Sentinel Application Platform (SNAP) software from the European Space Agency (ESA).\nPhoto by Brian Olson / California Geological Survey\nWe introduce now another level-1 radar product type, which is called Single Look Complex (SLC). Interferometry can only be performed with SLC data. What are the main differences between SLC and GRD (the other level-1 radar product)? + SLC vs GRD: + SLC contains complex-value data (amplitude and phase) vs GRD contains intensity only (amplitude) + SLC geometry is Slant Range (radar’s line of sight) vs GRD data are projected onto ground range + SLC resolution is full vs GRD has lower resolution (it is multi-looked) + SLC supports phase-based applications (Interferometry) vs GRD supports only amplitude-based ones + SLC has larger file sizes compared to GRD\nurl = get_intake_url()\ncat = intake.open_catalog(url)\niw1_ds = cat.iw1.read()\niw2_ds = cat.iw2.read()\niw3_ds = cat.iw3.read()\nLet’s plot all three sub-swaths to view the full scene acquired by the satellite. The acquisition times for each swath on July 10th, 2019 are the following: - IW1 at 01:50:01 - 01:50:26 - IW2 at 01:49:59 - 01:50:24 - IW3 at 01:50:00 - 01:50:25\nfig, ax = plt.subplots(1, 3, figsize=(15, 7), sharey=True)\n\ndatasets = [iw1_ds, iw2_ds, iw3_ds]\nval_range = dict(vmin=0, vmax=255, cmap=\"gray\")\n\nfor i, ds in enumerate(datasets):\n    im = ds.intensity.plot(ax=ax[i], add_colorbar=False, **val_range)\n    ax[i].tick_params(axis=\"both\", which=\"major\")\n\ncbar = fig.colorbar(im, ax=ax, orientation=\"horizontal\", shrink=0.9, pad=0.2)\n\nplt.show()\nWe don’t need all three of the subswaths for our notebook, so we will focus on IW2 and display its intensity and phase measurements.\n# Compute the intensity and phase from complex data\ncmap_hls = sns.hls_palette(as_cmap=True)\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 6))\n\nds.intensity.plot(ax=axes[0], cmap=\"gray\", robust=True)\naxes[0].set_title(\"Intensity Measurement of IW2\")\n\nds.phase.plot(ax=axes[1], cmap=cmap_hls)\naxes[1].set_title(\"Phase Measurement of IW2\")\n\nplt.tight_layout()\nIntensity is represented in an 8-bit format (ranging from 0 to 255), while phase measurements range from \\(- \\pi\\) to \\(\\pi\\) . At first glance, phase does not correspond to easily observable physical properties of the ground. However, the phase becomes incredibly valuable when, for example, it is used comparatively between two successive phase measurements (two Sentinel-1 images acquired at different times over the same area). Here are the processing steps needed to retrieve a difference between the phases of two radar acquisitions:",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#coregistering",
    "href": "unit_03/08_in_class_exercise.html#coregistering",
    "title": "8  Interferograms",
    "section": "8.2 Coregistering",
    "text": "8.2 Coregistering\nBefore creating an interferogram, measurements from two different dates need to be coregistered. This means that each pixel from the two acquisitions must be precisely aligned so that they are representing the same ground object. Accurate and successful co-registration of the two (or more) images is vital for interferometry processing. We call the “master” image the reference image (typically the earliest acquisition in time) to which we coregister the “slave” image (typically acquired later in time).\n\ncoregistered_ds = cat.coreg.read()\n\nfig, axes = plt.subplots(1, 2, figsize=(18, 8))\ncoregistered_ds.band_data.sel(band=1).plot(ax=axes[0], cmap=\"gray\", robust=True)\naxes[0].set_title(\"Master Phase Measurement - 28 Jun 2019\")\n\ncoregistered_ds.band_data.sel(band=2).plot(ax=axes[1], cmap=\"gray\", robust=True)\naxes[1].set_title(\"Slave Phase Measurement - 10 Jul 2019\")\n\nplt.tight_layout()",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#interferogram-formation-and-coherence-estimation",
    "href": "unit_03/08_in_class_exercise.html#interferogram-formation-and-coherence-estimation",
    "title": "8  Interferograms",
    "section": "8.3 Interferogram Formation and Coherence Estimation",
    "text": "8.3 Interferogram Formation and Coherence Estimation\nThe interferogram formation process combines the amplitudes of both images and calculates the difference between their respective phases at each SAR image pixel (cross-multiplication of the master image with the complex conjugate of the slave image).\nAfter building up the interferogram, we have to take into account the presence of other contributing terms that could hinder our goal of measuring the surface deformation due to the earthquake. For example, we need to subtract from the interferogram the flat-earth phase contribution, which is a signal contribution due to the curvature of the Earth’s surface. This is here done automatically through the SNAP software operators.\nIn general, the accuracy of interferometric measurements are influenced by many contributors that could result in a loss of coherence. But what is coherence? It is a measure of phase correlation between the master and slave image. Interferometric coherence (γ) can be expressed as:\n\\[γ = γ_{proc}*γ_{geom}*γ_{vol}*γ_{SNR}*γ_{temp}\\]\nwhere \\(γ_{proc}\\) refers to inaccuracies in the processing (e.g., coregistration errors), \\(γ_{geom}\\) refers to the baseline decorrelation (different position of satellites during the two acquisitions), \\(γ_{vol}\\) refers to volume decorrelation (vegetation related), \\(γ_{SNR}\\) refers to the radar instrument thermal noise and \\(γ_{temp}\\) refers to the decorrelation caused by change of position of the objects in the scene during the time interval of the images acquisitions (e.g., plant growth, wind-induced movements or ground deformation due to earthquakes, landslides).\nTherefore, we can conclude that interferometric accuracy is sensitive to many processes, hence isolating the ground deformation signal involves several operations. On the other hand, interferometric coherence sensitivity could be exploited to track and map phenomena that cause its degradation (e.g., vegetation features, and water content).\n\ninterferogram_ds = cat.inter.read()\n\ncmap_hls_hex = sns.color_palette(\"hls\", n_colors=256).as_hex()\n\ninterferogram_ds = interferogram_ds.where(interferogram_ds != 0)\nigf_da = interferogram_ds.sel(band=1).band_data\ncoh_da = interferogram_ds.sel(band=2).band_data\n\n# Invert y axis\nigf_da[\"y\"] = igf_da.y[::-1]\ncoh_da[\"y\"] = coh_da.y[::-1]\n\nigf_plot = igf_da.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    cmap=cmap_hls_hex,\n    width=600,\n    height=600,\n    dynamic=False,\n)\n\ncoh_plot = coh_da.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    cmap=\"viridis\",\n    width=600,\n    height=600,\n    dynamic=False,\n).opts(clim=(0, 1))\n\n(igf_plot + coh_plot).opts(shared_axes=True)\n\nNow we can observe patterns that emerged between the two acquisitions. If you look at the data range in the interferogram (left plot), you’ll notice it spans approximately one wavelength, from \\(-\\pi\\) to \\(\\pi\\). On the right, you find a plot of the interferometric coherence (values ranging between 0 and 1), where low coherence is found along the ground surface ruptures caused by the earthquake. Please note, that the interferogram has already undergone a deburst operation (all bursts merged into a single image).",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#topographic-phase-removal",
    "href": "unit_03/08_in_class_exercise.html#topographic-phase-removal",
    "title": "8  Interferograms",
    "section": "8.4 Topographic Phase Removal",
    "text": "8.4 Topographic Phase Removal\nSince the local topography is an additional phase term constituting the interferogram that we built up so far, we need to make an estimate of its impact in order to further remove it to keep only the ground deformation-related phase. For this purpose, we use a reference known DEM to simulate an interferogram and to subtract it from the original interferogram.\n\ntopo_ds = cat.topo.read()\n\nfig, axes = plt.subplots(1, 3, figsize=(18, 5))\n\nigf_da.plot(ax=axes[0], cmap=cmap_hls)\naxes[0].set_title(\"Interferogram With Topographic Phase\")\n\ntopo_ds.topo.plot(ax=axes[1], cmap=\"gist_earth\")\naxes[1].set_title(\"Topography\")\n\ntopo_ds.Phase.plot(ax=axes[2], cmap=cmap_hls)\naxes[2].set_title(\"Interferogram Without Topographic Phase\")\n\nplt.tight_layout()",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#multi-looking-goldstein-phase-filtering-and-geocoding",
    "href": "unit_03/08_in_class_exercise.html#multi-looking-goldstein-phase-filtering-and-geocoding",
    "title": "8  Interferograms",
    "section": "8.5 Multi-looking, Goldstein Phase Filtering and Geocoding",
    "text": "8.5 Multi-looking, Goldstein Phase Filtering and Geocoding\nIn order to improve the phase signatures contained within our interferogram and get a generally higher signal-to-noise (SNR) ratio, we will perform two additional operations called multi-looking and Goldstein phase filtering. Multi-looking is the process of averaging adjacent pixels using a moving window of the interferogram to reduce noise (at the cost of reducing the spatial resolution). Coherence is involved in this operation to flag and set areas to no data that are considered unreliable (low coherence) and to keep the reliable ones (high coherence).\nFinally, to make data interpretable, we geocode the wrapped interferogram. So far we performed the interferometric processing in the radar geometry. The transformation into geographic coordinates will help us to perform further comparisons in a real-world coordinate system.\n\ngeocoded_ds = cat.geocode.read()\n\nstep = 4  # if you want to zoom in, suggestion is to make this step smaller\n\ngeocoded_ds = geocoded_ds.where(geocoded_ds != 0)\nigf_data = geocoded_ds.sel(band=1).band_data\ncoh_da = geocoded_ds.sel(band=2).band_data\n\nigf_plot = igf_data.isel(x=slice(0, -1, step), y=slice(0, -1, step)).hvplot.image(\n    x=\"x\", y=\"y\", cmap=cmap_hls_hex, width=600, height=600, dynamic=False\n)\n\ncoh_plot = (\n    coh_da.isel(x=slice(0, -1, step), y=slice(0, -1, step))\n    .hvplot.image(x=\"x\", y=\"y\", cmap=\"viridis\", width=600, height=600, dynamic=False)\n    .opts(clim=(0, 1))\n)\n\n(igf_plot + coh_plot).opts(shared_axes=True)\n\nIn the above plot, we can compare georeferenced data in the form of the interferogram (left) and the coherence (right). Along the earthquake fault line, low coherence between the two phase acquisitions is visible. This occurs due to extreme changes in terrain heights or displacements, which are beyond the sensitivity of the SAR sensor. This area of low coherence indicates higher uncertainty in the interferogram. However, this isn’t necessarily a drawback, as it helps to clearly identify the earthquake epicenter.\nYou can also explore and zoom into regions with “fringe patterns” to observe ground movement. Each fringe cycle (e.g., from red to red or blue to blue) corresponds to ground motion in this case. The fringe patterns indicate motion in the line-of-sight (LOS) of the satellite (Sentinel-1 has a mean incidence angle of 38°) in terms of either uplift (relative motion of the ground towards the satellite) or sinking (relative motion of the ground away from the satellite). If the interferogram phase changes from 0 to -3.14 (cycles in the negative direction), the surface is moving away from the satellite (i.e., sinking movement). Vice versa, if cycles go in the positive direction (from 0 to +3.14), it would mean a relative uplifting movement of the ground. In areas with no ground motion, fringe patterns disappear. The radar’s sensitivity to motion depends on its wavelength. For Sentinel-1 (~5.6cm), a full fringe cycle (\\(2\\pi\\)) represents a displacement of ~2.8 cm in the LOS direction.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#visualisation-of-the-earthquake-event-on-july-5th-2019",
    "href": "unit_03/08_in_class_exercise.html#visualisation-of-the-earthquake-event-on-july-5th-2019",
    "title": "8  Interferograms",
    "section": "8.6 Visualisation of the Earthquake Event on July 5th, 2019",
    "text": "8.6 Visualisation of the Earthquake Event on July 5th, 2019\n\nstep = 4  # Downsample data for visualization\nigf_data_subset = igf_data.isel(x=slice(0, -1, step), y=slice(0, -1, step))\n\n\ndef array_to_img(data_array, cmap):\n    fig, ax = plt.subplots(figsize=(6, 6), dpi=600)\n    data_array.plot(ax=ax, cmap=cmap, add_colorbar=False, add_labels=False)\n    ax.set_axis_off()\n    buf = BytesIO()\n    plt.savefig(buf, format=\"png\", bbox_inches=\"tight\", pad_inches=0, transparent=True)\n    plt.close(fig)\n    return base64.b64encode(buf.getvalue()).decode(\"utf-8\")\n\n\nigf_image = array_to_img(igf_data_subset, cmap=cmap_hls)\nbounds = [\n    [float(igf_data[\"y\"].min()), float(igf_data[\"x\"].min())],\n    [float(igf_data[\"y\"].max()), float(igf_data[\"x\"].max())],\n]\n\nm = folium.Map(\n    location=[float(igf_data[\"y\"].mean()), float(igf_data[\"x\"].mean())],\n    zoom_start=10,\n)\nfolium.TileLayer(\n    tiles=(\n        \"https://server.arcgisonline.com/ArcGIS/rest/\"\n        \"services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n    ),\n    attr=\"Tiles © Esri\",\n    name=\"ESRI World Imagery\",\n).add_to(m)\nfolium.TileLayer(\n    tiles=(\n        \"https://server.arcgisonline.com/ArcGIS/rest/\"\n        \"services/Reference/World_Boundaries_and_Places/\"\n        \"MapServer/tile/{z}/{y}/{x}\"\n    ),\n    attr=\"Tiles © Esri\",\n    name=\"ESRI Labels\",\n    overlay=True,\n).add_to(m)\n\nfolium.raster_layers.ImageOverlay(\n    image=f\"data:image/png;base64,{igf_image}\",\n    bounds=bounds,\n    opacity=0.65,\n    name=\"Interferogram\",\n).add_to(m)\nfolium.LayerControl().add_to(m)\n\nm",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/09_in_class_exercise.html",
    "href": "unit_03/09_in_class_exercise.html",
    "title": "9  Phase Unwrapping",
    "section": "",
    "text": "9.1 Loading Data\nThe goal of this notebook is to read an interferogram image (i.e., 2-D array of phase values) and unwrap it. Phase unwrapping is a critical process in interferometry, which involves recovering unambiguous phase data from the interferogram.\nA SAR interferogram represents the phase difference between two radar acquisitions (i.e., two SLC images). The phase difference is usually wrapped within a range of 0 to 2π, because the phase is inherently cyclical. When the true phase difference exceeds 2π, it gets “wrapped” into this range, creating a discontinuous phase signal. Phase unwrapping refers to the process of reconstructing the continuous phase field from the wrapped phase data.\nUnwrapping an interferogram is essential for extracting correct information contained in the phase such as surface topography and earth surface deformations.\nThere are many approaches that tried to solve the unwrapping problem, tackling challenging scenarios involving noise or large phase discontinuities. Here we present the Network-flow Algorithm for phase unwrapping (C. W. Chen and H. A. Zebker, 2000), which is implemented in the snaphu package.\nThe data is stored on the Jupyterhub server, so we need to load it using their respective paths. In this notebook we will use the resulting wrapped interferogram from notebook “Interferograms”, but we need to process it in the radar geometry in order to unwrap it (while in notebook “Interferograms” we end the whole process by performing the geocoding, just for better visualization purposes).\nimport contextlib\nimport os\n\nimport cmcrameri as cmc  # noqa: F401\nimport intake\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport snaphu\nimport xarray as xr\nfrom matplotlib import patches\n\nfrom mrs.catalog import get_intake_url\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nds = cat.complex.read().compute()\nds[\"cmplx\"] = ds[\"real\"] + ds[\"imag\"] * 1j\n# Set cyclic and linear colormaps\ncmap_cyc = sns.color_palette(\"hls\", as_cmap=True)  # \"cmc.romaO\"\ncmap_lin = \"cmc.roma_r\"\ncmap_disp = \"cmc.vik\"\n\n# Create a mask for the areas which have no data\nmask = ds.phase.where(ds.phase == 0, True, False).astype(bool)\nLet’s start by displaying the interferogram that needs to be unwrapped. Recall that due to the Slant Range geometry and the satellite acquisition pass (ascending, in our case), the image appears north/south flipped (with respect to the geocoded image)!\n# Plot Phase Interferogram Image\nfig, axs = plt.subplots(figsize=(6, 6))\n\n(\n    ds.phase.where(mask)\n    .plot.imshow(cmap=cmap_cyc, zorder=1)\n    .axes.set_title(\"Phase Interferogram Image (Wrapped)\")\n)\nplt.show()",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Phase Unwrapping</span>"
    ]
  },
  {
    "objectID": "unit_03/09_in_class_exercise.html#phase-unwrapping",
    "href": "unit_03/09_in_class_exercise.html#phase-unwrapping",
    "title": "9  Phase Unwrapping",
    "section": "9.2 Phase Unwrapping",
    "text": "9.2 Phase Unwrapping\nAs we will be doing the unwrapping multiple times in this notebook let’s create a function that does the unwrapping for us on xarray DataArray objects. The actual core function where the unwrapping is happening is snaphu.unwrap_phase from the snaphu package. This function needs a 2D numpy array as input, where each pixel value is a complex number. Therefore we have to convert the xarray DataArray to a 2D numpy array with complex values. We do that by combining the phase and intensity bands to a complex array. The actual unwrapping is essentially an addition of the phase values, such that the values are continuous and not between \\(-\\pi\\) and \\(\\pi\\).\n\nFigure 1: Illustration of how the unwrapping of the phase works. (Source: ESA).\n\n@contextlib.contextmanager\ndef suppress_output():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = os.dup(1)\n        old_stderr = os.dup(2)\n\n        os.dup2(devnull.fileno(), 1)\n        os.dup2(devnull.fileno(), 2)\n\n        try:\n            yield\n        finally:\n            os.dup2(old_stdout, 1)\n            os.dup2(old_stderr, 2)\n            os.close(old_stdout)\n            os.close(old_stderr)\n\n\ndef unwrap_array(\n    data: xr.DataArray,\n    complex_var: str = \"cmplx\",\n    ouput_var: str = \"unwrapped\",\n    mask: xr.DataArray = True,\n    coherence: xr.DataArray = None,\n    mask_nodata_value: int = 0,\n    coh_low_threshold: float = None,\n    coh_high_threshold: float = None,\n    nlooks=1.0,\n    cost=\"smooth\",\n    init=\"mcf\",\n    **kwargs,\n) -&gt; xr.DataArray:\n    \"\"\"Unwraps the phase data using the snaphu algorithm.\n\n    Parameters\n    ----------\n    data: xarray DataArray with complex numbers\n    complex_var: Name of the variable with the complex numbers\n    ouput_var: Name of the variable with the unwrapped phase\n    mask: xarray DataArray with mask values\n    coherence: xarray DataArray with coherence values (optional)\n    mask_nodata_value: Value of the no data pixels in the mask\n    coh_low_threshold: Lower threshold for the coherence values\n    coh_high_threshold: Higher threshold for the coherence values\n\n    Returns\n    -------\n    xarray DataArray with the unwrapped phase\n\n    \"\"\"\n    # Get the complex data\n    data_arr = data[complex_var]\n\n    # Create a mask for areas with no data\n    if mask is True:\n        mask = (data_arr.real != mask_nodata_value).astype(bool)\n\n    # Apply coherence thresholds if provided\n    if coherence is not None:\n        if coh_low_threshold is not None:\n            coh_mask = (coherence &gt;= coh_low_threshold).astype(bool)\n            mask = mask & coh_mask\n        if coh_high_threshold is not None:\n            coh_mask = (coherence &lt;= coh_high_threshold).astype(bool)\n            mask = mask & coh_mask\n\n    # Apply the mask to the data\n    data_arr = data_arr.where(mask)\n\n    if coherence is None:\n        coherence = np.ones_like(data_arr.real)\n\n    # Unwrap the phase (already in complex form)\n    with suppress_output():\n        unw, _ = snaphu.unwrap(\n            data_arr,\n            coherence,\n            nlooks=nlooks,\n            cost=cost,\n            init=init,\n            mask=mask,\n            **kwargs,\n        )\n\n    # Build xarray DataArray with the unwrapped phase\n    # unw_da = xr.DataArray(unw, coords=data.coords, dims=data.dims)\n    # data = data.to_dataset()\n    data[ouput_var] = ((\"y\", \"x\"), unw)\n\n    # Mask the unwrapped phase\n    # unw_da = unw_da.where(mask)\n    data[ouput_var] = data[ouput_var].where(mask)\n    return data\n\n\n9.2.1 Unwrapping on a Subset\nAs the original image is too large to unwrap in a reasonable time, we will unwrap a subset of the image. In this case, we will unwrap an area of 500x500 pixels.\n\n# Select a subset of the data\ndx, dy = 500, 500\nx0, y0 = 2800, 1700\n\n\ndef subsetting(ds, x0: int = 0, y0: int = 0, dx: int = 500, dy: int = 500):\n    return ds.isel(x=slice(x0, x0 + dx), y=slice(y0, y0 + dy))\n\n\n# Subsetting the data arrays\nsubset = subsetting(ds.where(mask), x0, y0, dx, dy)\n\n# Unwrap the subset\nsubset = unwrap_array(subset, complex_var=\"cmplx\", ouput_var=\"unwrapped\")\n\nNow let’s compare the wrapped and unwrapped phase images.\n\nfig, axs = plt.subplots(1, 3, figsize=(14, 4))\n\n# Wrapped Phase\n\n(\n    subset.phase.plot.imshow(cmap=cmap_cyc, ax=axs[0]).axes.set_title(\n        \"Wrapped Phase of the Subset\"\n    )\n)\n\n# Unwrapped Phase\n(\n    subset.unwrapped.plot.imshow(\n        cmap=cmap_cyc, ax=axs[1], vmin=-80, vmax=80\n    ).axes.set_title(\"Unwrapped Phase of the Subset\")\n)\n\n# Subset inside the complete image\n(\n    ds.phase.where(mask)\n    .plot.imshow(cmap=cmap_cyc, zorder=1, ax=axs[2])\n    .axes.set_title(\"Complete Wrapped Phase Image\")\n)\n\nx_start = ds.phase.coords[\"x\"][x0].item()\ny_start = ds.phase.coords[\"y\"][y0].item()\nx_end = ds.phase.coords[\"x\"][x0 + dx].item()\ny_end = ds.phase.coords[\"y\"][y0 + dy].item()\n\nrect = patches.Rectangle(\n    (x_start, y_start),\n    x_end - x_start,\n    y_end - y_start,\n    linewidth=1,\n    edgecolor=\"r\",\n    facecolor=\"red\",\n    alpha=0.5,\n    label=\"Subset\",\n)\n\n# Add the rectangle to the plot\naxs[2].add_patch(rect)\naxs[2].legend()\nplt.tight_layout()\n\n\n\n9.2.2 Unwrapping with coherence mask\nAdditionally, can we try to calculate the unwrapped image, where we are excluding pixels, where the coherence values are lower than a certain threshold. This is done by masking the coherence image with the threshold value and then unwrapping the phase image with the masked coherence image.\n\nthreshold1 = 0.3\nsubset = unwrap_array(\n    subset,\n    coherence=subset.coh,\n    coh_low_threshold=threshold1,\n    complex_var=\"cmplx\",\n    ouput_var=\"unwrapped_coh\",\n)\n\nLet’s compare the unwrapped image with and without the coherence mask.\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 5))\n(\n    subset.unwrapped_coh.plot.imshow(\n        cmap=cmap_cyc, ax=axs[0], vmin=-80, vmax=80\n    ).axes.set_title(f\"Unwrapped Phase with Coherence Threshold {threshold1}\")\n)\n\n(\n    subset.unwrapped.plot.imshow(\n        cmap=cmap_cyc, ax=axs[1], vmin=-80, vmax=80\n    ).axes.set_title(\"Unwrapped Phase without Coherence Threshold\")\n)\n\nplt.show()\n\nLet’s see if another threshold value for the coherence mask gives better results.\n\nthreshold2 = 0.5\nsubset = unwrap_array(\n    subset,\n    coherence=subset.coh,\n    coh_low_threshold=threshold2,\n    complex_var=\"cmplx\",\n    ouput_var=\"unwrapped_coh2\",\n)\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 5))\n(\n    subset.unwrapped_coh2.plot.imshow(\n        cmap=cmap_cyc, ax=axs[0], vmin=-80, vmax=80\n    ).axes.set_title(\"Coherence Threshold 0.5\")\n)\n\n(\n    subset.unwrapped_coh.plot.imshow(\n        cmap=cmap_cyc, ax=axs[1], vmin=-80, vmax=80\n    ).axes.set_title(\"Coherence Threshold 0.3\")\n)\nplt.show()\n\nA higher coherence threshold means that only pixels with a coherence value greater than 0.5 will be used for phase unwrapping. This would result in an unwrapping process that is likely more stable, with reduced noise (invalid phase information in the proximity of the earthquake faults is discarded). However, an excessive coherence threshold might have significant gaps or missing information, especially in areas where motion or surface changes have occurred. The choice of a coherence threshold depends on the balance you want to strike between the accuracy and coverage of the output unwrapped image.\nKeep in mind that in case of large displacements, such as the Ridgecrest earthquake, phase unwrapping can be problematic and lead to poor results: when the displacement is large, the phase difference becomes wrapped multiple times, leading to phase aliasing. In this case, the phase values become ambiguous, we cannot distinguish between multiple phase wraps, thus leading to incorrect results.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Phase Unwrapping</span>"
    ]
  },
  {
    "objectID": "unit_03/09_in_class_exercise.html#applying-an-equation-for-the-displacement-map",
    "href": "unit_03/09_in_class_exercise.html#applying-an-equation-for-the-displacement-map",
    "title": "9  Phase Unwrapping",
    "section": "9.3 Applying an Equation for the Displacement Map",
    "text": "9.3 Applying an Equation for the Displacement Map\nFrom the unwrapped phase image (we will use the phase masked with a coherence threshold of 0.3) we can calculate the displacement map using the following equation:\n$ d = - _d $\nwhere: - \\(\\lambda = 0.056\\) for Sentinel-1 - \\(\\Delta \\phi_d\\) is the unwrapped image\nThis operation can be very useful for monitoring ground deformation.\n\ndef displacement(unw, lambda_val: float = 0.056) -&gt; xr.DataArray:\n    \"\"\"Calculates the displacement from the unwrapped phase\n\n    Parameters\n    ----------\n    unw: xarray DataArray with the unwrapped phase\n    unw: xr.DataArray\n    lambda_val: Wavelength of the radar signal\n    lambda_val: float\n\n    Returns\n    -------\n    xarray DataArray with the displacement\n\n    \"\"\"\n    disp = unw * -lambda_val / (4 * np.pi)\n    return disp\n\n\n# Calculate the displacement\ndisp_subset = displacement(subset.unwrapped_coh)\n\n\n# Plot the displacement map\n(\n    disp_subset.plot.imshow(\n        cmap=cmap_disp, cbar_kwargs={\"label\": \"Meters [m]\"}\n    ).axes.set_title(\"Displacement Map of the Subset\")\n)\nplt.show()",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Phase Unwrapping</span>"
    ]
  },
  {
    "objectID": "unit_03/09_in_class_exercise.html#coarsen-approach",
    "href": "unit_03/09_in_class_exercise.html#coarsen-approach",
    "title": "9  Phase Unwrapping",
    "section": "9.4 Coarsen Approach",
    "text": "9.4 Coarsen Approach\nAs the whole data is too large and the processing time already exceeds 20 minutes when using an image with 4000x4000 pixels, we can coarsen the image so that we can unwrap and compute the displacement for the whole scene.\n\nkernel_size = 3\nlowres = ds.coarsen(x=kernel_size, y=kernel_size, boundary=\"trim\").median()\n\n\nlowres = unwrap_array(\n    lowres,\n    ntiles=(20, 30),\n    tile_overlap=10,\n    coherence=lowres.coh,\n    coh_low_threshold=0.3,\n    complex_var=\"cmplx\",\n    ouput_var=\"unwrapped\",\n)\n\nWe can now plot the unwrapped image of the low resolution image.\n\n# Plot the unwrapped phase\n(\n    lowres.unwrapped.plot.imshow(cmap=cmap_cyc).axes.set_title(\n        \"Unwrapped Phase entire scene (coarsened)\"\n    )\n)\nplt.show()\n\nWe can also now calculate the displacement map and compare them.\n\nlowres_disp = displacement(lowres.unwrapped)\n\n# Plot the displacement map\n(\n    lowres_disp.plot.imshow(\n        cmap=cmap_disp, cbar_kwargs={\"label\": \"Meters [m]\"}\n    ).axes.set_title(\"Displacement Map entire scene (coarse resolution)\")\n)\nplt.show()\n\nPlot a summary of the previous plots:\n\n# Plot summary of previous plots\nfig, axs = plt.subplots(2, 2, figsize=(12, 10))\nax = axs.ravel()\n\n(\n    subset.unwrapped_coh.plot.imshow(\n        cmap=cmap_cyc, ax=ax[0], vmin=-80, vmax=80\n    ).axes.set_title(\"Unwrapped Phase of the subset with Coherence Threshold 0.3\")\n)\n\n(\n    disp_subset.plot.imshow(\n        cmap=cmap_disp, ax=ax[1], cbar_kwargs={\"label\": \"Meters [m]\"}\n    ).axes.set_title(\"Displacement Map of the Subset\")\n)\n\n(\n    lowres.unwrapped.plot.imshow(cmap=cmap_cyc, ax=ax[2]).axes.set_title(\n        \"Unwrapped Phase of the entire scene with Coherence Threshold 0.3 (coarsened)\"\n    )\n)\n\n(\n    lowres_disp.plot.imshow(\n        cmap=cmap_disp, ax=ax[3], cbar_kwargs={\"label\": \"Meters [m]\"}\n    ).axes.set_title(\"Displacement Map entire scene (coarse resolution)\")\n)\n\nplt.tight_layout()\n\nIn the following animation, we can capture the 3D displacement caused by the Ridgecrest quake by observing the after and before elevation model.\n Credits: NASA",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Phase Unwrapping</span>"
    ]
  }
]