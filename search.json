[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "JupyerHub Guide",
    "section": "",
    "text": "JupyterHub Guide\nThis is a short guide to create and run the notbooks and environments in the JupiterHub for the Master course Microwave Remote Sensing (120.030) at the TU Wien.",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "index.html#starting-jupyterhub",
    "href": "index.html#starting-jupyterhub",
    "title": "JupyerHub Guide",
    "section": "Starting JupyterHub",
    "text": "Starting JupyterHub\nIn TUWEL, click on the JupyterHub icon , which redirects you to your own JupyterLab user environment. You should then select the image for the 120.030 Microwave Remote Sensing 2025W: Science Notebook. Be patient - this can take a couple of minutes.\n\n\n\nPlease note that all screenshots in this guide refer to the lecture 120.030 Microwave Remote Sensing (2025W), even if a few things are different for you, the overall functionality and interface remain the same.",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "index.html#exploring-jupyterlab",
    "href": "index.html#exploring-jupyterlab",
    "title": "JupyerHub Guide",
    "section": "Exploring JupyterLab",
    "text": "Exploring JupyterLab\nWhen you start your server for the first time, your point of entry will be this starting page:\n\n\n\nIn the center, you have the Launcher where you can create Python or other files, play around with Jupyter Notebooks, store intermediate data. You can also open a Python console, a terminal, a text file, and many more. On the left, you can see your home directory where you have the folders microwave-remote-sensing, lectures and shared. There might be other folders as well, but don’t be concerned about them. The folder microwave-remote-sensing contains the course materials.\n\n\nAfter some intense coding and analysis, it can happen that you have many terminal and notebook tabs open. However, simply closing them does not quit the processes and running kernels in the background. Therefore, we recommend that you tidy up your running processes after some time, which can be done as marked by the top-left circle. As an overview, the number of running kernels and terminals are always shown at the bottom-left corner.",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "index.html#editing-jupyter-notebooks",
    "href": "index.html#editing-jupyter-notebooks",
    "title": "JupyerHub Guide",
    "section": "Editing Jupyter Notebooks",
    "text": "Editing Jupyter Notebooks\nThe homework exercises of the course are labeled as homework_exercise.ipynb. You are supposed to use these notebooks for the homework assignments and the completed notebooks should be submitted through TUWEL. The notebooks consist of two types of cells: Python and Markdown cells. Python cells contain executable Python code, whereas Markdown cells are used for open text and multiple choice questions. Double click on an existing cell to alter its content. To add new cells click select the cell type from the drop-down menu and click on the plus sign, as follows for Python cells:\n\nAnd for Markdown cells:\n\nFor the multiple choice questions double click on the Markdown cell and replace the correct answers, as follows:\n- [ ] Original\n- [x] Selected answer\n\nOriginal\nSelected answer\n\nTo save your work use the drop-down menu under File and select Save Notebook or use the shortcut CTRL + S.",
    "crumbs": [
      "JupyterHub Guide"
    ]
  },
  {
    "objectID": "unit_01/03_in_class_exercise.html",
    "href": "unit_01/03_in_class_exercise.html",
    "title": "1  Backscattering Coefficients",
    "section": "",
    "text": "1.1 Loading Backscatter Data\nIn this notebook, we will introduce some of the steps involved in the processing of Sentinel-1 Level1 Ground Range Detected (GRD) data to \\(\\sigma^0\\) (sig0) and \\(\\gamma^0\\) (gmr). Moreover, the notebook illustrates the importance and impact of geometric and radiometric terrain correction. As the processing of SAR data is a very time and hardware-intense task, we won’t perform the actual processing in this notebook. Instead, data at different processing steps is illustrated to highlight the impact of the processing steps.\nWe first load our data from the following intake catalog. Intake is somewhat similar to STAC in that it makes it easy to discover and load data. More importantly, this package allows us to hide some of the complexities involved with getting the data in the right format, which are not of concern in this notebook.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\ngtc_dc = cat[\"gtc\"].read().compute()\ngtc_dc\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 116MB\nDimensions:      (band: 2, y: 3800, x: 3801)\nCoordinates:\n  * band         (band) &lt;U8 64B 'grd' 'sig0_gtc'\n  * y            (y) float64 30kB 47.5 47.5 47.5 47.5 ... 47.0 47.0 47.0 47.0\n  * x            (x) float64 30kB 9.5 9.5 9.5 9.5 9.501 ... 10.0 10.0 10.0 10.0\n    spatial_ref  int64 8B 0\nData variables:\n    band_data    (band, y, x) float32 116MB 151.0 119.0 119.0 ... nan nan nanxarray.DatasetDimensions:band: 2y: 3800x: 3801Coordinates: (4)band(band)&lt;U8'grd' 'sig0_gtc'array(['grd', 'sig0_gtc'], dtype='&lt;U8')y(y)float6447.5 47.5 47.5 ... 47.0 47.0 47.0array([47.499874, 47.499742, 47.499611, ..., 47.000355, 47.000224, 47.000092],\n      shape=(3800,))x(x)float649.5 9.5 9.5 9.5 ... 10.0 10.0 10.0array([9.500026, 9.500158, 9.500289, ..., 9.999676, 9.999808, 9.99994 ],\n      shape=(3801,))spatial_ref()int640GeoTransform :9.499960609331326 0.000131556088961555 0.0 47.499939478018426 0.0 -0.00013155608896155463crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]geographic_crs_name :WGS 84grid_mapping_name :latitude_longitudehorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]array(0)Data variables: (1)band_data(band, y, x)float32151.0 119.0 119.0 ... nan nan nanarray([[[151.      , 119.      , 119.      , ...,  88.      ,\n          82.      ,  78.      ],\n        [113.      , 121.      , 110.      , ..., 129.      ,\n         127.      , 105.      ],\n        [ 98.      ,  96.      , 115.      , ..., 119.      ,\n         119.      , 109.      ],\n        ...,\n        [  0.      ,   0.      ,   0.      , ...,        nan,\n                nan,        nan],\n        [  0.      ,   0.      ,   0.      , ...,        nan,\n                nan,        nan],\n        [  0.      ,   0.      ,   0.      , ...,        nan,\n                nan,        nan]],\n\n       [[-12.86    , -12.21    , -11.66    , ...,  -8.639999,\n          -8.849999,  -9.15    ],\n        [-14.21    , -13.61    , -14.2     , ...,  -9.059999,\n         -12.2     , -13.66    ],\n        [-11.42    , -12.19    , -13.65    , ..., -13.44    ,\n         -13.549999, -12.57    ],\n        ...,\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan]]], shape=(2, 3800, 3801), dtype=float32)\ngtc_dc.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    robust=True,\n    data_aspect=1,\n    cmap=\"Greys_r\",\n    groupby=\"band\",\n    rasterize=True,\n).opts(frame_height=600, framewise=False, aspect=\"equal\")\nFigure 2: The ground range detected values and geometrically terrain corrected values can be selected on the right-hand side of the graphic.\nThe geometrically terrain corrected values from the gtc_dc object (Figure 1) can be approximated to a certain extent, as we have sufficiently detailed information of topography in this area. This corrects for at least one typically occurring distortion in mountainous regions: “foreshortening”.\nFigure 3: Side Looking radar distortions (script Chapter 4).\nForeshortening can be spotted by eye, as it often has a radiometric consequence, where unusually bright areas fringe mountain ridges; a phenomenon called “highlighting”. This geometric artifact occurs due to the compression of the distance in the image of slopes facing the radar system and the consequentially higher density of scatterers per unit length. Now let’s zoom in on an example from the same datacube and display the original and corrected values side-by-side.\nfor_dc = gtc_dc.sel(x=slice(9.651, 9.706), y=slice(47.134, 47.079)).band_data\n\nfig, ax = plt.subplots(1, 2, figsize=(20, 8))\n\nbbox = {\"boxstyle\": \"round\", \"fc\": \"0.8\"}\narrowprops = {\"facecolor\": \"red\", \"shrink\": 0.05}\n\nax[1].annotate(\n    \"foreshortening/layover\",\n    xy=(9.674, 47.092),\n    xytext=(0.574, 0.192),\n    textcoords=\"subfigure fraction\",\n    bbox=bbox,\n    arrowprops=arrowprops,\n)\nax[1].annotate(\n    \"radar shadows\",\n    xy=(9.68, 47.119),\n    xytext=(0.6, 0.625),\n    textcoords=\"subfigure fraction\",\n    bbox=bbox,\n    arrowprops=arrowprops,\n)\n\nax[0].axes.set_aspect(\"equal\")\nax[1].axes.set_aspect(\"equal\")\n\nfor_dc.sel(band=\"grd\").plot(ax=ax[0], robust=True, cmap=\"Greys_r\")\nfor_dc.sel(band=\"sig0_gtc\").plot(ax=ax[1], robust=True, cmap=\"Greys_r\")\nFigure 4: Close-up inspection of geometric distortions in side-looking radar\nAs we can see, not all the geometric distortions can be corrected by the algorithm. Some of the pixels at the mountain ranges appear stretched, as in these areas not enough valid measurements are available. Moreover, we can see dark areas which are indicating radar shadows. These are image areas that could not be captured by the radar sensor and have values close to the noise floor of the Sensor (minimum detectable signal strength) ~ -28dB. It is important to note, that radar shadows are not the same for every image, as they depend on the acquisition geometry, in particular, the incidence angle and the flight direction of the satellite.",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Backscattering Coefficients</span>"
    ]
  },
  {
    "objectID": "unit_01/03_in_class_exercise.html#backscattering-coefficients",
    "href": "unit_01/03_in_class_exercise.html#backscattering-coefficients",
    "title": "1  Backscattering Coefficients",
    "section": "1.2 Backscattering Coefficients",
    "text": "1.2 Backscattering Coefficients\nIn this chapter, we will look at some of the different backscatter coefficients in more detail (\\(\\sigma^0_E\\) or \\(\\gamma^0_E\\)), where both coefficients are geometrically terrain corrected. The difference is the plane of the reference area, which is the ground area as a tangent on an ellipsoidal Earth model for \\(\\sigma^0_E\\) and perpendicular to the line of sight for \\(\\gamma^0_E\\) (Figure 5). For this, we load a new datacube which includes \\(\\sigma^0_E\\) and the Incidence Angle for each pixel. We visualize the cube with the same method as before.\n\ncoef_dc = cat.coef.read().compute()\ncoef_dc.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    robust=True,\n    data_aspect=1,\n    cmap=\"Greys_r\",\n    groupby=\"band\",\n    rasterize=True,\n).opts(frame_height=600, framewise=False, aspect=\"equal\")\n\n\n\n\n\n  \n\n\n\n\nFigure 5: The \\(\\sigma^0_E\\) and the incidence angle can be selected on the right-hand side of the graphic.\nIn Figure 5 we can see the incidence angle image of our scene. We can see, that it depicts the differences between near to far range, but not the actual terrain as it refers to the ellipsoid. The slight patterns of the terrain that are visible are originating from the geometric terrain correction. We will use this information now to convert our (\\(\\sigma^0_E\\) to \\(\\gamma^0_E\\)) with the following equation (equation 6.20 in the script):\n\\[ \\gamma^0_E = \\sigma^0_E / \\cos(\\theta_i) \\]\nWe can perform this transformation with basic numpy operations on the xarray datacube.\n\n# linear scale\nsig0_db = coef_dc.sel(band=\"sig0_gtc\") / 10\nsig0_lin = 10 ** (coef_dc.sel(band=\"sig0_gtc\") / 10)\n# conversion to gamma\ngam0_lin = sig0_lin / np.cos(np.radians(coef_dc.sel(band=\"incidence_angle\")))\n# dB scale\ngam0_db = 10 * np.log(gam0_lin)\n# add to existing cube\ncoef_dc = xr.concat(\n    [coef_dc.sel(band=\"sig0_gtc\"), gam0_db.expand_dims(band=[\"gam0_gtc\"])],\n    dim=\"band\",\n)\n\ncoef_dc.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    robust=False,\n    data_aspect=1,\n    cmap=\"Greys_r\",\n    groupby=\"band\",\n    rasterize=True,\n).opts(frame_height=600, framewise=False, aspect=\"equal\")\n\n\n\n\n\n  \n\n\n\n\nFigure 6: \\(\\sigma^0_E\\), and \\(\\gamma^0_E\\) can be selected on the right-hand side of the graphic.\nComparing \\(\\sigma^0_E\\) and \\(\\gamma^0_E\\) in the figure, we can see that both look identical except for the range. This is because the only difference between \\(\\sigma^0_E\\) and \\(\\gamma^0_E\\) is the change of the reference area. While \\(\\sigma^0_E\\) is defined to be ground range, \\(\\gamma^0_E\\) is defined to be in the plane perpendicular to the line of sight from the sensor. This way, \\(\\gamma^0_E\\) mitigates the impact of the incidence angle. However, \\(\\gamma^0_E\\) is still based on the ellipsoid and does not account for the impact of the terrain on the radiometry.",
    "crumbs": [
      "Unit 1",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Backscattering Coefficients</span>"
    ]
  },
  {
    "objectID": "unit_02/04_in_class_exercise.html",
    "href": "unit_02/04_in_class_exercise.html",
    "title": "2  Datacubes",
    "section": "",
    "text": "2.1 Loading Data\nIn this notebook we discuss how we can easily compare images of two or more different time slices, satellites or other earth observation products. We limit our selves to products on a regular grid with an associated coordinate reference system (CRS), known as a raster. This means that each cell of the raster contains an attribute value and location coordinates. The process of combining such rasters to form datacubes is called raster stacking. We can have datacubes in many forms, such as the spatiotemporal datacube:\n\\[Z = f(x,y,t) \\quad \\text{,}\\]\nor when dealing with electromagnetic spectrum, the spectral wavelengths may form an additional dimension of a cube:\n\\[Z = f(x,y,t, \\lambda ) \\quad \\text{.} \\]\nWe also have already encountered the case where \\(Z\\) consists of multiple variables, such as seen in the xarray dataset.\n\\[{Z_1,Z_2,...,Z_3} = f(x,y,t) \\]\nTo perform raster stacking, we generally follow a certain routine (see also Figure 1).\nTo get the same projection, resolution, and region we have to resample one (or more) products. The desired projection, resolution, and region can be adopted from one of the original rasters or it can be a completely new projection of the data.\nFigure 1: Stacking of arrays to form datacubes (source: https://eox.at).\nIn this notebook we will study two different SAR products. SAR data from the Advanced Land Observing Satellite (Alos-2), which is a Japanese platform with an L-band sensor from the Japan Aerospace Exploration Agency (JAXA), and C-band data from the Copernicus Sentinel-1 mission. It is our goal to compare C- with L-band, so we need to somehow stack these arrays.\nBefore loading the data into memory we will first look at the area covered by the Sentinel-1 dataset on a map. This way we can select a region of interest for our hypothetical study. We will extract and transform the bounds of the data to longitude and latitude.\nbbox = xr.open_mfdataset(\n    make_gitlab_urls(\"sentinel-1\"),\n    engine=\"rasterio\",\n    combine=\"nested\",\n    concat_dim=\"band\",\n).rio.transform_bounds(\"EPSG:4326\")\n\nbbox = box(*bbox)\n\narea_map = folium.Map(\n    max_bounds=True,\n    location=[bbox.centroid.y, bbox.centroid.x],\n    scrollWheelZoom=False,\n)\n\n# bounds of image\nfolium.GeoJson(mapping(bbox), name=\"Area of Interest\", color=\"red\").add_to(area_map)\n\n# minimum longitude, minimum latitude, maximum longitude, maximum latitude\narea_of_interest = box(10.3, 45.5, 10.6, 45.6)\n\nfolium.GeoJson(mapping(area_of_interest), name=\"Area of Interest\").add_to(area_map)\n\narea_map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\nFigure 2: Map of study area. Red rectangle is the area covered by the Sentinel-1 raster. Blue rectangle is the area of interest.\nOn the map we have drawn rectangles of the area covered by the images and of our selected study area. To prevent loading too much data we will now only load the data as defined by the blue rectangle on the folium map.\nThe Sentinel-1 data is now stored on disk as separate two-dimensional GeoTIFF files with a certain timestamp. The following s1_preprocess function allows to load all files in one go as a spatiotemporal datacube. Basically, the preprocessing function helps reading the timestamp from the file and adds this as a new dimension to the array. The latter allows a concatenation procedure where all files are joined along the new time dimension. In addition by providing area_of_interest.bounds to the parameter bbox we will only load the data of the previously defined area of interest.\ndef s1_preprocess(\n    x: xr.Dataset,\n    bbox: tuple[float, float, float, float],\n    scale: float,\n) -&gt; xr.Dataset:\n    \"\"\"Preprocess file.\n\n    Parameters\n    ----------\n    x : xarray.Dataset\n      Input raster\n    bbox: tuple\n      Minimum longitude minimum latitude maximum longitude maximum latitude\n    scale: float\n      Scaling factor\n\n    Returns\n    -------\n    xarray.Dataset : Output stacked raster\n\n    \"\"\"\n    path = Path(urllib.parse.unquote_plus(x.encoding[\"source\"]))\n    filename = path.parent.name\n    x = x.rio.clip_box(*bbox, crs=\"EPSG:4326\")\n\n    date_str = filename.split(\"_\")[0][1:]\n    time_str = filename.split(\"_\")[1][:6]\n    datetime_str = date_str + time_str\n    date = pd.to_datetime(datetime_str, format=\"%Y%m%d%H%M%S\")\n    x = x.expand_dims(dim={\"time\": [date]})\n\n    x = (\n        x.rename({\"band_data\": \"s1_\" + path.parent.parent.stem})\n        .squeeze(\"band\")\n        .drop_vars(\"band\")\n    )\n\n    return x * scale\nWe load the data again with open_mfdataset and by providing the preprocess function, including the bounds of the area of interest and the scaling factor, as follows:\npartial_ = partial(s1_preprocess, bbox=area_of_interest.bounds, scale=0.01)\n\ns1_ds = xr.open_mfdataset(\n    make_gitlab_urls(\"sentinel-1\"),\n    engine=\"rasterio\",\n    combine=\"nested\",\n    chunks=-1,\n    preprocess=partial_,\n    compat=\"no_conflicts\",\n    join=\"outer\",\n)",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/04_in_class_exercise.html#unlocking-geospatial-information",
    "href": "unit_02/04_in_class_exercise.html#unlocking-geospatial-information",
    "title": "2  Datacubes",
    "section": "2.2 Unlocking Geospatial Information",
    "text": "2.2 Unlocking Geospatial Information\nTo enable further stacking of ALOS-2 and Sentinel-1 data we need to know some more information about the raster. Hence we define the following function print_raster to get the projection (CRS), resolution, and region (bounds). The function leverages the functionality of rioxarray; a package for rasters.\n\ndef print_raster(raster: xr.Dataset | xr.DataArray, name: str) -&gt; None:\n    \"\"\"Print Raster Metadata.\n\n    Parameters\n    ----------\n    raster: xarray.DataArray|xarray.DataSet\n        raster to process\n    name: string\n        name of product\n\n    \"\"\"\n    print(\n        f\"{name} Raster: \\n----------------\\n\"\n        f\"resolution: {raster.rio.resolution()} {raster.rio.crs.units_factor}\\n\"\n        f\"bounds: {raster.rio.bounds()}\\n\"\n        f\"CRS: {raster.rio.crs}\\n\",\n    )\n\n\nprint_raster(s1_ds, \"Sentinel-1\")\n\nSentinel-1 Raster: \n----------------\nresolution: (10.0, -10.0) ('metre', 1.0)\nbounds: (4769370.0, 1382090.0, 4794450.0, 1397370.0)\nCRS: EPSG:27704\n\n\n\nThe CRS “EPSG 27704” is part of the EQUI7Grid. This grid provides equal-area tiles, meaning each tile represents the same area, which helps reducing distorsions. This feature is important for remote sensing as it reduces the so-called oversampling due to geometric distortions when projecting on a sphere. This particular projection is developed by TUWien.\nNow we will proceed with loading the ALOS-2 L-band data in much the same fashion as for Sentinel-1. Again timeslices are stored separately as individual GeoTIFFS and they need to be concatenated along the time dimension. We use a slightly different preprocessing function alos_preprocess for this purpose. The most notable difference of this function is the inclusion of a scaling factor for the 16-bit digital numbers (DN):\n\\[\\gamma^0_T = 10 * log_{10}(\\text{DN}^2) - 83.0 \\,dB\\]\nto correctly convert the integers to \\(\\gamma^0_T\\) in the dB range.\n\ndef alos_preprocess(\n    x: xr.Dataset,\n    bbox: tuple[float, float, float, float],\n) -&gt; xr.Dataset:\n    \"\"\"Preprocess file.\n\n    Parameters\n    ----------\n    x : xarray.Dataset\n      Input raster\n    bbox: tuple\n      minimum longitude minimum latitude maximum longitude maximum latitude\n\n    Returns\n    -------\n    xarray.Dataset : Output stacked raster\n\n    \"\"\"\n    path = Path(urllib.parse.unquote_plus(x.encoding[\"source\"]))\n    filename = path.parent.name\n    x = x.rio.clip_box(*bbox, crs=\"EPSG:4326\")\n\n    date_str = filename.split(\"_\")[0][15:22]\n    date = pd.to_datetime(date_str, format=\"%y%m%d\")\n    x = x.expand_dims(dim={\"time\": [date]})\n\n    x = (\n        x.rename({\"band_data\": \"alos_\" + path.parent.parent.stem})\n        .squeeze(\"band\")\n        .drop_vars(\"band\")\n    )\n\n    # conversion to dB scale of alos\n    return 10 * np.log10(x**2) - 83.0\n\nNow we load the data with the open_mfdataset function of xarray and we provide the preprocessing function (see above), which includes the selection of the bounds of an area of interest and the extraction of time stamps from the file name.\n\narea_of_interest = affinity.scale(area_of_interest, xfact=1.7, yfact=1.7)\npartial_ = partial(alos_preprocess, bbox=area_of_interest.bounds)\n\nalos_ds = xr.open_mfdataset(\n    make_gitlab_urls(\"alos-2\"),\n    engine=\"rasterio\",\n    combine=\"nested\",\n    chunks=-1,\n    preprocess=partial_,\n    compat=\"no_conflicts\",\n    join=\"outer\",\n)\n\nAlso, for this dataset we will look at the metadata in order to compare it with Sentinel-1.\n\nprint_raster(alos_ds, \"ALOS-2\")\n\nALOS-2 Raster: \n----------------\nresolution: (25.0, -25.0) ('metre', 1.0)\nbounds: (593137.5, 5035287.5, 633312.5, 5054912.5)\nCRS: EPSG:32632",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/04_in_class_exercise.html#reprojecting",
    "href": "unit_02/04_in_class_exercise.html#reprojecting",
    "title": "2  Datacubes",
    "section": "2.3 Reprojecting",
    "text": "2.3 Reprojecting\nThe ALOS-2 is projected on an UTM grid. We would therefore like to reproject this data to match the projection of Sentinel-1. Furthermore, we will upsample the data to match the Sentinel-1 sampling. The rioxarray package has a very convenient method that can do this all in one go:reproject_match. For continuous data it is best to use a bilinear resampling strategy. As always you have to consider again that we deal with values in the dB range, so we need to convert to the linear scale before bilinear resampling.\n\nalos_ds_lin = 10 ** (alos_ds / 10)\nalos_ds_lin = alos_ds_lin.rio.reproject_match(\n    s1_ds,\n    resampling=Resampling.bilinear,\n)\nalos_ds = 10 * np.log10(alos_ds_lin)\n\nWe will overwrite the coordinate values of ALOS-2 with those of Sentinel-1. If we would not do this last step, small errors in how the numbers are stored would prevent stacking of the rasters.\n\nalos_ds = alos_ds.assign_coords(\n    {\n        \"x\": s1_ds.x.data,\n        \"y\": s1_ds.y.data,\n    },\n)\n\nLastly, we will turn the xarray.DataSet to an xarray.DataArray where a new dimension will constitute the sensor for measurement (satellite + polarization).\n\ns1_da = s1_ds.to_array(dim=\"sensor\")\nalos_da = alos_ds.to_array(dim=\"sensor\")\ns1_da\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (sensor: 2, time: 9, y: 1528, x: 2508)&gt; Size: 276MB\ndask.array&lt;stack, shape=(2, 9, 1528, 2508), dtype=float32, chunksize=(1, 1, 1528, 2508), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * sensor       (sensor) object 16B 's1_VH' 's1_VV'\n  * time         (time) datetime64[ns] 72B 2022-06-25T05:27:26 ... 2022-10-11...\n  * y            (y) float64 12kB 1.397e+06 1.397e+06 ... 1.382e+06 1.382e+06\n  * x            (x) float64 20kB 4.769e+06 4.769e+06 ... 4.794e+06 4.794e+06\n    spatial_ref  int64 8B 0xarray.DataArraysensor: 2time: 9y: 1528x: 2508dask.array&lt;chunksize=(1, 1, 1528, 2508), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n263.14 MiB\n14.62 MiB\n\n\nShape\n(2, 9, 1528, 2508)\n(1, 1, 1528, 2508)\n\n\nDask graph\n18 chunks in 223 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n          2 1                                          2508 1528 9\n\n\n\n\nCoordinates: (5)sensor(sensor)object's1_VH' 's1_VV'array(['s1_VH', 's1_VV'], dtype=object)time(time)datetime64[ns]2022-06-25T05:27:26 ... 2022-10-...array(['2022-06-25T05:27:26.000000000', '2022-07-07T05:27:27.000000000',\n       '2022-07-19T05:27:28.000000000', '2022-07-31T05:27:29.000000000',\n       '2022-08-12T05:27:29.000000000', '2022-09-05T05:27:31.000000000',\n       '2022-09-17T05:27:31.000000000', '2022-09-29T05:27:31.000000000',\n       '2022-10-11T05:27:31.000000000'], dtype='datetime64[ns]')y(y)float641.397e+06 1.397e+06 ... 1.382e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([1397365., 1397355., 1397345., ..., 1382115., 1382105., 1382095.],\n      shape=(1528,))x(x)float644.769e+06 4.769e+06 ... 4.794e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([4769375., 4769385., 4769395., ..., 4794425., 4794435., 4794445.],\n      shape=(2508,))spatial_ref()int640crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :Azimuthal_Equidistantgrid_mapping_name :azimuthal_equidistantlatitude_of_projection_origin :53.0longitude_of_projection_origin :24.0false_easting :5837287.81977false_northing :2121415.69617spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :4769370.0 10.0 0.0 1397370.0 0.0 -10.0array(0)",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/04_in_class_exercise.html#stacking-of-multiple-arrays",
    "href": "unit_02/04_in_class_exercise.html#stacking-of-multiple-arrays",
    "title": "2  Datacubes",
    "section": "2.4 Stacking of Multiple Arrays",
    "text": "2.4 Stacking of Multiple Arrays\nNow we are finally ready to stack Sentinel-1 C-band and ALOS-2 L-band arrays with the function concat of xarray. Now we can use the newly defined \"sensor\" dimension to concatenate the two arrays.\n\nfused_da = xr.concat([s1_da, alos_da], dim=\"sensor\").rename(\"gam0\")\nfused_da\n\n/tmp/ipykernel_2760/1606272018.py:1: FutureWarning: In a future version of xarray the default value for join will change from join='outer' to join='exact'. This change will result in the following ValueError: cannot be aligned with join='exact' because index/labels/sizes are not equal along these coordinates (dimensions): 'time' ('time',) The recommendation is to set join explicitly for this case.\n  fused_da = xr.concat([s1_da, alos_da], dim=\"sensor\").rename(\"gam0\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'gam0' (sensor: 4, time: 14, y: 1528, x: 2508)&gt; Size: 858MB\ndask.array&lt;concatenate, shape=(4, 14, 1528, 2508), dtype=float32, chunksize=(2, 1, 1094, 1094), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * sensor       (sensor) object 32B 's1_VH' 's1_VV' 'alos_HH' 'alos_HV'\n  * time         (time) datetime64[ns] 112B 2022-06-25 ... 2022-10-15\n  * y            (y) float64 12kB 1.397e+06 1.397e+06 ... 1.382e+06 1.382e+06\n  * x            (x) float64 20kB 4.769e+06 4.769e+06 ... 4.794e+06 4.794e+06\n    spatial_ref  int64 8B 0xarray.DataArray'gam0'sensor: 4time: 14y: 1528x: 2508dask.array&lt;chunksize=(1, 1, 1094, 1094), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n818.65 MiB\n9.13 MiB\n\n\nShape\n(4, 14, 1528, 2508)\n(2, 1, 1094, 1094)\n\n\nDask graph\n252 chunks in 241 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n           4 1                                                          2508 1528 14\n\n\n\n\nCoordinates: (5)sensor(sensor)object's1_VH' 's1_VV' 'alos_HH' 'alos_HV'array(['s1_VH', 's1_VV', 'alos_HH', 'alos_HV'], dtype=object)time(time)datetime64[ns]2022-06-25 ... 2022-10-15array(['2022-06-25T00:00:00.000000000', '2022-06-25T05:27:26.000000000',\n       '2022-07-07T05:27:27.000000000', '2022-07-19T05:27:28.000000000',\n       '2022-07-31T05:27:29.000000000', '2022-08-12T05:27:29.000000000',\n       '2022-08-20T00:00:00.000000000', '2022-09-05T05:27:31.000000000',\n       '2022-09-17T00:00:00.000000000', '2022-09-17T05:27:31.000000000',\n       '2022-09-29T05:27:31.000000000', '2022-10-01T00:00:00.000000000',\n       '2022-10-11T05:27:31.000000000', '2022-10-15T00:00:00.000000000'],\n      dtype='datetime64[ns]')y(y)float641.397e+06 1.397e+06 ... 1.382e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([1397365., 1397355., 1397345., ..., 1382115., 1382105., 1382095.],\n      shape=(1528,))x(x)float644.769e+06 4.769e+06 ... 4.794e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([4769375., 4769385., 4769395., ..., 4794425., 4794435., 4794445.],\n      shape=(2508,))spatial_ref()int640crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :Azimuthal_Equidistantgrid_mapping_name :azimuthal_equidistantlatitude_of_projection_origin :53.0longitude_of_projection_origin :24.0false_easting :5837287.81977false_northing :2121415.69617spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :4769370.0 10.0 0.0 1397370.0 0.0 -10.0array(0)\n\n\nThe measurements for both satellites don’t occur at the same time. Hence the cube is now padded with 2-D arrays entirely filled with NaN (Not A Number) for some time slices. As we have learned in notebook 2 we can use the resample method to make temporally coherent timeslices for each month. To deal with the dB scale backscatter values as well as the low number of observations per month we use a median of the samples. As taking the median only sorts the samples according to the sample quantiles we do not have to convert the observations to the linear scale.\n\nfused_da = fused_da.resample(time=\"ME\", skipna=True).median().compute()\n\nWe can plot each of the variables: “ALOS-2” and “Sentinel-1” to check our results.\n\nfused_da.hvplot.image(robust=True, data_aspect=1, cmap=\"Greys_r\", rasterize=True).opts(\n    frame_height=600,\n    aspect=\"equal\",\n)\n\n\n\n\n\n  \n\n\n\n\nFigure 3: Stacked array with ALOS-2 L-band and Sentinel-1 C-band \\(\\gamma^0_T (dB)\\).",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/05_in_class_exercise.html",
    "href": "unit_02/05_in_class_exercise.html",
    "title": "3  Wavelength and Polarization",
    "section": "",
    "text": "3.1 Data Loading\nIn this notebook, we aim to demonstrate how C-band (4–8 GHz, wavelengths of approximately 3.75–7.5 cm) and L-band (1–2 GHz, wavelengths of approximately 15–30 cm) radio frequencies differ for different land covers and times of the year. In addition, we’ll look at co- and cross-polarized backscattering:\nWe load the data again with the help of intake.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nfused_ds = cat.fused.read()\nfused_ds\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 460MB\nDimensions:      (time: 5, y: 1528, x: 2508, sensor: 4)\nCoordinates:\n  * time         (time) datetime64[ns] 40B 2022-06-30 2022-07-31 ... 2022-10-31\n  * y            (y) float64 12kB 1.397e+06 1.397e+06 ... 1.382e+06 1.382e+06\n  * x            (x) float64 20kB 4.769e+06 4.769e+06 ... 4.794e+06 4.794e+06\n  * sensor       (sensor) object 32B 's1_VH' 's1_VV' 'alos_HH' 'alos_HV'\n    crs          int64 8B ...\n    spatial_ref  int64 8B ...\nData variables:\n    LAI          (time, y, x) float64 153MB dask.array&lt;chunksize=(1, 1528, 2508), meta=np.ndarray&gt;\n    gam0         (time, sensor, y, x) float32 307MB dask.array&lt;chunksize=(1, 4, 1528, 2508), meta=np.ndarray&gt;xarray.DatasetDimensions:time: 5y: 1528x: 2508sensor: 4Coordinates: (6)time(time)datetime64[ns]2022-06-30 ... 2022-10-31array(['2022-06-30T00:00:00.000000000', '2022-07-31T00:00:00.000000000',\n       '2022-08-31T00:00:00.000000000', '2022-09-30T00:00:00.000000000',\n       '2022-10-31T00:00:00.000000000'], dtype='datetime64[ns]')y(y)float641.397e+06 1.397e+06 ... 1.382e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([1397365., 1397355., 1397345., ..., 1382115., 1382105., 1382095.],\n      shape=(1528,))x(x)float644.769e+06 4.769e+06 ... 4.794e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([4769375., 4769385., 4769395., ..., 4794425., 4794435., 4794445.],\n      shape=(2508,))sensor(sensor)object's1_VH' 's1_VV' 'alos_HH' 'alos_HV'array(['s1_VH', 's1_VV', 'alos_HH', 'alos_HV'], dtype=object)crs()int64...GeoTransform :4769370.0 10.0 0.0 1397370.0 0.0 -10.0crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]false_easting :5837287.81977false_northing :2121415.69617geographic_crs_name :WGS 84grid_mapping_name :azimuthal_equidistanthorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563latitude_of_projection_origin :53.0longitude_of_prime_meridian :0.0longitude_of_projection_origin :24.0prime_meridian_name :Greenwichprojected_crs_name :Azimuthal_Equidistantreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]][1 values with dtype=int64]spatial_ref()int64...GeoTransform :4769370.0 10.0 0.0 1397370.0 0.0 -10.0crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]false_easting :5837287.81977false_northing :2121415.69617geographic_crs_name :WGS 84grid_mapping_name :azimuthal_equidistanthorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563latitude_of_projection_origin :53.0longitude_of_prime_meridian :0.0longitude_of_projection_origin :24.0prime_meridian_name :Greenwichprojected_crs_name :Azimuthal_Equidistantreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]][1 values with dtype=int64]Data variables: (2)LAI(time, y, x)float64dask.array&lt;chunksize=(1, 1528, 2508), meta=np.ndarray&gt;long_name :Leaf Area Index 333mstandard_name :leaf_area_indexunits :m^2/m^2valid_range :[0, 210]\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n146.19 MiB\n29.24 MiB\n\n\nShape\n(5, 1528, 2508)\n(1, 1528, 2508)\n\n\nDask graph\n5 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n                                 2508 1528 5\n\n\n\n\ngam0(time, sensor, y, x)float32dask.array&lt;chunksize=(1, 4, 1528, 2508), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n292.38 MiB\n58.48 MiB\n\n\nShape\n(5, 4, 1528, 2508)\n(1, 4, 1528, 2508)\n\n\nDask graph\n5 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n             5 1                          2508 1528 4\nThe loaded data contains the Leaf Area Index (LAI), which is used as an estimate of foliage cover of forest canopies. So high LAI is interpreted as forested area, whereas low values account for less vegetated areas (shrubs, grass-land, and crops).\nFirst we’ll have a look at the mean and standard deviation of LAI over all timeslices. This can be achieved by using the mean and std methods of the xarray object and by supplying a dimension over which these aggregating operations will be applied. We use the dimension “time”, thereby flattening the cube to a 2-D array with dimensions x and y.\nfig, ax = plt.subplots(1, 2, figsize=(15, 6))\n\nLAI_dc = fused_ds.LAI\nLAI_mean = LAI_dc.mean(\"time\")\nLAI_std = LAI_dc.std(\"time\")\n\nLAI_mean.plot(ax=ax[0], vmin=0, vmax=6).axes.set_aspect(\"equal\")\nLAI_std.plot(ax=ax[1], vmin=0, vmax=3).axes.set_aspect(\"equal\")\nplt.tight_layout()\n\n/home/runner/work/microwave-remote-sensing/microwave-remote-sensing/.conda_envs/microwave-remote-sensing/lib/python3.13/site-packages/dask/array/numpy_compat.py:58: RuntimeWarning: invalid value encountered in divide\n  x = np.divide(x1, x2, out)\nFigure 1: Map of mean LAI (left) and the associated standard deviation (right) for each pixel over time around Lake Garda.\nIt appears that the northern parts of our study area contain more and variable amounts of green elements per unit area. This might indicate a more complete coverage of foliage and thus forest.",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Wavelength and Polarization</span>"
    ]
  },
  {
    "objectID": "unit_02/05_in_class_exercise.html#timeseries",
    "href": "unit_02/05_in_class_exercise.html#timeseries",
    "title": "3  Wavelength and Polarization",
    "section": "3.2 Timeseries",
    "text": "3.2 Timeseries\nNow that we have detected possible forested areas, let’s delve a bit deeper into the data. Remember that we deal with a spatiotemporal datacube. This gives us the possibility to study changes for each time increment. Hence we can show what happens to LAI for areas marked with generally low values as well as high values. We can achieve this by filtering the datacube with the where method for areas marked with low and high mean LAI values. In turn we will aggregate the remaining datacube over the spatial dimensions (“x” and “y”) to get a mean values for each time increment.\n\nfig, ax = plt.subplots(1, 2, figsize=(15, 4))\n\nthreshold = 4\nLAI_low = LAI_dc.where(LAI_mean &lt; threshold)\nLAI_high = LAI_dc.where(LAI_mean &gt; threshold)\n\nLAI_low.mean([\"x\", \"y\"]).plot.scatter(x=\"time\", ax=ax[0], ylim=(0, 6))\nLAI_high.mean([\"x\", \"y\"]).plot.scatter(x=\"time\", ax=ax[1], ylim=(0, 6))\nax[0].set_title(\"Low Mean LAI ($\\\\bar{LAI} &lt; {threshold}$)\")\nax[1].set_title(\"High Mean LAI ($\\\\bar{LAI} &gt; {threshold}$)\")\nplt.tight_layout()\n\n\n\n\n\n\n\n\nFigure 2: Timeseries of mean LAI per timeslice for areas with low (left) and high (right) mean LAI of Figure1.\nNow we can see that areas with high mean LAI values (Figure 1) show a drop-off to values as low as those for areas with low mean LAI during the autumn months (Figure 2 ; right panel). Hence we might deduce that we deal with deciduous forest that becomes less green during autumn, as can be expected for the study area.\nRemember that longer wavelengths like L-bands are more likely to penetrate through a forest canopy and would interact more readily with larger object like tree trunks and the forest floor. In turn, C-band microwaves are more likely to interact with sparse and shrub vegetation. The polarization of the emitted and received microwaves is on the other hand dependent on the type of backscattering with co-polarization (HH and VV) happening more frequently with direct backscatter or double bounce scattering. Whereas volume scattering occurs when the radar signal is subject to multiple reflections within 3-dimensional matter, as the orientation of the main scatterers is random, the polarization of the backscattered signal is also random. Volume scattering can therefore cause an increase of cross-polarized intensity.\nLet’s put this to the test by checking the microwave backscatter signatures over forested and sparsely vegetated areas as well as water bodies (Lake Garda). Let’s first look at the different sensor readings for the beginning of summer and autumn.\n\nhv.output(widget_location=\"bottom\")\n\nt1 = (\n    fused_ds.gam0.isel(time=2)\n    .hvplot.image(\n        robust=True,\n        data_aspect=1,\n        cmap=\"Greys_r\",\n        rasterize=True,\n        clim=(-25, 0),\n    )\n    .opts(frame_height=400, aspect=\"equal\")\n)\n\nt2 = (\n    fused_ds.gam0.isel(time=-1)\n    .hvplot.image(\n        robust=True,\n        data_aspect=1,\n        cmap=\"Greys_r\",\n        rasterize=True,\n        clim=(-25, 0),\n    )\n    .opts(frame_height=400, aspect=\"equal\")\n)\n\nt1 + t2\n\n\n\n\n\n  \n\n\n\n\nFigure 3: Maps of Sentinel-1 and Alos-2 \\(\\gamma^0_T \\,[dB]\\) for the beginning of summer (left) and autumn (right).\nThe most notable difference is the lower energy received for cross-polarized than for co-polarized microwaves for both Sentinel-1 and Alos-2. The latter differences are independent of the time of year. However, one can also note small changes in the received energy for the same satellite dependent on the time of year. To get a better feel for these changes over time we generate the following interactive plot. On the following plot one can select areas of a certain mean LAI (by clicking on the map) and see the associated timeseries of \\(\\gamma^0_T\\) for each of the sensors.\n\nLAI_image = LAI_mean.hvplot.image(rasterize=True, cmap=\"viridis\", clim=(0, 6)).opts(\n    title=\"Mean LAI (Selectable)\",\n    frame_height=400,\n    aspect=\"equal\",\n)\n\n\ndef get_timeseries(x: float, y: float) -&gt; hv.Scatter:\n    \"\"\"Plot LAI timeseries.\n\n    Parameters\n    ----------\n    x: float\n        numeric value for x selected on LAI map\n    y: float\n        numeric value for y selected on LAI map\n\n    Returns\n    -------\n    hvplot.Scatter : LAI timeseries plot\n\n    \"\"\"\n    lai_value = LAI_mean.sel(x=x, y=y, method=\"nearest\").values\n\n    if np.isnan(lai_value):\n        select = fused_ds.where(LAI_mean.isnull())\n        label = \"Water\"\n    else:\n        mask = np.isclose(LAI_mean, lai_value, atol=0.05)\n        select = fused_ds.where(mask)\n        label = \"Mean LAI: \" + str(np.round(lai_value, 1))\n\n    return (\n        select.gam0.to_dataset(\"sensor\")\n        .median([\"x\", \"y\"], skipna=True)\n        .hvplot.scatter(ylim=(-30, 5))\n        .opts(title=label, frame_height=400)\n    )\n\n\npoint_stream = hv.streams.SingleTap(source=LAI_image)\ntime_series = hv.DynamicMap(get_timeseries, streams=[point_stream])\nLAI_image + time_series\n\nWARNING:param.RasterPlot01207: Due to internal constraints, when aspect and width/height is set, the bokeh backend uses those values as frame_width/frame_height instead. This ensures the aspect is respected, but means that the plot might be slightly larger than anticipated. Set the frame_width/frame_height explicitly to suppress this warning.\n\n\n\n\n\n\n  \n\n\n\n\nFigure 4: Map of MEAN LAI around Lake Garda. The pixel values can be seen by hovering your mouse over the pixels. Clicking on the pixel will generate the timeseries for the associated mean LAI on the right hand-side. (Right) Timeseries of for Sentinel-1 and Alos-2 \\(\\gamma^0_T [dB]\\).\nCan you see some patterns when analyzing the different wavelengths and polarizations?\nRemember again that we deal with a logarithmic scale. A measurement of 10 dB is 10 times brighter than the intensity measured at 0 dB, and 100 times brighter at 20 dB. The most notable difference is that the offset between cross- and co-polarised signals becomes larger at low LAI and lower at higher LAI. This might indicate the effect of volume scattering in forested areas where co- and cross-polarization render backscattering values more equal. You will study the differences among cross- and co-polarized backscattering in more detail in the homework exercise.",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Wavelength and Polarization</span>"
    ]
  },
  {
    "objectID": "unit_02/06_in_class_exercise.html",
    "href": "unit_02/06_in_class_exercise.html",
    "title": "4  Dielectric Properties",
    "section": "",
    "text": "4.1 Load Sentinel-1 Data\nIn this notebook, we will investigate the varying backscatter values associated with different land surfaces like water bodies, forests, grasslands and urban areas. We will use backscatter data from the Sentinel-1 satellite and we will utilize the CORINE Land Cover dataset to classify and extrapolate these surfaces, enabling us to analyze how different land cover types influence backscatter responses.\nFor our analysis we are using sigma naught backscatering data from Sentinel-1. The images we are analyzing cover the region south of Vienna and west of Lake Neusiedl. We load the data and and apply again a preprocessing function. Here we extract the scaling factor and the date the image was taken from the metadata. We will focus our attention to a smaller area containing a part of the Lake Neusiedl Lake and its surrounding land. The obtainedxarray dataset and is then converted to an array, because we only have one variable, the VV backscatter values.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nsig0_da = cat.neusiedler.read().sig0.compute()\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/main/microwave-remote-sensing.yml\nLet’s have a look at the data by plotting the first timeslice.\nsig0_da.isel(time=0).plot(robust=True, cmap=\"Greys_r\").axes.set_aspect(\"equal\")",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Backscatter Variability</span>"
    ]
  },
  {
    "objectID": "unit_02/06_in_class_exercise.html#load-corine-landcover-data",
    "href": "unit_02/06_in_class_exercise.html#load-corine-landcover-data",
    "title": "4  Dielectric Properties",
    "section": "4.2 Load CORINE Landcover Data",
    "text": "4.2 Load CORINE Landcover Data\nWe will load the CORINE Land Cover, which is a pan-European land cover and land use inventory with 44 thematic classes. The resolution of this classification is 100 by 100m and the file was created in 2018 (CORINE Land Cover).\n\ncor_da = cat.corine.read().land_cover.compute()\n\n\n4.2.1 Colormapping and Encoding\nFor the different land cover types we use the official color encoding which can be found in CORINE Land Cover.\n\n# Load encoding and validate with Pydantic\nwith cat.corine_cmap.read()[0] as f:\n    corine_colors = CorineColorCollection.model_validate(json.load(f))\n\n# Create cmap and norm for plotting\ncolors = [info[\"color\"].as_hex() for info in corine_colors.items]\ncategories = [info[\"value\"] for info in corine_colors.items]\ncmap = ListedColormap(colors)\nnorm = BoundaryNorm([*categories, max(categories) + 1], len(categories))\n\nNow we can plot the CORINE Land Cover dataset.\n\npresent_landcover_codes = np.unique(cor_da.values[~np.isnan(cor_da.values)].astype(int))\n\n# Create the plot\nplot_corine_data(cor_da, cmap, norm, corine_colors, present_landcover_codes)\n\n\n\n\n\n\n\n\nNow we are ready to merge the backscatter data (sig0_da) with the land cover dataset (cor_da) to have one dataset combining all data.\n\nvar_ds = xr.merge([sig0_da, cor_da]).drop_vars(\"band\")\nvar_ds\n\n/tmp/ipykernel_3059/125755716.py:1: FutureWarning: In a future version of xarray the default value for compat will change from compat='no_conflicts' to compat='override'. This is likely to lead to different results when combining overlapping variables with the same name. To opt in to new defaults and get rid of these warnings now use `set_options(use_new_combine_kwarg_defaults=True) or set compat explicitly.\n  var_ds = xr.merge([sig0_da, cor_da]).drop_vars(\"band\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 108MB\nDimensions:      (time: 8, x: 1230, y: 1221)\nCoordinates:\n  * time         (time) datetime64[ns] 64B 2023-08-05T16:51:22 ... 2023-10-28...\n  * x            (x) float64 10kB 5.282e+06 5.282e+06 ... 5.294e+06 5.294e+06\n  * y            (y) float64 10kB 1.571e+06 1.571e+06 ... 1.559e+06 1.559e+06\n    spatial_ref  int64 8B 0\nData variables:\n    sig0         (time, y, x) float64 96MB -6.99 -7.32 -8.78 ... -14.32 -14.22\n    land_cover   (y, x) float64 12MB 12.0 12.0 12.0 12.0 ... 41.0 41.0 41.0 41.0xarray.DatasetDimensions:time: 8x: 1230y: 1221Coordinates: (4)time(time)datetime64[ns]2023-08-05T16:51:22 ... 2023-10-...array(['2023-08-05T16:51:22.000000000', '2023-08-17T16:51:22.000000000',\n       '2023-08-29T16:51:23.000000000', '2023-09-10T16:51:24.000000000',\n       '2023-09-22T16:51:24.000000000', '2023-10-04T16:51:24.000000000',\n       '2023-10-16T16:51:24.000000000', '2023-10-28T16:51:24.000000000'],\n      dtype='datetime64[ns]')x(x)float645.282e+06 5.282e+06 ... 5.294e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([5281995., 5282005., 5282015., ..., 5294265., 5294275., 5294285.],\n      shape=(1230,))y(y)float641.571e+06 1.571e+06 ... 1.559e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([1570955., 1570945., 1570935., ..., 1558775., 1558765., 1558755.],\n      shape=(1221,))spatial_ref()int640GeoTransform :5281990.0 10.0 0.0 1570960.0 0.0 -10.0crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]false_easting :5837287.81977false_northing :2121415.69617geographic_crs_name :WGS 84grid_mapping_name :azimuthal_equidistanthorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563latitude_of_projection_origin :53.0longitude_of_prime_meridian :0.0longitude_of_projection_origin :24.0prime_meridian_name :Greenwichprojected_crs_name :Azimuthal_Equidistantreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]array(0)Data variables: (2)sig0(time, y, x)float64-6.99 -7.32 -8.78 ... -14.32 -14.22array([[[ -6.99,  -7.32,  -8.78, ..., -26.06, -21.29, -18.64],\n        [ -6.37,  -8.79,  -8.78, ..., -26.2 , -21.8 , -21.18],\n        [ -6.96,  -8.36,  -9.  , ..., -26.2 , -24.44, -24.31],\n        ...,\n        [ -7.82,  -4.94,  -4.8 , ...,  -8.78,  -8.02,  -7.3 ],\n        [ -7.41,  -9.33,  -8.67, ..., -10.69,  -6.36,  -5.22],\n        [-11.11, -11.8 , -11.55, ..., -14.89,  -6.95,  -3.89]],\n\n       [[ -8.5 , -10.65, -12.07, ..., -22.27, -20.91, -21.92],\n        [ -9.  , -10.03, -10.82, ..., -16.46, -16.9 , -21.84],\n        [ -6.74,  -7.87,  -8.1 , ..., -17.41, -22.64, -23.01],\n        ...,\n        [ -8.74,  -7.44,  -6.69, ..., -10.85,  -8.39,  -7.08],\n        [ -9.39,  -9.55,  -8.9 , ..., -13.  , -11.03,  -9.15],\n        [-10.86, -10.84,  -9.7 , ..., -17.47, -14.58, -10.65]],\n\n       [[-10.39, -11.92, -11.74, ..., -19.02, -20.28, -17.92],\n        [ -8.65, -14.64, -12.34, ..., -21.77, -19.55, -16.67],\n        [ -8.11, -11.29, -10.25, ..., -23.16, -20.23, -16.73],\n        ...,\n...\n        [ -9.82,  -9.11,  -8.73, ...,  -9.79,  -7.33,  -6.92],\n        [-12.23, -11.64,  -9.59, ..., -12.29,  -7.65,  -8.14],\n        [-13.6 , -13.41, -11.73, ..., -19.82, -12.53, -11.83]],\n\n       [[-12.49, -12.55, -12.89, ..., -21.35, -23.29, -23.87],\n        [-12.15, -12.38, -14.03, ..., -18.07, -23.53, -23.23],\n        [-12.41, -12.52, -14.08, ..., -18.7 , -21.47, -22.17],\n        ...,\n        [ -6.87,  -5.98,  -5.32, ..., -18.47, -12.26, -11.2 ],\n        [-11.18,  -6.31,  -6.12, ..., -20.17, -12.56, -11.61],\n        [-11.98,  -9.02,  -8.46, ..., -13.06, -10.4 ,  -9.  ]],\n\n       [[ -6.41,  -6.59,  -7.16, ..., -22.25, -25.96, -25.45],\n        [ -6.75,  -9.42,  -9.54, ..., -20.65, -26.34, -23.53],\n        [ -8.24, -12.04, -10.46, ..., -20.65, -20.63, -21.05],\n        ...,\n        [ -6.64,  -5.06,  -4.89, ..., -13.67, -12.26,  -9.96],\n        [ -9.62,  -8.06, -10.02, ..., -16.11, -14.74, -10.64],\n        [-11.93, -11.41, -12.68, ..., -19.01, -14.32, -14.22]]],\n      shape=(8, 1221, 1230))land_cover(y, x)float6412.0 12.0 12.0 ... 41.0 41.0 41.0AREA_OR_POINT :AreaDataType :ThematicRepresentationType :THEMATICSTATISTICS_COVARIANCES :136.429646247598STATISTICS_MAXIMUM :48STATISTICS_MEAN :25.753373398066STATISTICS_MINIMUM :1STATISTICS_SKIPFACTORX :1STATISTICS_SKIPFACTORY :1STATISTICS_STDDEV :11.680310194836array([[12., 12., 12., ..., 41., 41., 41.],\n       [12., 12., 12., ..., 41., 41., 41.],\n       [12., 12., 12., ..., 41., 41., 41.],\n       ...,\n       [ 2.,  2.,  2., ..., 41., 41., 41.],\n       [ 2.,  2.,  2., ..., 41., 41., 41.],\n       [ 2.,  2.,  2., ..., 41., 41., 41.]], shape=(1221, 1230))",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Backscatter Variability</span>"
    ]
  },
  {
    "objectID": "unit_02/06_in_class_exercise.html#backscatter-variability",
    "href": "unit_02/06_in_class_exercise.html#backscatter-variability",
    "title": "4  Dielectric Properties",
    "section": "4.3 Backscatter Variability",
    "text": "4.3 Backscatter Variability\nWith this combined dataset we can study backscatter variability in relation to natural media. For example we can look at the backscatter variability for water by clipping the dataset to only contain the land cover class water, like so:\n\n# 41 = encoded value for water bodies\nencoded_value_for_waterbodies = 41\nwaterbodies_mask = var_ds.land_cover == encoded_value_for_waterbodies\nwaterbodies_mask.plot().axes.set_aspect(\"equal\")\n\n\n\n\n\n\n\n\nThis gives use backscatter values over water only.\n\nwaterbodies_sig0 = var_ds.sig0.isel(time=0).where(waterbodies_mask)\nwaterbodies_sig0.plot(robust=True, cmap=\"Greys_r\").axes.set_aspect(\"equal\")\n\n\n\n\n\n\n\n\nTo get an idea of the variability we can create a histogram. Radar backscatter from water bodies fluctuates with surface roughness, which changes with wind conditions, creating spatial and temporal variations in signal intensity.\n\nwaterbodies_sig0.plot.hist(bins=50, edgecolor=\"black\")\n\n(array([5.0000e+00, 5.0000e+00, 8.0000e+00, 1.4000e+01, 3.5000e+01,\n        7.8000e+01, 1.5600e+02, 3.0500e+02, 5.4000e+02, 1.0380e+03,\n        1.9550e+03, 3.6850e+03, 6.9910e+03, 1.2269e+04, 1.9088e+04,\n        2.6859e+04, 3.6217e+04, 4.5276e+04, 5.0939e+04, 4.9020e+04,\n        3.9729e+04, 2.5400e+04, 1.2426e+04, 5.4390e+03, 2.6990e+03,\n        2.0500e+03, 2.1330e+03, 2.6890e+03, 3.1490e+03, 3.9510e+03,\n        4.2970e+03, 4.1110e+03, 3.6350e+03, 2.5900e+03, 1.6020e+03,\n        7.5000e+02, 3.5200e+02, 1.2300e+02, 5.6000e+01, 3.7000e+01,\n        2.8000e+01, 2.1000e+01, 1.3000e+01, 9.0000e+00, 1.0000e+01,\n        8.0000e+00, 1.0000e+01, 5.0000e+00, 6.0000e+00, 4.0000e+00]),\n array([-37.91  , -36.9202, -35.9304, -34.9406, -33.9508, -32.961 ,\n        -31.9712, -30.9814, -29.9916, -29.0018, -28.012 , -27.0222,\n        -26.0324, -25.0426, -24.0528, -23.063 , -22.0732, -21.0834,\n        -20.0936, -19.1038, -18.114 , -17.1242, -16.1344, -15.1446,\n        -14.1548, -13.165 , -12.1752, -11.1854, -10.1956,  -9.2058,\n         -8.216 ,  -7.2262,  -6.2364,  -5.2466,  -4.2568,  -3.267 ,\n         -2.2772,  -1.2874,  -0.2976,   0.6922,   1.682 ,   2.6718,\n          3.6616,   4.6514,   5.6412,   6.631 ,   7.6208,   8.6106,\n          9.6004,  10.5902,  11.58  ]),\n &lt;BarContainer object of 50 artists&gt;)",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Backscatter Variability</span>"
    ]
  },
  {
    "objectID": "unit_02/06_in_class_exercise.html#variability-over-time",
    "href": "unit_02/06_in_class_exercise.html#variability-over-time",
    "title": "4  Dielectric Properties",
    "section": "4.4 Variability over Time",
    "text": "4.4 Variability over Time\nNext we will look at the changes in variability in backscatter values over time for each of the CORINE Land Cover types. We do this by creating the following interactive plot. We can spot that backscatter in agricultural fields varies due to seasonal cycles like planting, growing, and harvesting, each of which changes vegetation structure. Changes in backscatter are strongly related to soil moisture content from irrigation or rainfall. Ultimately, phenological stages of crops and canopy moisture dynamics can affect the backscatter signal.\n\nplot_variability_over_time(corine_colors.to_dict(), var_ds, present_landcover_codes)",
    "crumbs": [
      "Unit 2",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Backscatter Variability</span>"
    ]
  },
  {
    "objectID": "unit_03/07_in_class_exercise.html",
    "href": "unit_03/07_in_class_exercise.html",
    "title": "5  Speckle Statistics",
    "section": "",
    "text": "5.1 Lake Neusiedl data\nThis notebook will provide an empirical demonstration of speckle - how it originates, how it visually and statistically looks like, and some of the most common approaches to filter it.\nSpeckle is defined as a kind of noise that affects all radar images. Given the multiple scattering contributions originating from the various elementary objects present within a resolution cell, the resulting backscatter signal can be described as a random constructive and destructive interference of wavelets. As a consequence, speckle is the reason why a granular pattern normally affects SAR images, making it more challenging to interpret and analyze them.\nCredits: ESRI\nLet’s make an example of a cornfield (with a typical backscattering value of about -10 dB). According to the following equation:\n\\[\n\\sigma^0 = \\frac{1}{\\text{area}} \\sum_{n \\in \\text{area}} \\sigma_n\n\\]\nWe should ideally have a uniform discrete sigma naught \\(\\sigma^0\\) value, given that the cornfield pixel is the only individual contributor.\nHowever, since we already learned from the previous notebooks that a pixel’s ground size can be in the order of tens of meters (i.e., 10 meters for Sentinel-1), we can imagine that different distributed targets in the scene contribute to the global backscattered information.\nLet´s replicate this behavior with an ideal uniform area constituted by 100 pixels and then by adding 30% of speckle.\nFigure 1: Synthetic data that emulates speckles in microwave backscattering\nWe can imagine that the second plot represents a real SAR acquisition over a cornfield, while the first plot represents an ideal uniform SAR image over a cornfield land (no speckle). The introduction of a simulated 30% speckle noise could be related to the presence of distributed scatterers of any sort present in the scene, which would cause a pixel-to-pixel variation in terms of intensity.\nAll the random contributions (such as the wind) would result in a different speckle pattern each time a SAR scene is acquired over the same area. Many subpixel contributors build up a complex scattered pattern in any SAR image, making it erroneous to rely on a single pixel intensity for making reliable image analysis. In order to enhance the degree of usability of a SAR image, several techniques have been put in place to mitigate speckle. We will now show two of the most common approaches: the temporal and the spatial filter.\nWe load a dataset that contains the CORINE land cover and Sentinel-1 \\(\\sigma^0_E\\) at a 20 meter resolution. This is the same data presented in notebook 6.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nfused_ds = cat.speckle.read().compute()\nfused_ds\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 96MB\nDimensions:      (y: 1221, x: 1230, time: 7)\nCoordinates:\n  * y            (y) float64 10kB 1.571e+06 1.571e+06 ... 1.559e+06 1.559e+06\n  * x            (x) float64 10kB 5.282e+06 5.282e+06 ... 5.294e+06 5.294e+06\n  * time         (time) datetime64[ns] 56B 2023-08-17T16:51:22 ... 2023-10-28...\n    spatial_ref  int64 8B 0\nData variables:\n    land_cover   (y, x) float64 12MB 12.0 12.0 12.0 12.0 ... 41.0 41.0 41.0 41.0\n    sig0         (time, y, x) float64 84MB -8.5 -10.65 -12.07 ... -14.32 -14.22xarray.DatasetDimensions:y: 1221x: 1230time: 7Coordinates: (4)y(y)float641.571e+06 1.571e+06 ... 1.559e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([1570955., 1570945., 1570935., ..., 1558775., 1558765., 1558755.],\n      shape=(1221,))x(x)float645.282e+06 5.282e+06 ... 5.294e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([5281995., 5282005., 5282015., ..., 5294265., 5294275., 5294285.],\n      shape=(1230,))time(time)datetime64[ns]2023-08-17T16:51:22 ... 2023-10-...array(['2023-08-17T16:51:22.000000000', '2023-08-29T16:51:23.000000000',\n       '2023-09-10T16:51:24.000000000', '2023-09-22T16:51:24.000000000',\n       '2023-10-04T16:51:24.000000000', '2023-10-16T16:51:24.000000000',\n       '2023-10-28T16:51:24.000000000'], dtype='datetime64[ns]')spatial_ref()int640GeoTransform :5281990.0 10.0 0.0 1570960.0 0.0 -10.0crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]false_easting :5837287.81977false_northing :2121415.69617geographic_crs_name :WGS 84grid_mapping_name :azimuthal_equidistanthorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563latitude_of_projection_origin :53.0longitude_of_prime_meridian :0.0longitude_of_projection_origin :24.0prime_meridian_name :Greenwichprojected_crs_name :Azimuthal_Equidistantreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]array(0)Data variables: (2)land_cover(y, x)float6412.0 12.0 12.0 ... 41.0 41.0 41.0AREA_OR_POINT :AreaDataType :ThematicRepresentationType :THEMATICSTATISTICS_COVARIANCES :136.429646247598STATISTICS_MAXIMUM :48STATISTICS_MEAN :25.753373398066STATISTICS_MINIMUM :1STATISTICS_SKIPFACTORX :1STATISTICS_SKIPFACTORY :1STATISTICS_STDDEV :11.680310194836array([[12., 12., 12., ..., 41., 41., 41.],\n       [12., 12., 12., ..., 41., 41., 41.],\n       [12., 12., 12., ..., 41., 41., 41.],\n       ...,\n       [ 2.,  2.,  2., ..., 41., 41., 41.],\n       [ 2.,  2.,  2., ..., 41., 41., 41.],\n       [ 2.,  2.,  2., ..., 41., 41., 41.]], shape=(1221, 1230))sig0(time, y, x)float64-8.5 -10.65 ... -14.32 -14.22array([[[ -8.5 , -10.65, -12.07, ..., -22.27, -20.91, -21.92],\n        [ -9.  , -10.03, -10.82, ..., -16.46, -16.9 , -21.84],\n        [ -6.74,  -7.87,  -8.1 , ..., -17.41, -22.64, -23.01],\n        ...,\n        [ -8.74,  -7.44,  -6.69, ..., -10.85,  -8.39,  -7.08],\n        [ -9.39,  -9.55,  -8.9 , ..., -13.  , -11.03,  -9.15],\n        [-10.86, -10.84,  -9.7 , ..., -17.47, -14.58, -10.65]],\n\n       [[-10.39, -11.92, -11.74, ..., -19.02, -20.28, -17.92],\n        [ -8.65, -14.64, -12.34, ..., -21.77, -19.55, -16.67],\n        [ -8.11, -11.29, -10.25, ..., -23.16, -20.23, -16.73],\n        ...,\n        [-10.69,  -7.85,  -6.51, ..., -11.02,  -8.21,  -7.69],\n        [-12.83, -10.4 ,  -9.26, ..., -14.74,  -9.62,  -7.99],\n        [-13.76, -12.13, -12.08, ..., -18.51, -12.62,  -9.14]],\n\n       [[ -9.47, -14.49, -15.86, ..., -23.19, -24.68, -25.28],\n        [ -9.7 , -13.62, -12.49, ..., -27.02, -23.13, -22.35],\n        [-10.84, -12.3 , -12.61, ..., -23.46, -22.93, -21.64],\n        ...,\n...\n        [ -9.82,  -9.11,  -8.73, ...,  -9.79,  -7.33,  -6.92],\n        [-12.23, -11.64,  -9.59, ..., -12.29,  -7.65,  -8.14],\n        [-13.6 , -13.41, -11.73, ..., -19.82, -12.53, -11.83]],\n\n       [[-12.49, -12.55, -12.89, ..., -21.35, -23.29, -23.87],\n        [-12.15, -12.38, -14.03, ..., -18.07, -23.53, -23.23],\n        [-12.41, -12.52, -14.08, ..., -18.7 , -21.47, -22.17],\n        ...,\n        [ -6.87,  -5.98,  -5.32, ..., -18.47, -12.26, -11.2 ],\n        [-11.18,  -6.31,  -6.12, ..., -20.17, -12.56, -11.61],\n        [-11.98,  -9.02,  -8.46, ..., -13.06, -10.4 ,  -9.  ]],\n\n       [[ -6.41,  -6.59,  -7.16, ..., -22.25, -25.96, -25.45],\n        [ -6.75,  -9.42,  -9.54, ..., -20.65, -26.34, -23.53],\n        [ -8.24, -12.04, -10.46, ..., -20.65, -20.63, -21.05],\n        ...,\n        [ -6.64,  -5.06,  -4.89, ..., -13.67, -12.26,  -9.96],\n        [ -9.62,  -8.06, -10.02, ..., -16.11, -14.74, -10.64],\n        [-11.93, -11.41, -12.68, ..., -19.01, -14.32, -14.22]]],\n      shape=(7, 1221, 1230))\nWe also create the same dashboard for backscatter of different landcover types over time. In order to make this code reusable and adaptable we will define the following function plot_variability, which allows the injection of a spatial and/or temporal filter. It is not important to understand all the code of the following cell!\n# Load encoding\nwith cat.corine_cmap.read()[0] as f:\n    color_mapping_data = json.load(f)\n\n# Get mapping\ncolor_mapping = {item[\"value\"]: item for item in color_mapping_data[\"land_cover\"]}\n\n# Get landcover codes present in the image\npresent_landcover_codes = np.unique(\n    fused_ds.land_cover.where(~np.isnan(fused_ds.land_cover)).astype(int),\n)\n\n\ndef load_image(var_ds, time, land_cover, x_range, y_range, filter_fun_spatial=None):\n    \"\"\"Callback Function Landcover.\n\n    Parameters\n    ----------\n    time: panda.datetime\n        time slice\n    landcover: int\n        land cover type\n    x_range: array_like\n        longitude range\n    y_range: array_like\n        latitude range\n\n    Returns\n    -------\n    holoviews.Image\n\n    \"\"\"\n    if time is not None:\n        var_ds = var_ds.sel(time=time)\n\n    if land_cover == \"\\xa0\\xa0\\xa0 Complete Land Cover\":\n        sig0_selected_ds = var_ds.sig0\n    else:\n        land_cover_value = int(land_cover.split()[0])\n        mask_ds = var_ds.land_cover == land_cover_value\n        sig0_selected_ds = var_ds.sig0.where(mask_ds)\n\n    if filter_fun_spatial is not None:\n        sig0_np = filter_fun_spatial(sig0_selected_ds.values)\n    else:\n        sig0_np = sig0_selected_ds.values\n\n    # Convert unfiltered data into Holoviews Image\n    img = hv.Dataset(\n        (sig0_selected_ds[\"x\"], sig0_selected_ds[\"y\"], sig0_np),\n        [\"x\", \"y\"],\n        \"sig0\",\n    )\n\n    if x_range and y_range:\n        img = img.select(x=x_range, y=y_range)\n\n    return hv.Image(img)\n\n\ndef plot_variability(var_ds, filter_fun_spatial=None, filter_fun_temporal=None):\n    robust_min = var_ds.sig0.quantile(0.02).item()\n    robust_max = var_ds.sig0.quantile(0.98).item()\n\n    bin_edges = [\n        i + j * 0.5\n        for i in range(int(robust_min) - 2, int(robust_max) + 2)\n        for j in range(2)\n    ]\n\n    land_cover = {\"\\xa0\\xa0\\xa0 Complete Land Cover\": 1}\n    land_cover.update(\n        {\n            f\"{int(value): 02} {color_mapping[value]['label']}\": int(value)\n            for value in present_landcover_codes\n        },\n    )\n    time = var_ds.sig0[\"time\"].values\n\n    rangexy = RangeXY()\n\n    if filter_fun_temporal is not None:\n        var_ds = filter_fun_temporal(var_ds)\n        load_image_ = partial(\n            load_image,\n            var_ds=var_ds,\n            filter_fun_spatial=filter_fun_spatial,\n            time=None,\n        )\n        dmap = (\n            hv.DynamicMap(load_image_, kdims=[\"Landcover\"], streams=[rangexy])\n            .redim.values(Landcover=land_cover)\n            .hist(normed=True, bins=bin_edges)\n        )\n\n    else:\n        load_image_ = partial(\n            load_image,\n            var_ds=var_ds,\n            filter_fun_spatial=filter_fun_spatial,\n        )\n        dmap = (\n            hv.DynamicMap(load_image_, kdims=[\"Time\", \"Landcover\"], streams=[rangexy])\n            .redim.values(Time=time, Landcover=land_cover)\n            .hist(normed=True, bins=bin_edges)\n        )\n\n    image_opts = hv.opts.Image(\n        cmap=\"Greys_r\",\n        colorbar=True,\n        tools=[\"hover\"],\n        clim=(robust_min, robust_max),\n        aspect=\"equal\",\n        framewise=False,\n        frame_height=500,\n        frame_width=500,\n    )\n\n    hist_opts = hv.opts.Histogram(width=350, height=555)\n\n    return dmap.opts(image_opts, hist_opts)\nNow, lets work on the real-life dataset to see how speckle actually looks like.\nplot_variability(fused_ds)\nFigure 2: Lake Neusiedl \\(\\sigma^0_E\\) without any filter.\nThe speckle noise typically appears as a “salt-and-pepper” pattern. Also, please note the distribution of backscatter for each land cover. Even though speckle is known for following non-normal distributions (i.e., Rayleigh distribution for amplitude in the linear domain, and the Gumple for intensity in the log domain), we can assume that due to the Central Limit Theorem, the overall backscatter means (dB) tend to follow a Gaussian distribution.\nWe can mitigate speckle (it is impossible to remove it completely) by following approaches such as: - spatial filtering - taking mean backscatter value over the same land cover, or - temporal filtering - taking the average backscatter value over some time period.\nEither way, one pixel is never representative of ground truth! Therefore we need to look at samples and distributions.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Speckle Statistics</span>"
    ]
  },
  {
    "objectID": "unit_03/07_in_class_exercise.html#spatial-filtering",
    "href": "unit_03/07_in_class_exercise.html#spatial-filtering",
    "title": "5  Speckle Statistics",
    "section": "5.2 Spatial filtering",
    "text": "5.2 Spatial filtering\nWe first introduce a common spatial filter. The Lee filter is an adaptive speckle filter. The filter works using a kernel window with a configurable size, which refers to the dimensions of the neighborhood over which the filter operates. The kernel slides across the data, applying the smoothing operation at each pixel position of the image. It follows three assumptions:\n\nSAR speckle is modeled as a multiplicative noise - the brighter the area the noisier the data.\nThe noise and the signal are statistically independent of each other.\nThe sample mean and sample variance of a pixel is equal to its local mean and local variance.\n\nThis approach comes with some limitations: it reduces the spatial resolution of the SAR image.\nLet’s build up a function for applying a Lee filter with a kernel window size of 7 (do not forget to switch back to linear units before doing this computation and to dB after it):\n\ndef lee_filter(raster: npt.ArrayLike, size: int = 7) -&gt; npt.ArrayLike:\n    \"\"\"Apply the lee-filter to an Image array.\n\n    Parameters\n    ----------\n    raster: ndarray\n        2D array representing the noisy image (e.g., radar image with speckle)\n    size: int\n        Size of the kernel window for the filter (must be odd, default is 7)\n\n    Returns\n    -------\n    filtered_image (ndarray): The filtered image with reduced speckle noise\n\n    \"\"\"\n    raster = np.nan_to_num(raster)\n    linear = 10 ** (raster / 10)\n\n    # Mean and variance over local kernel window\n    mean_window = uniform_filter(linear, size=size)\n    mean_sq_window = uniform_filter(linear**2, size=size)\n    variance_window = mean_sq_window - mean_window**2\n\n    # Noise variance estimation (this could also be set manually)\n    overall_variance = np.var(linear)\n\n    # Compute the Lee filter\n    weights = variance_window / (variance_window + overall_variance)\n\n    return 10 * np.log10(mean_window + weights * (linear - mean_window))\n\n\nplot_variability(fused_ds, filter_fun_spatial=lee_filter)\n\n\n\n\n\n  \n\n\n\n\nFigure 3: Lake Neusiedl \\(\\sigma^0_E\\) with a Lee filter applied.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Speckle Statistics</span>"
    ]
  },
  {
    "objectID": "unit_03/07_in_class_exercise.html#temporal-filtering",
    "href": "unit_03/07_in_class_exercise.html#temporal-filtering",
    "title": "5  Speckle Statistics",
    "section": "5.3 Temporal filtering",
    "text": "5.3 Temporal filtering\nTemporal filtering would involve taking the average of all previous (past) observations for each pixel. This approach comes with some limitations: it takes out the content-rich information tied to the temporal variability of backscatter.\n\ndef temporal_filter(raster: npt.ArrayLike) -&gt; npt.ArrayLike:\n    \"\"\"Apply a temporal mean filter.\n\n    Parameters\n    ----------\n    raster: ndarray\n        3D array representing the noisy image over time\n        (e.g., radar image with speckle)\n\n    Returns\n    -------\n    filtered_image (ndarray): The filtered image with reduced speckle noise\n\n    \"\"\"\n    return raster.mean(\"time\")\n\n\nplot_variability(fused_ds, filter_fun_temporal=temporal_filter)\n\n\n\n\n\n  \n\n\n\n\nFigure 4: Lake Neusiedl \\(\\sigma^0_E\\) with a temporal filter applied.\nLet´s observe the histograms of the two plots. Especially in the region around the lake, it is clear that the distribution is now less dispersed and more centered around a central value.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Speckle Statistics</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html",
    "href": "unit_03/08_in_class_exercise.html",
    "title": "6  Interferograms",
    "section": "",
    "text": "6.1 Single Look Complex (SLC) Data\nOn July 5th, 2019, an earthquake with a magnitude of 7.1 mainshock struck eastern California, near the city of Ridgecrest. The seismic event produced a surface rupture spanning more than 50 kilometers with a complex vertical and horizontal offset pattern along the main fault line. SAR imagery can be employed for accurately measuring and describing ground motion through a well-established technique called SAR Interferometry. In this framework, the phase information contained in Synthetic Aperture Radar (SAR) data is employed. In this notebook, we will dive into the main interferometric SAR processing operations which involves retrieving the difference between the phase signals of repeated SAR acquisitions to analyze the shape and deformation of the Earth’s surface. In our case, we will use a pair of Single Look Complex (SLC) Sentinel-1 images to obtain an interferogram of the Ridgecrest earthquake.\nThis notebook will outline the process of working with interferograms and the steps needed to extract valuable information. Here, we will focus on displaying products generated by the Sentinel Application Platform (SNAP) software from the European Space Agency (ESA).\nPhoto by Brian Olson / California Geological Survey\nWe introduce now another level-1 radar product type, which is called Single Look Complex (SLC). Interferometry can only be performed with SLC data. What are the main differences between SLC and GRD (the other level-1 radar product)? + SLC vs GRD: + SLC contains complex-value data (amplitude and phase) vs GRD contains intensity only (amplitude) + SLC geometry is Slant Range (radar’s line of sight) vs GRD data are projected onto ground range + SLC resolution is full vs GRD has lower resolution (it is multi-looked) + SLC supports phase-based applications (Interferometry) vs GRD supports only amplitude-based ones + SLC has larger file sizes compared to GRD\nurl = get_intake_url()\ncat = intake.open_catalog(url)\niw1_ds = cat.iw1.read()\niw2_ds = cat.iw2.read()\niw3_ds = cat.iw3.read()\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml\nLet’s plot all three sub-swaths to view the full scene acquired by the satellite. The acquisition times for each swath on July 10th, 2019 are the following: - IW1 at 01:50:01 - 01:50:26 - IW2 at 01:49:59 - 01:50:24 - IW3 at 01:50:00 - 01:50:25\ndatasets = [iw1_ds, iw2_ds, iw3_ds]\n\nplot_slc_all(datasets)\nWe don’t need all three of the subswaths for our notebook, so we will focus on IW2 and display its intensity and phase measurements.\nplot_slc_iw2(iw2_ds)\nIntensity is represented in an 8-bit format (ranging from 0 to 255), while phase measurements range from \\(- \\pi\\) to \\(\\pi\\) . At first glance, phase does not correspond to easily observable physical properties of the ground. However, the phase becomes incredibly valuable when, for example, it is used comparatively between two successive phase measurements (two Sentinel-1 images acquired at different times over the same area). Here are the processing steps needed to retrieve a difference between the phases of two radar acquisitions:",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#coregistering",
    "href": "unit_03/08_in_class_exercise.html#coregistering",
    "title": "6  Interferograms",
    "section": "6.2 Coregistering",
    "text": "6.2 Coregistering\nBefore creating an interferogram, measurements from two different dates need to be coregistered. This means that each pixel from the two acquisitions must be precisely aligned so that they are representing the same ground object. Accurate and successful co-registration of the two (or more) images is vital for interferometry processing. We call the “master” image the reference image (typically the earliest acquisition in time) to which we coregister the “slave” image (typically acquired later in time).\n\ncoregistered_ds = cat.coreg.read()\n\nplot_coregistering(coregistered_ds)",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#interferogram-formation-and-coherence-estimation",
    "href": "unit_03/08_in_class_exercise.html#interferogram-formation-and-coherence-estimation",
    "title": "6  Interferograms",
    "section": "6.3 Interferogram Formation and Coherence Estimation",
    "text": "6.3 Interferogram Formation and Coherence Estimation\nThe interferogram formation process combines the amplitudes of both images and calculates the difference between their respective phases at each SAR image pixel (cross-multiplication of the master image with the complex conjugate of the slave image).\nAfter building up the interferogram, we have to take into account the presence of other contributing terms that could hinder our goal of measuring the surface deformation due to the earthquake. For example, we need to subtract from the interferogram the flat-earth phase contribution, which is a signal contribution due to the curvature of the Earth’s surface. This is here done automatically through the SNAP software operators.\nIn general, the accuracy of interferometric measurements are influenced by many contributors that could result in a loss of coherence. But what is coherence? It is a measure of phase correlation between the master and slave image. Interferometric coherence (γ) can be expressed as:\n\\[γ = γ_{proc}*γ_{geom}*γ_{vol}*γ_{SNR}*γ_{temp}\\]\nwhere \\(γ_{proc}\\) refers to inaccuracies in the processing (e.g., coregistration errors), \\(γ_{geom}\\) refers to the baseline decorrelation (different position of satellites during the two acquisitions), \\(γ_{vol}\\) refers to volume decorrelation (vegetation related), \\(γ_{SNR}\\) refers to the radar instrument thermal noise and \\(γ_{temp}\\) refers to the decorrelation caused by change of position of the objects in the scene during the time interval of the images acquisitions (e.g., plant growth, wind-induced movements or ground deformation due to earthquakes, landslides).\nTherefore, we can conclude that interferometric accuracy is sensitive to many processes, hence isolating the ground deformation signal involves several operations. On the other hand, interferometric coherence sensitivity could be exploited to track and map phenomena that cause its degradation (e.g., vegetation features, and water content).\n\ninterferogram_ds = cat.inter.read()\n\nplot_interferogram(interferogram_ds)\n\n\n\n\n\n  \n\n\n\n\nNow we can observe patterns that emerged between the two acquisitions. If you look at the data range in the interferogram (left plot), you’ll notice it spans approximately one wavelength, from \\(-\\pi\\) to \\(\\pi\\). On the right, you find a plot of the interferometric coherence (values ranging between 0 and 1), where low coherence is found along the ground surface ruptures caused by the earthquake. Please note, that the interferogram has already undergone a deburst operation (all bursts merged into a single image).",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#topographic-phase-removal",
    "href": "unit_03/08_in_class_exercise.html#topographic-phase-removal",
    "title": "6  Interferograms",
    "section": "6.4 Topographic Phase Removal",
    "text": "6.4 Topographic Phase Removal\nSince the local topography is an additional phase term constituting the interferogram that we built up so far, we need to make an estimate of its impact in order to further remove it to keep only the ground deformation-related phase. For this purpose, we use a reference known DEM to simulate an interferogram and to subtract it from the original interferogram.\n\ntopo_ds = cat.topo.read()\n\nplot_topographic_phase_removal(interferogram_ds, topo_ds)",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#multi-looking-goldstein-phase-filtering-and-geocoding",
    "href": "unit_03/08_in_class_exercise.html#multi-looking-goldstein-phase-filtering-and-geocoding",
    "title": "6  Interferograms",
    "section": "6.5 Multi-looking, Goldstein Phase Filtering and Geocoding",
    "text": "6.5 Multi-looking, Goldstein Phase Filtering and Geocoding\nIn order to improve the phase signatures contained within our interferogram and get a generally higher signal-to-noise (SNR) ratio, we will perform two additional operations called multi-looking and Goldstein phase filtering. Multi-looking is the process of averaging adjacent pixels using a moving window of the interferogram to reduce noise (at the cost of reducing the spatial resolution). Coherence is involved in this operation to flag and set areas to no data that are considered unreliable (low coherence) and to keep the reliable ones (high coherence).\nFinally, to make data interpretable, we geocode the wrapped interferogram. So far we performed the interferometric processing in the radar geometry. The transformation into geographic coordinates will help us to perform further comparisons in a real-world coordinate system.\n\ngeocoded_ds = cat.geocode.read()\n\nstep = 4  # if you want to zoom in, suggestion is to make this step smaller\n\nplot_igf_coh(geocoded_ds, step)\n\n\n\n\n\n  \n\n\n\n\nIn the above plot, we can compare georeferenced data in the form of the interferogram (left) and the coherence (right). Along the earthquake fault line, low coherence between the two phase acquisitions is visible. This occurs due to extreme changes in terrain heights or displacements, which are beyond the sensitivity of the SAR sensor. This area of low coherence indicates higher uncertainty in the interferogram. However, this isn’t necessarily a drawback, as it helps to clearly identify the earthquake epicenter.\nYou can also explore and zoom into regions with “fringe patterns” to observe ground movement. Each fringe cycle (e.g., from red to red or blue to blue) corresponds to ground motion in this case. The fringe patterns indicate motion in the line-of-sight (LOS) of the satellite (Sentinel-1 has a mean incidence angle of 38°) in terms of either uplift (relative motion of the ground towards the satellite) or sinking (relative motion of the ground away from the satellite). If the interferogram phase changes from 0 to -3.14 (cycles in the negative direction), the surface is moving away from the satellite (i.e., sinking movement). Vice versa, if cycles go in the positive direction (from 0 to +3.14), it would mean a relative uplifting movement of the ground. In areas with no ground motion, fringe patterns disappear. The radar’s sensitivity to motion depends on its wavelength. For Sentinel-1 (~5.6cm), a full fringe cycle (\\(2\\pi\\)) represents a displacement of ~2.8 cm in the LOS direction.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/08_in_class_exercise.html#visualisation-of-the-earthquake-event-on-july-5th-2019",
    "href": "unit_03/08_in_class_exercise.html#visualisation-of-the-earthquake-event-on-july-5th-2019",
    "title": "6  Interferograms",
    "section": "6.6 Visualisation of the Earthquake Event on July 5th, 2019",
    "text": "6.6 Visualisation of the Earthquake Event on July 5th, 2019\n\nstep = 4  # Downsample data for visualization\n\nplot_earthquake(geocoded_ds, step)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Interferograms</span>"
    ]
  },
  {
    "objectID": "unit_03/09_in_class_exercise.html",
    "href": "unit_03/09_in_class_exercise.html",
    "title": "7  Phase Unwrapping",
    "section": "",
    "text": "7.1 Loading Data\nThe goal of this notebook is to read an interferogram image (i.e., 2-D array of phase values) and unwrap it. Phase unwrapping is a critical process in interferometry, which involves recovering unambiguous phase data from the interferogram.\nA SAR interferogram represents the phase difference between two radar acquisitions (i.e., two SLC images). The phase difference is usually wrapped within a range of 0 to 2π, because the phase is inherently cyclical. When the true phase difference exceeds 2π, it gets “wrapped” into this range, creating a discontinuous phase signal. Phase unwrapping refers to the process of reconstructing the continuous phase field from the wrapped phase data.\nUnwrapping an interferogram is essential for extracting correct information contained in the phase such as surface topography and earth surface deformations.\nThere are many approaches that tried to solve the unwrapping problem, tackling challenging scenarios involving noise or large phase discontinuities. Here we present the Network-flow Algorithm for phase unwrapping (C. W. Chen and H. A. Zebker, 2000), which is implemented in the snaphu package.\nThe data is stored on the Jupyterhub server, so we need to load it using their respective paths. In this notebook we will use the resulting wrapped interferogram from notebook “Interferograms”, but we need to process it in the radar geometry in order to unwrap it (while in notebook “Interferograms” we end the whole process by performing the geocoding, just for better visualization purposes).\nimport cmcrameri as cmc  # noqa: F401\nimport intake\nimport numpy as np\nimport seaborn as sns\nimport snaphu  # noqa: F401\nimport xarray as xr\n\nfrom mrs.catalog import get_intake_url\nfrom mrs.plot import (\n    plot_coarsened_image,\n    plot_compare_coherence_mask_presence,\n    plot_compare_wrapped_unwrapped_completewrapped,\n    plot_different_coherence_thresholds,\n    plot_displacement_map,\n    plot_interferogram_map,\n    plot_summary,\n)\nfrom mrs.processing import subsetting, unwrap_array\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n  \n  \n\n\n\n\n\n\n\n\nⓘ\nurl = get_intake_url()\ncatalog = intake.open_catalog(url)\nds = catalog.complex_handout.read().compute()\nds[\"cmplx\"] = ds[\"real\"] + ds[\"imag\"] * 1j\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml\n# Set cyclic and linear colormaps\ncmap_cyc = sns.color_palette(\"hls\", as_cmap=True)\ncmap_lin = \"cmc.roma_r\"\ncmap_disp = \"cmc.vik\"\n\n# Create a mask for the areas which have no data\nmask = ds.phase.where(ds.phase == 0, other=True, drop=False).astype(bool)\nLet’s start by displaying the interferogram that needs to be unwrapped. Recall that due to the Slant Range geometry and the satellite acquisition pass (ascending, in our case), the image appears north/south flipped (with respect to the geocoded image)!\n# Plot Phase Interferogram Image\nplot_interferogram_map(ds=ds, mask=mask, cmap_cyc=cmap_cyc)",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Phase Unwrapping</span>"
    ]
  },
  {
    "objectID": "unit_03/09_in_class_exercise.html#phase-unwrapping",
    "href": "unit_03/09_in_class_exercise.html#phase-unwrapping",
    "title": "7  Phase Unwrapping",
    "section": "7.2 Phase Unwrapping",
    "text": "7.2 Phase Unwrapping\nAs we will be doing the unwrapping multiple times in this notebook let’s create a function that does the unwrapping for us on xarray DataArray objects. The actual core function where the unwrapping is happening is snaphu.unwrap_phase from the snaphu package. This function needs a 2D numpy array as input, where each pixel value is a complex number. Therefore, we have to convert the xarray DataArray to a 2D numpy array with complex values. We do that by combining the phase and intensity bands to a complex array. The actual unwrapping is essentially an addition of the phase values, such that the values are continuous and not between \\(-\\pi\\) and \\(\\pi\\).\n\nFigure 1: Illustration of how the unwrapping of the phase works. (Source: ESA).\n\n7.2.1 Unwrapping on a Subset\nAs the original image is too large to unwrap in a reasonable time, we will unwrap a subset of the image. In this case, we will unwrap an area of 500x500 pixels.\n\n# Select a subset of the data\ndx, dy = 500, 500\nx0, y0 = 2800, 1700\n\n\n# Subsetting the data arrays\nsubset = subsetting(ds.where(mask), x0, y0, dx, dy)\n\n# Unwrap the subset\nsubset = unwrap_array(subset, complex_var=\"cmplx\", ouput_var=\"unwrapped\")\n\nNow let’s compare the wrapped and unwrapped phase images.\n\nplot_compare_wrapped_unwrapped_completewrapped(\n    subset=subset,\n    cmap_cyc=cmap_cyc,\n    ds=ds,\n    mask=mask,\n    p0=(x0, y0),\n    dxy=(dx, dy),\n)\n\n\n\n\n\n\n\n\n\n\n7.2.2 Unwrapping with coherence mask\nAdditionally, can we try to calculate the unwrapped image by excluding pixels which the coherence values are lower than a certain threshold. This is done by masking the coherence image with the threshold value and then unwrapping the phase image with the masked coherence image.\n\nthreshold1 = 0.3\n\nsubset_unwrapped_coherence = unwrap_array(\n    subset,\n    coherence=subset.coh,\n    coh_low_threshold=threshold1,\n    complex_var=\"cmplx\",\n    ouput_var=\"unwrapped_coh\",\n)\n\nLet’s compare the unwrapped image with and without the coherence mask.\n\nplot_compare_coherence_mask_presence(\n    subset=subset_unwrapped_coherence,\n    cmap_cyc=cmap_cyc,\n    threshold=threshold1,\n)\n\n\n\n\n\n\n\n\nLet’s see if another threshold value for the coherence mask gives better results.\n\nthreshold2 = 0.5\nsubset_unwrapped_coherence_threshold2 = unwrap_array(\n    subset,\n    coherence=subset.coh,\n    coh_low_threshold=threshold2,\n    complex_var=\"cmplx\",\n    ouput_var=\"unwrapped_coh\",\n)\n\n\nplot_different_coherence_thresholds(\n    ds_coh=subset_unwrapped_coherence,\n    ds_coh_2=subset_unwrapped_coherence_threshold2,\n    cmap_cyc=cmap_cyc,\n)\n\n\n\n\n\n\n\n\nA higher coherence threshold means that only pixels with a coherence value greater than 0.5 will be used for phase unwrapping. This would result in an unwrapping process that is likely more stable, with reduced noise (invalid phase information in the proximity of the earthquake faults is discarded). However, an excessive coherence threshold might have significant gaps or missing information, especially in areas where motion or surface changes have occurred. The choice of a coherence threshold depends on the balance you want to strike between the accuracy and coverage of the output unwrapped image.\nKeep in mind that in case of large displacements, such as the Ridgecrest earthquake, phase unwrapping can be problematic and lead to poor results: when the displacement is large, the phase difference becomes wrapped multiple times, leading to phase aliasing. In this case, the phase values become ambiguous, we cannot distinguish between multiple phase wraps, thus leading to incorrect results.",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Phase Unwrapping</span>"
    ]
  },
  {
    "objectID": "unit_03/09_in_class_exercise.html#applying-an-equation-for-the-displacement-map",
    "href": "unit_03/09_in_class_exercise.html#applying-an-equation-for-the-displacement-map",
    "title": "7  Phase Unwrapping",
    "section": "7.3 Applying an Equation for the Displacement Map",
    "text": "7.3 Applying an Equation for the Displacement Map\nFrom the unwrapped phase image (we will use the phase masked with a coherence threshold of 0.3) we can calculate the displacement map using the following equation:\n$ d = - _d $\nwhere: - \\(\\lambda = 0.056\\) for Sentinel-1 - \\(\\Delta \\phi_d\\) is the unwrapped image\nThis operation can be very useful for monitoring ground deformation.\n\ndef displacement(unw: xr.DataArray, lambda_val: float = 0.056) -&gt; xr.DataArray:\n    \"\"\"Compute the displacement given the unwrapped phase.\"\"\"\n    return unw * -lambda_val / (4 * np.pi)\n\n\n# Calculate the displacement\ndisp_subset = displacement(subset.unwrapped_coh)\n\n\n# Plot the displacement map\nplot_displacement_map(\n    subset=disp_subset,\n    cmap_disp=cmap_disp,\n    title=\"Displacement Map of the Subset\",\n)",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Phase Unwrapping</span>"
    ]
  },
  {
    "objectID": "unit_03/09_in_class_exercise.html#coarsen-approach",
    "href": "unit_03/09_in_class_exercise.html#coarsen-approach",
    "title": "7  Phase Unwrapping",
    "section": "7.4 Coarsen Approach",
    "text": "7.4 Coarsen Approach\nAs the whole data is too large and the processing time already exceeds 20 minutes when using an image with 4000x4000 pixels, we can coarsen the image so that we can unwrap and compute the displacement for the whole scene.\n\nkernel_size = 3\n\nlowres = ds.coarsen(x=kernel_size, y=kernel_size, boundary=\"trim\").median()\n\n\nlowres = unwrap_array(\n    lowres,\n    tile_overlap=10,\n    coherence=lowres.coh,\n    coh_low_threshold=0.3,\n    ntiles=(20, 30),\n)\n\nWe can now plot the unwrapped image of the low resolution image.\n\n# Plot the unwrapped phase\nplot_coarsened_image(lowres=lowres, cmap_cyc=cmap_cyc)\n\n\n\n\n\n\n\n\nWe can also now calculate the displacement map and compare them.\n\nlowres_disp = displacement(lowres.unwrapped)\n\n# Plot the displacement map\nplot_displacement_map(\n    subset=lowres_disp,\n    cmap_disp=cmap_disp,\n    title=\"Displacement Map entire scene (coarse resolution)\",\n)\n\n\n\n\n\n\n\n\nPlot a summary of the previous plots:\n\n# Plot summary of previous plots\nplot_summary(\n    subset=subset,\n    subset_disp=disp_subset,\n    lowres=lowres,\n    lowres_disp=lowres_disp,\n    cmap_cyc=cmap_cyc,\n    cmap_disp=cmap_disp,\n)\n\n\n\n\n\n\n\n\nIn the following animation, we can capture the 3D displacement caused by the Ridgecrest quake by observing the after and before elevation model.\n Credits: NASA",
    "crumbs": [
      "Unit 3",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Phase Unwrapping</span>"
    ]
  },
  {
    "objectID": "unit_01/01_homework_exercise.html",
    "href": "unit_01/01_homework_exercise.html",
    "title": "Appendix A — Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog",
    "section": "",
    "text": "A.1 List all collection names and select one\nIn the previous notebook, you have learnt how to access Sentinel-1 data from EODC using the STAC API. Your task now is to find and plot a Sentinel-1 acquisition of your latest holiday destination. To successfully finish the exercise, you need to perform the following tasks:\nTo help you to get started, we already imported all required packages and provided some code blocks. Your task is now to fill in the missing code cells indicated with # YOUR CODE HERE.\neodc_catalog = pystac_client.Client.open(\"https://stac.eodc.eu/api/v1\")\n\ncolllection_id = ...  # YOUR CODE HERE\n\ncollection = eodc_catalog.get_collection(colllection_id)\ncollection",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog</span>"
    ]
  },
  {
    "objectID": "unit_01/01_homework_exercise.html#define-spatial-and-temporal-extent-and-use-client-to-load-the-metadata",
    "href": "unit_01/01_homework_exercise.html#define-spatial-and-temporal-extent-and-use-client-to-load-the-metadata",
    "title": "Appendix A — Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog",
    "section": "A.2 Define spatial and temporal extent and use client to load the metadata",
    "text": "A.2 Define spatial and temporal extent and use client to load the metadata\n\n# Define the area of interest by providing coordinates that cover your latest\n# holiday destination (can be a city, state, country, etc.)\nlatmin, latmax = ...  # YOUR CODE HERE\nlonmin, lonmax = ...  # YOUR CODE HERE\nbounds = (lonmin, latmin, lonmax, latmax)\n\n# Define the time range. This can either be the data of your actual holiday or\n# any other time range between 2016 and 2023\ntime_range = ...  # YOUR CODE HERE\n\nitems = ...  # YOUR CODE HERE\n\nprint(len(items), \"scenes found.\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog</span>"
    ]
  },
  {
    "objectID": "unit_01/01_homework_exercise.html#find-necessary-metadata-like-bands-resolution-coordinate-reference-system",
    "href": "unit_01/01_homework_exercise.html#find-necessary-metadata-like-bands-resolution-coordinate-reference-system",
    "title": "Appendix A — Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog",
    "section": "A.3 Find necessary metadata, like bands, resolution, coordinate reference system",
    "text": "A.3 Find necessary metadata, like bands, resolution, coordinate reference system\n\n# Pick one item from items using indexing get the relative orbit from the item\n# properties\nrelative_orbit = ...  # YOUR CODE HERE\nprint(f\"The relative orbit number of the item is {relative_orbit}\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog</span>"
    ]
  },
  {
    "objectID": "unit_01/01_homework_exercise.html#lazily-load-the-data-into-an-xarray",
    "href": "unit_01/01_homework_exercise.html#lazily-load-the-data-into-an-xarray",
    "title": "Appendix A — Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog",
    "section": "A.4 Lazily load the data into an Xarray",
    "text": "A.4 Lazily load the data into an Xarray\nTake care that your dataset is not to big by limiting the bounds and time range!\n\nbands = ...  # YOUR CODE HERE\nchunks = {\"time\": 1, \"x\": 1000, \"y\": 1000}\n\nsig0_dc = odc_stac.load(\n    items,\n    bands=bands,\n    bbox=bounds,\n    chunks=chunks,\n)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog</span>"
    ]
  },
  {
    "objectID": "unit_01/01_homework_exercise.html#define-the-nodata-value-and-scale-factor-and-decode-the-data",
    "href": "unit_01/01_homework_exercise.html#define-the-nodata-value-and-scale-factor-and-decode-the-data",
    "title": "Appendix A — Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog",
    "section": "A.5 Define the nodata value and scale factor and decode the data",
    "text": "A.5 Define the nodata value and scale factor and decode the data\n\nnodata = ...  # YOUR CODE HERE\nscale = ...  # YOUR CODE HERE\n\nsig0_dc = ...  # YOUR CODE HERE",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog</span>"
    ]
  },
  {
    "objectID": "unit_01/01_homework_exercise.html#plot-the-loaded-data",
    "href": "unit_01/01_homework_exercise.html#plot-the-loaded-data",
    "title": "Appendix A — Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog",
    "section": "A.6 Plot the loaded data",
    "text": "A.6 Plot the loaded data\n\n...  # YOUR CODE HERE",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Homework Exercise 1: Discover Sentinel 1 data using the EODC STAC catalog</span>"
    ]
  },
  {
    "objectID": "unit_01/02_homework_exercise.html",
    "href": "unit_01/02_homework_exercise.html",
    "title": "Appendix B — Homework Exercise 2: Unit conversion",
    "section": "",
    "text": "B.1 Load the data\nYour task in this notebook is to load some data from EODC and create weekly mosaics across the whole year (the area can be relatively small), plot one of the weekly mosaics, and save it to a file. To successfully finish the exercise, you need to perform the following tasks:\nAs a reminder, backscatter data is typically provided in ‘dB’, so make sure to perform the mean calculation for the weekly mosaics in the correct domain.\nimport pystac_client\nimport odc.stac\nfrom rasterio.crs import CRS\nimport rioxarray  # noqa\n# Search for some data\ncrs = CRS.from_epsg(27704)  # WGS 84\n\n# Set Spatial extent\nlatmin, latmax = (\n    ...,\n    ...,\n)\n# YOUR CODE HERE, you can choose any location that you like e.g. a city in\n# Austria\nlonmin, lonmax = ..., ...  # YOUR CODE HERE\nbounds = (lonmin, latmin, lonmax, latmax)\n\n# Set Temporal extent\ntime_range = ...  # YOUR CODE HERE\n\n# Search for Sentinel-1 data\nitems = (\n    pystac_client.Client.open(\"https://stac.eodc.eu/api/v1\")\n    .search(\n        bbox=bounds,\n        collections=[\"SENTINEL1_SIG0_20M\"],\n        datetime=time_range,\n        limit=100,\n    )\n    .item_collection()\n)\n\nprint(len(items), \"scenes found\")\n# Load the data and lazily combine items\nsig0_dc = odc.stac.stac_load(\n    items,\n    bbox=bounds,\n    bands=[\"VV\"],\n    chunks={\"time\": 1, \"x\": 1000, \"y\": 1000},\n)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Homework Exercise 2: Unit conversion</span>"
    ]
  },
  {
    "objectID": "unit_01/02_homework_exercise.html#preprocess-the-data",
    "href": "unit_01/02_homework_exercise.html#preprocess-the-data",
    "title": "Appendix B — Homework Exercise 2: Unit conversion",
    "section": "B.2 Preprocess the Data",
    "text": "B.2 Preprocess the Data\n\n# Define the nodata value and scale factor\nnodata = -9999  # Sentinel-1 nodata value as defined by EODC\nscale = 10  # Sentinel-1 scale factor as defined by EODC\n\n# Preprocess the data\nsig0 = ...  # YOUR CODE HERE",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Homework Exercise 2: Unit conversion</span>"
    ]
  },
  {
    "objectID": "unit_01/02_homework_exercise.html#create-weekly-mosaics",
    "href": "unit_01/02_homework_exercise.html#create-weekly-mosaics",
    "title": "Appendix B — Homework Exercise 2: Unit conversion",
    "section": "B.3 Create Weekly Mosaics",
    "text": "B.3 Create Weekly Mosaics\n\nsig0_weekly = ...  # YOUR CODE HERE",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Homework Exercise 2: Unit conversion</span>"
    ]
  },
  {
    "objectID": "unit_01/02_homework_exercise.html#plot-one-of-the-weekly-mosaics",
    "href": "unit_01/02_homework_exercise.html#plot-one-of-the-weekly-mosaics",
    "title": "Appendix B — Homework Exercise 2: Unit conversion",
    "section": "B.4 Plot one of the Weekly Mosaics",
    "text": "B.4 Plot one of the Weekly Mosaics\n\n# YOUR CODE HERE",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Homework Exercise 2: Unit conversion</span>"
    ]
  },
  {
    "objectID": "unit_01/02_homework_exercise.html#save-one-of-the-weekly-mosaics-as-tif",
    "href": "unit_01/02_homework_exercise.html#save-one-of-the-weekly-mosaics-as-tif",
    "title": "Appendix B — Homework Exercise 2: Unit conversion",
    "section": "B.5 Save one of the Weekly Mosaics as Tif",
    "text": "B.5 Save one of the Weekly Mosaics as Tif\n\n# YOUR CODE HERE",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Homework Exercise 2: Unit conversion</span>"
    ]
  },
  {
    "objectID": "unit_01/03_homework_exercise.html",
    "href": "unit_01/03_homework_exercise.html",
    "title": "Appendix C — Homework Exercise 3: Backscattering Coefficients",
    "section": "",
    "text": "C.1 Question 1\nTo successfully finish this notebook, you have to answer/solve the following three questions.\nExecute the lines below to create the plot. You now see a SAR image with unknown processing level. Based on what you see, which pre-processing steps have been applied to the image?\nSelect the answers you think are correct by editing the markdown text and putting an ‘x’ in the brackets. Note: One, several, or all answers are possible.\nex3_dc.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    robust=True,\n    data_aspect=1,\n    cmap=\"Greys_r\",\n    groupby=\"band\",\n    rasterize=True,\n).opts(frame_height=600, framewise=False, aspect=\"equal\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Homework Exercise 3: Backscattering Coefficients</span>"
    ]
  },
  {
    "objectID": "unit_01/03_homework_exercise.html#question-1",
    "href": "unit_01/03_homework_exercise.html#question-1",
    "title": "Appendix C — Homework Exercise 3: Backscattering Coefficients",
    "section": "",
    "text": "Cloud masking\nGeometric terrain correction\nConversion to dB\nRadiometric terrain correction (terrain flattening)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Homework Exercise 3: Backscattering Coefficients</span>"
    ]
  },
  {
    "objectID": "unit_01/03_homework_exercise.html#question-2",
    "href": "unit_01/03_homework_exercise.html#question-2",
    "title": "Appendix C — Homework Exercise 3: Backscattering Coefficients",
    "section": "C.2 Question 2",
    "text": "C.2 Question 2\nName all types of geometric image distortions in a SAR image. How are they caused, and how can we get rid of them?\nYour answer here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Homework Exercise 3: Backscattering Coefficients</span>"
    ]
  },
  {
    "objectID": "unit_01/03_homework_exercise.html#question-3",
    "href": "unit_01/03_homework_exercise.html#question-3",
    "title": "Appendix C — Homework Exercise 3: Backscattering Coefficients",
    "section": "C.3 Question 3",
    "text": "C.3 Question 3\nUse the figure below question 1 to identify areas that are affected by foreshortening and radar shadows. Use the mouseover to retrieve their x/y coordinates. Then use these coordinates to annotate the following matplotlib figure with labels by putting them in the lines indicated with # Your coordinates here.\n\nzoom = ex3_dc.sel(x=slice(11.25, 11.5), y=slice(47.75, 47.5)).band_data\nfig, ax = plt.subplots(figsize=(10, 8))\n\nbbox = dict(boxstyle=\"round\", fc=\"0.8\")\n\nax.annotate(\n    \"foreshortening\",\n    xy=(..., ...),  # Your foreshortening coordinates here\n    xytext=(0.3, 0.25),\n    textcoords=\"subfigure fraction\",\n    bbox=bbox,\n    arrowprops=dict(facecolor=\"white\", shrink=0.05),\n)\nax.annotate(\n    \"shadows\",\n    xy=(..., ...),  # Your radar shadow coordinates here\n    xytext=(0.47, 0.8),\n    textcoords=\"subfigure fraction\",\n    bbox=bbox,\n    arrowprops=dict(facecolor=\"white\", shrink=0.05),\n)\n\nzoom.sel(band=\"unknown1\").plot(robust=True, cmap=\"Greys_r\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Homework Exercise 3: Backscattering Coefficients</span>"
    ]
  },
  {
    "objectID": "unit_02/04_homework_exercise.html",
    "href": "unit_02/04_homework_exercise.html",
    "title": "Appendix D — Homework Exercise 4: Datacubes",
    "section": "",
    "text": "D.1 Question 1\nFor the homework assignement we will continue work on the same data as in the in-class exercise. Hence we will load the same data which has been stored as a Zarr datastore. Zarr is efficient for storing chunked data and much faster for reading.\nWe want to expand the datacube of the in-class exercise with a new variable in this assignment. The new variable is the Leaf Area Index (LAI), which is a dimensionless index measuring the one-sided green leaf area over a unit of land (\\(m^2 \\cdot m^{-2}\\)).\nLoad the new LAI data with the below provided code snippet and extract the CRS and resolution of the raster. Apply what you have learned in the in-class exercise by only using the packages as listed in the imports of this notebook.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nlai_ds = cat[\"lai\"].read().compute()\nlai_ds\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 32MB\nDimensions:  (time: 35, lat: 337, lon: 337)\nCoordinates:\n  * time     (time) datetime64[ns] 280B 2022-01-20 2022-01-31 ... 2022-12-31\n  * lat      (lat) float64 3kB 46.0 46.0 45.99 45.99 ... 45.01 45.01 45.0 45.0\n  * lon      (lon) float64 3kB 10.0 10.0 10.01 10.01 ... 10.99 10.99 11.0 11.0\n    crs      int64 8B 0\nData variables:\n    LAI      (time, lat, lon) float64 32MB nan nan nan nan ... nan nan nan nanxarray.DatasetDimensions:time: 35lat: 337lon: 337Coordinates: (4)time(time)datetime64[ns]2022-01-20 ... 2022-12-31axis :Tlong_name :Timearray(['2022-01-20T00:00:00.000000000', '2022-01-31T00:00:00.000000000',\n       '2022-02-10T00:00:00.000000000', '2022-02-20T00:00:00.000000000',\n       '2022-02-28T00:00:00.000000000', '2022-03-10T00:00:00.000000000',\n       '2022-03-20T00:00:00.000000000', '2022-03-31T00:00:00.000000000',\n       '2022-04-10T00:00:00.000000000', '2022-04-20T00:00:00.000000000',\n       '2022-04-30T00:00:00.000000000', '2022-05-10T00:00:00.000000000',\n       '2022-05-20T00:00:00.000000000', '2022-05-31T00:00:00.000000000',\n       '2022-06-10T00:00:00.000000000', '2022-06-20T00:00:00.000000000',\n       '2022-06-30T00:00:00.000000000', '2022-07-10T00:00:00.000000000',\n       '2022-07-20T00:00:00.000000000', '2022-07-31T00:00:00.000000000',\n       '2022-08-10T00:00:00.000000000', '2022-08-20T00:00:00.000000000',\n       '2022-08-31T00:00:00.000000000', '2022-09-10T00:00:00.000000000',\n       '2022-09-20T00:00:00.000000000', '2022-09-30T00:00:00.000000000',\n       '2022-10-10T00:00:00.000000000', '2022-10-20T00:00:00.000000000',\n       '2022-10-31T00:00:00.000000000', '2022-11-10T00:00:00.000000000',\n       '2022-11-20T00:00:00.000000000', '2022-11-30T00:00:00.000000000',\n       '2022-12-10T00:00:00.000000000', '2022-12-20T00:00:00.000000000',\n       '2022-12-31T00:00:00.000000000'], dtype='datetime64[ns]')lat(lat)float6446.0 46.0 45.99 ... 45.01 45.0 45.0DIMENSION_LABELS :lat_CoordinateAxisType :Lataxis :Ylong_name :latitudestandard_name :latitudeunits :degrees_northarray([46.      , 45.997024, 45.994048, ..., 45.005952, 45.002976, 45.      ],\n      shape=(337,))lon(lon)float6410.0 10.0 10.01 ... 10.99 11.0 11.0DIMENSION_LABELS :lon_CoordinateAxisType :Lonaxis :Xlong_name :longitudestandard_name :longitudeunits :degrees_eastarray([10.      , 10.002976, 10.005952, ..., 10.994048, 10.997024, 11.      ],\n      shape=(337,))crs()int640GeoTransform :9.998511905625918 0.0029761904762040103 0.0 46.001488095245826 0.0 -0.0029761904761897995crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9108\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]geographic_crs_name :WGS 84grid_mapping_name :latitude_longitudehorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9108\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]towgs84 :[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]array(0)Data variables: (1)LAI(time, lat, lon)float64nan nan nan nan ... nan nan nan nanlong_name :Leaf Area Index 333mstandard_name :leaf_area_indexunits :m^2/m^2valid_range :[0, 210]array([[[       nan,        nan,        nan, ..., 0.73333333,\n         0.66666667, 0.73333333],\n        [       nan,        nan,        nan, ..., 0.56666667,\n         0.7       , 0.63333333],\n        [       nan,        nan,        nan, ..., 0.56666667,\n         0.6       , 0.53333333],\n        ...,\n        [0.46666667, 0.33333333, 0.3       , ..., 1.6       ,\n         1.76666666, 0.93333333],\n        [0.36666667, 0.36666667, 0.43333333, ..., 0.63333333,\n         1.13333333, 0.6       ],\n        [0.46666667, 0.36666667, 0.5       , ..., 0.4       ,\n         0.73333333, 0.53333333]],\n\n       [[       nan,        nan,        nan, ..., 0.8       ,\n         0.7       , 0.66666667],\n        [       nan,        nan,        nan, ..., 0.66666667,\n         0.66666667, 0.6       ],\n        [       nan,        nan,        nan, ..., 0.6       ,\n         0.5       , 0.56666667],\n...\n        [       nan,        nan,        nan, ...,        nan,\n                nan, 1.4       ],\n        [       nan,        nan,        nan, ..., 0.73333333,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n         0.63333333,        nan]],\n\n       [[       nan,        nan,        nan, ..., 0.56666667,\n         0.53333333, 0.56666667],\n        [       nan,        nan,        nan, ..., 0.4       ,\n         0.43333333, 0.6       ],\n        [       nan,        nan,        nan, ..., 0.4       ,\n         0.5       ,        nan],\n        ...,\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan]]], shape=(35, 337, 337))",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Homework Exercise 4: Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/04_homework_exercise.html#question-2",
    "href": "unit_02/04_homework_exercise.html#question-2",
    "title": "Appendix D — Homework Exercise 4: Datacubes",
    "section": "D.2 Question 2",
    "text": "D.2 Question 2\nIn order to compare LAI with ALOS-2 L-band and Sentinel-1 C-band data, we will merge this variable with the SAR datacube (of the in-class exercise). Let’s first check the temporal range of the SAR datacube (fused_ds) and the new xarray dataset: lai_ds.\n\nfused_ds.time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'time' (time: 5)&gt; Size: 40B\narray(['2022-06-30T00:00:00.000000000', '2022-07-31T00:00:00.000000000',\n       '2022-08-31T00:00:00.000000000', '2022-09-30T00:00:00.000000000',\n       '2022-10-31T00:00:00.000000000'], dtype='datetime64[ns]')\nCoordinates:\n  * time         (time) datetime64[ns] 40B 2022-06-30 2022-07-31 ... 2022-10-31\n    spatial_ref  int64 8B 0xarray.DataArray'time'time: 52022-06-30 2022-07-31 2022-08-31 2022-09-30 2022-10-31array(['2022-06-30T00:00:00.000000000', '2022-07-31T00:00:00.000000000',\n       '2022-08-31T00:00:00.000000000', '2022-09-30T00:00:00.000000000',\n       '2022-10-31T00:00:00.000000000'], dtype='datetime64[ns]')Coordinates: (2)time(time)datetime64[ns]2022-06-30 ... 2022-10-31array(['2022-06-30T00:00:00.000000000', '2022-07-31T00:00:00.000000000',\n       '2022-08-31T00:00:00.000000000', '2022-09-30T00:00:00.000000000',\n       '2022-10-31T00:00:00.000000000'], dtype='datetime64[ns]')spatial_ref()int640GeoTransform :4769370.0 10.0 0.0 1397370.0 0.0 -10.0crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]false_easting :5837287.81977false_northing :2121415.69617geographic_crs_name :WGS 84grid_mapping_name :azimuthal_equidistanthorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563latitude_of_projection_origin :53.0longitude_of_prime_meridian :0.0longitude_of_projection_origin :24.0prime_meridian_name :Greenwichprojected_crs_name :Azimuthal_Equidistantreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]array(0)\n\n\n\nlai_ds.time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'time' (time: 35)&gt; Size: 280B\narray(['2022-01-20T00:00:00.000000000', '2022-01-31T00:00:00.000000000',\n       '2022-02-10T00:00:00.000000000', '2022-02-20T00:00:00.000000000',\n       '2022-02-28T00:00:00.000000000', '2022-03-10T00:00:00.000000000',\n       '2022-03-20T00:00:00.000000000', '2022-03-31T00:00:00.000000000',\n       '2022-04-10T00:00:00.000000000', '2022-04-20T00:00:00.000000000',\n       '2022-04-30T00:00:00.000000000', '2022-05-10T00:00:00.000000000',\n       '2022-05-20T00:00:00.000000000', '2022-05-31T00:00:00.000000000',\n       '2022-06-10T00:00:00.000000000', '2022-06-20T00:00:00.000000000',\n       '2022-06-30T00:00:00.000000000', '2022-07-10T00:00:00.000000000',\n       '2022-07-20T00:00:00.000000000', '2022-07-31T00:00:00.000000000',\n       '2022-08-10T00:00:00.000000000', '2022-08-20T00:00:00.000000000',\n       '2022-08-31T00:00:00.000000000', '2022-09-10T00:00:00.000000000',\n       '2022-09-20T00:00:00.000000000', '2022-09-30T00:00:00.000000000',\n       '2022-10-10T00:00:00.000000000', '2022-10-20T00:00:00.000000000',\n       '2022-10-31T00:00:00.000000000', '2022-11-10T00:00:00.000000000',\n       '2022-11-20T00:00:00.000000000', '2022-11-30T00:00:00.000000000',\n       '2022-12-10T00:00:00.000000000', '2022-12-20T00:00:00.000000000',\n       '2022-12-31T00:00:00.000000000'], dtype='datetime64[ns]')\nCoordinates:\n  * time     (time) datetime64[ns] 280B 2022-01-20 2022-01-31 ... 2022-12-31\n    crs      int64 8B 0\nAttributes:\n    axis:       T\n    long_name:  Timexarray.DataArray'time'time: 352022-01-20 2022-01-31 2022-02-10 ... 2022-12-10 2022-12-20 2022-12-31array(['2022-01-20T00:00:00.000000000', '2022-01-31T00:00:00.000000000',\n       '2022-02-10T00:00:00.000000000', '2022-02-20T00:00:00.000000000',\n       '2022-02-28T00:00:00.000000000', '2022-03-10T00:00:00.000000000',\n       '2022-03-20T00:00:00.000000000', '2022-03-31T00:00:00.000000000',\n       '2022-04-10T00:00:00.000000000', '2022-04-20T00:00:00.000000000',\n       '2022-04-30T00:00:00.000000000', '2022-05-10T00:00:00.000000000',\n       '2022-05-20T00:00:00.000000000', '2022-05-31T00:00:00.000000000',\n       '2022-06-10T00:00:00.000000000', '2022-06-20T00:00:00.000000000',\n       '2022-06-30T00:00:00.000000000', '2022-07-10T00:00:00.000000000',\n       '2022-07-20T00:00:00.000000000', '2022-07-31T00:00:00.000000000',\n       '2022-08-10T00:00:00.000000000', '2022-08-20T00:00:00.000000000',\n       '2022-08-31T00:00:00.000000000', '2022-09-10T00:00:00.000000000',\n       '2022-09-20T00:00:00.000000000', '2022-09-30T00:00:00.000000000',\n       '2022-10-10T00:00:00.000000000', '2022-10-20T00:00:00.000000000',\n       '2022-10-31T00:00:00.000000000', '2022-11-10T00:00:00.000000000',\n       '2022-11-20T00:00:00.000000000', '2022-11-30T00:00:00.000000000',\n       '2022-12-10T00:00:00.000000000', '2022-12-20T00:00:00.000000000',\n       '2022-12-31T00:00:00.000000000'], dtype='datetime64[ns]')Coordinates: (2)time(time)datetime64[ns]2022-01-20 ... 2022-12-31axis :Tlong_name :Timearray(['2022-01-20T00:00:00.000000000', '2022-01-31T00:00:00.000000000',\n       '2022-02-10T00:00:00.000000000', '2022-02-20T00:00:00.000000000',\n       '2022-02-28T00:00:00.000000000', '2022-03-10T00:00:00.000000000',\n       '2022-03-20T00:00:00.000000000', '2022-03-31T00:00:00.000000000',\n       '2022-04-10T00:00:00.000000000', '2022-04-20T00:00:00.000000000',\n       '2022-04-30T00:00:00.000000000', '2022-05-10T00:00:00.000000000',\n       '2022-05-20T00:00:00.000000000', '2022-05-31T00:00:00.000000000',\n       '2022-06-10T00:00:00.000000000', '2022-06-20T00:00:00.000000000',\n       '2022-06-30T00:00:00.000000000', '2022-07-10T00:00:00.000000000',\n       '2022-07-20T00:00:00.000000000', '2022-07-31T00:00:00.000000000',\n       '2022-08-10T00:00:00.000000000', '2022-08-20T00:00:00.000000000',\n       '2022-08-31T00:00:00.000000000', '2022-09-10T00:00:00.000000000',\n       '2022-09-20T00:00:00.000000000', '2022-09-30T00:00:00.000000000',\n       '2022-10-10T00:00:00.000000000', '2022-10-20T00:00:00.000000000',\n       '2022-10-31T00:00:00.000000000', '2022-11-10T00:00:00.000000000',\n       '2022-11-20T00:00:00.000000000', '2022-11-30T00:00:00.000000000',\n       '2022-12-10T00:00:00.000000000', '2022-12-20T00:00:00.000000000',\n       '2022-12-31T00:00:00.000000000'], dtype='datetime64[ns]')crs()int640GeoTransform :9.998511905625918 0.0029761904762040103 0.0 46.001488095245826 0.0 -0.0029761904761897995crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9108\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]geographic_crs_name :WGS 84grid_mapping_name :latitude_longitudehorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9108\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]towgs84 :[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]array(0)Attributes: (2)axis :Tlong_name :Time\n\n\nThe temporal range of lai_ds is longer then the fused ALOS-2 L-band and Sentinel-1 C-band datacube. To fit lai_ds object to the SAR datacube, we will need to cut the lai_ds temporal extent using the selection method (sel). Complete the following code snippet to perform the previous described selection operation.\n\nlai_ds = lai_ds.sel(time=slice(..., ...))  # YOUR CODE HERE\nlai_ds.time",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Homework Exercise 4: Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/04_homework_exercise.html#question-3",
    "href": "unit_02/04_homework_exercise.html#question-3",
    "title": "Appendix D — Homework Exercise 4: Datacubes",
    "section": "D.3 Question 3",
    "text": "D.3 Question 3\nNow that the temporal range of the LAI datacube matches that of fused_ds, we can continue by aligning the spatial coordinates, so that we can create a datacube containing both variables (LAI and SAR data). Yet again, apply the same methods as shown in the in-class exercise.\nLet’s break this down into steps first align both datacubes.\n\nAlign both datacubes. Remember to use the rioxarray package and use the default resampling method.\n\n\nlai_ds = ...  # YOUR CODE HERE\nlai_ds\n\n\nWrite the coordinates of fused_ds to the reprojected lai_ds object to prevent mistakes caused by floating point errors.\n\n\nlai_ds = lai_ds.assign_coords({\"x\": ..., \"y\": ...})  # YOUR CODE HERE\nlai_ds\n\nIf the previous operations were successfull, 3) we can merge the two variables: SAR and LAI. We use a different xarray function for this, where we combine the two variable to a xarray.DataSet with the merge function.\n\n# YOUR CODE HERE ----------------------------------------------------------\nfused_ds = xr.merge([..., ...])  # combine two variables in an Xarray.Dataset\n# YOUR CODE HERE ----------------------------------------------------------\nfused_ds\n\nThe last step is the 4) resample operation to align the timestamps. Use again a median value.\n\nfused_ds = ...  # YOUR CODE HERE\n\nPlot the LAI variable with the following lines of code to check your results:\n\nfused_ds.LAI.\\\n    dropna(dim=\"time\", how=\"all\").\\\n    hvplot.image(robust=True, data_aspect=1, cmap=\"viridis\", rasterize=True).\\\n    opts(frame_height=400, aspect=\"equal\")\n\n\nto_store = fused_ds.copy()\nfor var in to_store.variables:\n    to_store[var].encoding.clear()\nto_store.to_zarr(\"fused_ds.zarr\", mode=\"w\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Homework Exercise 4: Datacubes</span>"
    ]
  },
  {
    "objectID": "unit_02/05_homework_exercise.html",
    "href": "unit_02/05_homework_exercise.html",
    "title": "Appendix E — Homework Exercise 5: SAR Wavelength and Polarization",
    "section": "",
    "text": "E.1 Question 1\nWe have seen that cross- and co-polarized signals for Sentinel-1 and ALOS-2 seem to be dependent on the type of vegetation. Let’s have a closer look at this.\nWe will try to highlight the difference between cross- and co-polarized microwave backscattering for Sentinel-1 and ALOS-2 separately. As already indicated volume scattering leads to depolarization effects, where multiple scattering can cause a change in polarization. Hence, a cross-polarized receiving antenna, such as on-board the Sentinel-1 and ALOS-2 satellites, may receive less energy from smooth bare soils than from vegetated surfaces. And the received energy for a cross-polarized receiving antenna will increase with increasing vegetation density. Hence this property of depolarization with vegetation density can be formulated as the cross-polarised ratio.\n\\(r_{cross} = \\frac{P_{VH}}{P_{VV}} = \\frac{\\gamma^0_{VH}}{\\gamma^0_{VV}}  \\quad \\text{for Sentinel-1}\\)\n\\(r_{cross} = \\frac{P_{HV}}{P_{HH}} = \\frac{\\gamma^0_{HV}}{\\gamma^0_{HH}}  \\quad \\text{for ALOS-2}\\)\nNow you will calculate cross-polarised ratios for Sentinel-1 and ALOS-2.\nFirst load again the same dataset.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nfused_ds = cat[\"fused_array\"].read().compute()\nfused_ds\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 307MB\nDimensions:      (sensor: 4, time: 5, y: 1528, x: 2508)\nCoordinates:\n  * sensor       (sensor) object 32B 's1_VH' 's1_VV' 'alos_HH' 'alos_HV'\n  * time         (time) datetime64[ns] 40B 2022-06-30 2022-07-31 ... 2022-10-31\n  * y            (y) float64 12kB 1.397e+06 1.397e+06 ... 1.382e+06 1.382e+06\n  * x            (x) float64 20kB 4.769e+06 4.769e+06 ... 4.794e+06 4.794e+06\n    spatial_ref  int64 8B 0\nData variables:\n    gam0         (sensor, time, y, x) float32 307MB -14.52 -14.8 ... -31.16xarray.DatasetDimensions:sensor: 4time: 5y: 1528x: 2508Coordinates: (5)sensor(sensor)object's1_VH' 's1_VV' 'alos_HH' 'alos_HV'array(['s1_VH', 's1_VV', 'alos_HH', 'alos_HV'], dtype=object)time(time)datetime64[ns]2022-06-30 ... 2022-10-31array(['2022-06-30T00:00:00.000000000', '2022-07-31T00:00:00.000000000',\n       '2022-08-31T00:00:00.000000000', '2022-09-30T00:00:00.000000000',\n       '2022-10-31T00:00:00.000000000'], dtype='datetime64[ns]')y(y)float641.397e+06 1.397e+06 ... 1.382e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([1397365., 1397355., 1397345., ..., 1382115., 1382105., 1382095.],\n      shape=(1528,))x(x)float644.769e+06 4.769e+06 ... 4.794e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([4769375., 4769385., 4769395., ..., 4794425., 4794435., 4794445.],\n      shape=(2508,))spatial_ref()int640GeoTransform :4769370.0 10.0 0.0 1397370.0 0.0 -10.0crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]false_easting :5837287.81977false_northing :2121415.69617geographic_crs_name :WGS 84grid_mapping_name :azimuthal_equidistanthorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563latitude_of_projection_origin :53.0longitude_of_prime_meridian :0.0longitude_of_projection_origin :24.0prime_meridian_name :Greenwichprojected_crs_name :Azimuthal_Equidistantreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]array(0)Data variables: (1)gam0(sensor, time, y, x)float32-14.52 -14.8 ... -30.78 -31.16array([[[[-14.5199995, -14.799999 , -15.94     , ..., -22.07     ,\n          -19.99     , -20.369999 ],\n         [-15.67     , -14.9      , -14.599999 , ..., -18.48     ,\n          -14.509999 , -16.39     ],\n         [-16.4      , -15.679999 , -14.889999 , ..., -15.42     ,\n          -11.19     , -12.62     ],\n         ...,\n         [-16.74     , -18.279999 , -21.05     , ..., -24.72     ,\n          -25.599998 , -26.369999 ],\n         [-15.349999 , -15.259999 , -17.64     , ..., -25.47     ,\n          -25.08     , -25.75     ],\n         [-15.61     , -15.98     , -16.619999 , ..., -26.32     ,\n          -26.789999 , -25.91     ]],\n\n        [[-15.049999 , -15.299999 , -14.96     , ..., -15.58     ,\n          -14.08     , -12.179999 ],\n         [-13.559999 , -13.96     , -15.73     , ..., -16.32     ,\n          -11.78     , -12.389999 ],\n         [-13.82     , -14.54     , -15.5199995, ..., -16.25     ,\n          -12.45     , -13.259999 ],\n...\n          -24.919933 , -24.837606 ],\n         [        nan,         nan,         nan, ..., -25.47786  ,\n          -25.48013  , -25.71463  ],\n         [        nan,         nan,         nan, ..., -25.465223 ,\n          -25.860966 , -26.551125 ]],\n\n        [[-14.129457 , -14.054055 , -13.846073 , ...,         nan,\n                  nan,         nan],\n         [-15.771104 , -15.154463 , -14.165511 , ...,         nan,\n                  nan,         nan],\n         [-13.967249 , -14.349602 , -14.299993 , ...,         nan,\n                  nan,         nan],\n         ...,\n         [        nan,         nan,         nan, ..., -28.712454 ,\n          -28.836363 , -29.904612 ],\n         [        nan,         nan,         nan, ..., -29.798288 ,\n          -30.100616 , -30.784294 ],\n         [        nan,         nan,         nan, ..., -30.489552 ,\n          -30.782894 , -31.163181 ]]]],\n      shape=(4, 5, 1528, 2508), dtype=float32)\nCalculate the cross-polarised ratios separately for each of the satellites with standard mathematical operations on the fused xarray and store the results in two new xarray objects. Make sure to transform the cross-polarised ratio (CR) to linear units for easier interpretation in the following questions.\nrcross_da_s1 = ...  # YOUR CODE HERE\nrcross_da_alos = ...  # YOUR CODE HERE\nAfter you calculate the CR, plot the results with the following code.\nLAI_mean = fused_ds.LAI.mean(\"time\")\n\nLAI_image = LAI_mean.hvplot.\\\n    image(rasterize=True, cmap='viridis', clim=(0, 6)).\\\n    opts(title=\"Mean LAI (Selectable)\", frame_height=400, aspect=\"equal\")\n\nid_sat = pd.Index([\"sentinel\", \"alos\"], name=\"sat\")\nrcross_da = xr.concat([rcross_da_s1, rcross_da_alos], id_sat)\n\n\ndef get_timeseries(x, y):\n    \"\"\"\n    Callback Function Holoviews\n\n    Parameters\n    ----------\n    x: float\n        numeric value for x selected on LAI map\n    y: float\n        numeric value for y selected on LAI map\n    \"\"\"\n\n    lai_value = LAI_mean.sel(x=x, y=y, method=\"nearest\").values\n\n    if np.isnan(lai_value):\n        select = rcross_da.where(LAI_mean.isnull())\n        label = \"Water\"\n    else:\n        mask = np.isclose(LAI_mean, lai_value, atol=0.05)\n        select = rcross_da.where(mask)\n        label = \"Mean LAI: \" + str(np.round(lai_value, 1))\n\n    time_series = select.to_dataset(\"sat\").\\\n        median([\"x\", \"y\"], skipna=True).\\\n        hvplot.scatter(ylim=(0, 0.5)).\\\n        opts(title=label, frame_height=400)\n\n    return time_series\n\n\npoint_stream = hv.streams.SingleTap(source=LAI_image)\ntime_series = hv.DynamicMap(get_timeseries, streams=[point_stream])\nLAI_image + time_series\nFigure 1: (Left) Map of MEAN LAI around Lake Garda. The pixel values can be seen by hovering your mouse over it. Clicking on the pixel will generate the timeseries for the associated mean LAI on the right hand-side. (Right) Timeseries of CR for Sentinel-1 and ALOS-2.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Homework Exercise 5: SAR Wavelength and Polarization</span>"
    ]
  },
  {
    "objectID": "unit_02/05_homework_exercise.html#question-1",
    "href": "unit_02/05_homework_exercise.html#question-1",
    "title": "Appendix E — Homework Exercise 5: SAR Wavelength and Polarization",
    "section": "",
    "text": "Tip: The calculation of the cross-ratio refers to the linear domain and therefore needs a conversion from dB to linear scale. Checkout Notebook 2 again for the conversion.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Homework Exercise 5: SAR Wavelength and Polarization</span>"
    ]
  },
  {
    "objectID": "unit_02/05_homework_exercise.html#question-2",
    "href": "unit_02/05_homework_exercise.html#question-2",
    "title": "Appendix E — Homework Exercise 5: SAR Wavelength and Polarization",
    "section": "E.2 Question 2",
    "text": "E.2 Question 2\nAnalyse the plot that you created above. Based on what you see, select the correct statements.\n\nThe received energy for cross-polarized backscatter of both satellites increases with LAI\nThe received energy for co-polarized backscatter of both satellites increases with LAI\nThe received energy of cross-polarized backscattering at high LAI is higher for L-band than for C-band wavelength\nThe received energy of co-polarized backscattering at high LAI is higher for L-band than for C-band wavelength",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Homework Exercise 5: SAR Wavelength and Polarization</span>"
    ]
  },
  {
    "objectID": "unit_02/05_homework_exercise.html#question-3",
    "href": "unit_02/05_homework_exercise.html#question-3",
    "title": "Appendix E — Homework Exercise 5: SAR Wavelength and Polarization",
    "section": "E.3 Question 3",
    "text": "E.3 Question 3\nFor this question we will create a boxplot to analyse the sensitivity of CR with to changes in LAI. Sensitivity means how high a response is when we change another variable, like LAI in this case. So an increased sensitivity means a higher response for the same increase in LAI. The boxplot uses boxes to illustrate the distributions of binned LAI values. Box limits indicate the range of the central 50% of the data (a.k.a inter quartile range: IQR), with the median value depicted as a central red line. The whisker limits demarcate 1.5 times the distance of the IQR. Values outside of the whiskers are considered outliers. Outliers have been eliminated in this plot to make the plot more readable.\n\n# labels for LAI bins\nranger = [str(x).zfill(1) for x in range(1, 6)]\n\n# fuse LAI and ALOS-2 and Sentinel-1 CR\nLAI_df = fused_ds.LAI.to_dask_dataframe()\nLAI_df[\"LAI\"] = LAI_df[\"LAI\"].\\\n    map_partitions(pd.cut, bins=range(6), labels=ranger)\nLAI_df[\"alos\"] = rcross_da_alos.to_dask_dataframe()[\"gam0\"]\nLAI_df[\"s1\"] = rcross_da_s1.to_dask_dataframe()[\"gam0\"]\n\n# boxplot\nax = LAI_df.compute().plot.box(column=[\"s1\", \"alos\"], by=\"LAI\",\n                               showfliers=False, figsize=(15, 6))\nax[0].set_xlabel(r\"$\\text{LAI}$ [$m^2 \\cdot m^{-2}$]\")\nax[0].set_ylabel(r\"$\\text{CR}$ [$m^2 \\cdot m^{-2}$]\")\nax[1].set_xlabel(r\"$\\text{LAI}$ [$m^2 \\cdot m^{-2}$]\")\nax[1].set_ylabel(r\"$\\text{CR}$ [$m^2 \\cdot m^{-2}$]\")\n\nFigure 2: Boxplot for CR of Sentinel-1 and ALOS-2 for binned LAI values\nAnalyse the boxplot above. Based on what you see in the plot, which satellite is more sensitive to changes in vegetation? Can you also tell to what type of vegetation each satellite is most sensitive to? Explain your reasoning in detail.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Homework Exercise 5: SAR Wavelength and Polarization</span>"
    ]
  },
  {
    "objectID": "unit_02/06_homework_exercise.html",
    "href": "unit_02/06_homework_exercise.html",
    "title": "Appendix F — Homework Exercise 6: Dielectric Properties of Natural Media",
    "section": "",
    "text": "F.1 RGB Composite\nNot only radar reflectivity vary according to different land cover classes. The backscattered signal also depends on the change of the imagined natural media over time. We may want to capture in one single image how different land covers comparably change across the same time range. A way to do achieve that is by generating a RGB composite. But what is a RGB composite? It all comes down to combining three image bands into one picture by setting each band as either Red, Green or Blue channel.\nIn order to highlight the temporal variability of the backscatter response, we want to select 3 images with maximal distance in time. Therefore we take the first, the middle and the last time available out of the input images available for this exercise. We use RGB coloring where we want to color the first image with Red, the second with Green and the Third with Blue color. When we overlay the images the color will show the differences over time.\nimport intake\nimport numpy as np  # noqa\nimport pandas as pd\nimport xarray as xr\nimport rasterio\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom functools import partial\nfrom shapely.geometry import box\n\nfrom mrs.catalog import CorineColorCollection, get_intake_url",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Homework Exercise 6: Dielectric Properties of Natural Media</span>"
    ]
  },
  {
    "objectID": "unit_02/06_homework_exercise.html#load-sentinel-1-data",
    "href": "unit_02/06_homework_exercise.html#load-sentinel-1-data",
    "title": "Appendix F — Homework Exercise 6: Dielectric Properties of Natural Media",
    "section": "F.2 Load Sentinel-1 Data",
    "text": "F.2 Load Sentinel-1 Data\n\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nsig0_da = cat.neusiedler.read().sig0.compute()\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Homework Exercise 6: Dielectric Properties of Natural Media</span>"
    ]
  },
  {
    "objectID": "unit_02/06_homework_exercise.html#select-the-dates-of-interest",
    "href": "unit_02/06_homework_exercise.html#select-the-dates-of-interest",
    "title": "Appendix F — Homework Exercise 6: Dielectric Properties of Natural Media",
    "section": "F.3 Select the Dates of Interest",
    "text": "F.3 Select the Dates of Interest\nTo create an RGB composite, we need to choose three distinct dates. It’s recommended to select dates that are spaced out to capture noticeable changes over time (e.g., first available date, second date as the middle date of the datacube time window, third date as the last availavable date). Pay attention to the season as well, as vegetation and other environmental factors often change significantly throughout the year.\nHere the sel method with nearest neighbor (method=\"nearest\") interpolation is used to choose the dates closest to the ones we specify.\n\n# YOUR CODE HERE ----------------------------------------------------------\nfirst = ...  # YOUR CODE HERE\nsecond = ...  # YOUR CODE HERE\nthird = ...  # YOUR CODE HERE\n# YOUR CODE HERE ----------------------------------------------------------\n\nsig0_rgb_da = sig0_da.sel(time=[first, second, third], method=\"nearest\").\\\n    compute()\nsig0_rgb_da\n\n\nF.3.1 Map the backscatter to RGB values\nTo visualize backscatter data in RGB, we need to transform the data into values between 0 and 1 to match it to colors. The first step is to convert the backscattering values into linear scale so we can perform meaningful calculations. Now we can normalise the values to be between 0 and 1 using the following formula: \\[\nsig0_{norm} = \\frac{sig0 - sig0_{min}}{sig0_{98th} - sig0_{min}}\n\\] We replaced the traditional maximum value with the 98th quantile in our normalization process to enhance robustness against outliers. Due to the nature of backscattering some sigma nought values get very high so taking the 98th quantile is important. The linear backscattering values are bounded by 0 so using for example the 2nd quantile is not necessary. After applying the formula, any values exceeding the 98th quantile will be greater than 1. We map these values to 1 to ensure they fit within our specified range.”\n\nlinear_ds = 10 ** (sig0_rgb_da / 10)\n\nmin_value = linear_ds.quantile(0.02).item()\nmax_robust = linear_ds.quantile(0.98).item()\n\n\ndef normalize(val, min, max):\n    \"\"\"\n    Min-max normalize value\n\n    Parameters\n    ----------\n    val: float\n        target\n    min: float\n        minimum value of range\n    max: float\n        maximum value of range\n    Returns\n    -------\n    float\n    \"\"\"\n\n    return (val - min) / (max - min)\n\n\nnormalized_ds = normalize(linear_ds, min_value, max_robust).clip(min=0, max=1)\n\nfig, ax = plt.subplots(figsize=(8, 5))\nnormalized_ds.isel(time=0).plot().axes.set_aspect(\"equal\")\nplt.tight_layout()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Homework Exercise 6: Dielectric Properties of Natural Media</span>"
    ]
  },
  {
    "objectID": "unit_02/06_homework_exercise.html#individual-rgb-channels",
    "href": "unit_02/06_homework_exercise.html#individual-rgb-channels",
    "title": "Appendix F — Homework Exercise 6: Dielectric Properties of Natural Media",
    "section": "F.4 Individual RGB Channels",
    "text": "F.4 Individual RGB Channels\nLet´s first plot the three normalized images separately (Red = Oldest image, Green = Middle image, Blue = Newest image).\n\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\nnormalized_ds.isel(time=0).plot(ax=axes[0], cmap=\"Reds\")\nnormalized_ds.isel(time=1).plot(ax=axes[1], cmap=\"Greens\")\nnormalized_ds.isel(time=2).plot(ax=axes[2], cmap=\"Blues\")\n\naxes[0].set_aspect(\"equal\")\naxes[1].set_aspect(\"equal\")\naxes[2].set_aspect(\"equal\")\n\nplt.tight_layout()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Homework Exercise 6: Dielectric Properties of Natural Media</span>"
    ]
  },
  {
    "objectID": "unit_02/06_homework_exercise.html#plotting-the-rgb-composite",
    "href": "unit_02/06_homework_exercise.html#plotting-the-rgb-composite",
    "title": "Appendix F — Homework Exercise 6: Dielectric Properties of Natural Media",
    "section": "F.5 Plotting the RGB Composite",
    "text": "F.5 Plotting the RGB Composite\nAnd finally, let´s plot the RGB composite.\n\nfig, ax = plt.subplots(figsize=(8, 5))\n\nnormalized_ds.plot.imshow()\nax.set_aspect('equal')\n\nplt.tight_layout()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Homework Exercise 6: Dielectric Properties of Natural Media</span>"
    ]
  },
  {
    "objectID": "unit_02/06_homework_exercise.html#question",
    "href": "unit_02/06_homework_exercise.html#question",
    "title": "Appendix F — Homework Exercise 6: Dielectric Properties of Natural Media",
    "section": "F.6 Question",
    "text": "F.6 Question\nWhat can you infer about the landscape features (focus on the crops appearance, forested areas, water bodies, urban areas) based on the variations in color across the image? Describe how you might interpret the colors in terms of changes over time, surface properties, and dielectric properties of the natural and artificial media. Focus on the crops: keeping in mind the polarization of the visualized backscatter data (i.e., VV) and its sensitivity to smoother surfaces (which indicates lack of vegetation), what does the blue color represent?",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Homework Exercise 6: Dielectric Properties of Natural Media</span>"
    ]
  },
  {
    "objectID": "unit_03/07_homework_exercise.html",
    "href": "unit_03/07_homework_exercise.html",
    "title": "Appendix G — Homework Exercise 7: Speckle Statistics",
    "section": "",
    "text": "G.1 Question 1\nDuring the in-class exercise, we learned about the origin of speckles and ways to mitigate it. In this exercise, your task will be to apply a Lee filter (spatial filter) with different kernel sizes to the same study area.\nWe will use already known data, which consists of Sentinel-1 sigma naught \\(\\sigma^0\\) images focusing on Lake Neusiedl and the surrounding area, where the CORINE land cover is used for land cover-based visualization and analysis.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nsig0_da = cat.speckle.read().sig0.compute()\nsig0_da\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'sig0' (time: 7, y: 1221, x: 1230)&gt; Size: 84MB\narray([[[ -8.5 , -10.65, -12.07, ..., -22.27, -20.91, -21.92],\n        [ -9.  , -10.03, -10.82, ..., -16.46, -16.9 , -21.84],\n        [ -6.74,  -7.87,  -8.1 , ..., -17.41, -22.64, -23.01],\n        ...,\n        [ -8.74,  -7.44,  -6.69, ..., -10.85,  -8.39,  -7.08],\n        [ -9.39,  -9.55,  -8.9 , ..., -13.  , -11.03,  -9.15],\n        [-10.86, -10.84,  -9.7 , ..., -17.47, -14.58, -10.65]],\n\n       [[-10.39, -11.92, -11.74, ..., -19.02, -20.28, -17.92],\n        [ -8.65, -14.64, -12.34, ..., -21.77, -19.55, -16.67],\n        [ -8.11, -11.29, -10.25, ..., -23.16, -20.23, -16.73],\n        ...,\n        [-10.69,  -7.85,  -6.51, ..., -11.02,  -8.21,  -7.69],\n        [-12.83, -10.4 ,  -9.26, ..., -14.74,  -9.62,  -7.99],\n        [-13.76, -12.13, -12.08, ..., -18.51, -12.62,  -9.14]],\n\n       [[ -9.47, -14.49, -15.86, ..., -23.19, -24.68, -25.28],\n        [ -9.7 , -13.62, -12.49, ..., -27.02, -23.13, -22.35],\n        [-10.84, -12.3 , -12.61, ..., -23.46, -22.93, -21.64],\n        ...,\n...\n        [ -9.82,  -9.11,  -8.73, ...,  -9.79,  -7.33,  -6.92],\n        [-12.23, -11.64,  -9.59, ..., -12.29,  -7.65,  -8.14],\n        [-13.6 , -13.41, -11.73, ..., -19.82, -12.53, -11.83]],\n\n       [[-12.49, -12.55, -12.89, ..., -21.35, -23.29, -23.87],\n        [-12.15, -12.38, -14.03, ..., -18.07, -23.53, -23.23],\n        [-12.41, -12.52, -14.08, ..., -18.7 , -21.47, -22.17],\n        ...,\n        [ -6.87,  -5.98,  -5.32, ..., -18.47, -12.26, -11.2 ],\n        [-11.18,  -6.31,  -6.12, ..., -20.17, -12.56, -11.61],\n        [-11.98,  -9.02,  -8.46, ..., -13.06, -10.4 ,  -9.  ]],\n\n       [[ -6.41,  -6.59,  -7.16, ..., -22.25, -25.96, -25.45],\n        [ -6.75,  -9.42,  -9.54, ..., -20.65, -26.34, -23.53],\n        [ -8.24, -12.04, -10.46, ..., -20.65, -20.63, -21.05],\n        ...,\n        [ -6.64,  -5.06,  -4.89, ..., -13.67, -12.26,  -9.96],\n        [ -9.62,  -8.06, -10.02, ..., -16.11, -14.74, -10.64],\n        [-11.93, -11.41, -12.68, ..., -19.01, -14.32, -14.22]]],\n      shape=(7, 1221, 1230))\nCoordinates:\n  * time         (time) datetime64[ns] 56B 2023-08-17T16:51:22 ... 2023-10-28...\n  * y            (y) float64 10kB 1.571e+06 1.571e+06 ... 1.559e+06 1.559e+06\n  * x            (x) float64 10kB 5.282e+06 5.282e+06 ... 5.294e+06 5.294e+06\n    spatial_ref  int64 8B 0xarray.DataArray'sig0'time: 7y: 1221x: 1230-8.5 -10.65 -12.07 -10.45 -8.65 ... -21.7 -22.42 -19.01 -14.32 -14.22array([[[ -8.5 , -10.65, -12.07, ..., -22.27, -20.91, -21.92],\n        [ -9.  , -10.03, -10.82, ..., -16.46, -16.9 , -21.84],\n        [ -6.74,  -7.87,  -8.1 , ..., -17.41, -22.64, -23.01],\n        ...,\n        [ -8.74,  -7.44,  -6.69, ..., -10.85,  -8.39,  -7.08],\n        [ -9.39,  -9.55,  -8.9 , ..., -13.  , -11.03,  -9.15],\n        [-10.86, -10.84,  -9.7 , ..., -17.47, -14.58, -10.65]],\n\n       [[-10.39, -11.92, -11.74, ..., -19.02, -20.28, -17.92],\n        [ -8.65, -14.64, -12.34, ..., -21.77, -19.55, -16.67],\n        [ -8.11, -11.29, -10.25, ..., -23.16, -20.23, -16.73],\n        ...,\n        [-10.69,  -7.85,  -6.51, ..., -11.02,  -8.21,  -7.69],\n        [-12.83, -10.4 ,  -9.26, ..., -14.74,  -9.62,  -7.99],\n        [-13.76, -12.13, -12.08, ..., -18.51, -12.62,  -9.14]],\n\n       [[ -9.47, -14.49, -15.86, ..., -23.19, -24.68, -25.28],\n        [ -9.7 , -13.62, -12.49, ..., -27.02, -23.13, -22.35],\n        [-10.84, -12.3 , -12.61, ..., -23.46, -22.93, -21.64],\n        ...,\n...\n        [ -9.82,  -9.11,  -8.73, ...,  -9.79,  -7.33,  -6.92],\n        [-12.23, -11.64,  -9.59, ..., -12.29,  -7.65,  -8.14],\n        [-13.6 , -13.41, -11.73, ..., -19.82, -12.53, -11.83]],\n\n       [[-12.49, -12.55, -12.89, ..., -21.35, -23.29, -23.87],\n        [-12.15, -12.38, -14.03, ..., -18.07, -23.53, -23.23],\n        [-12.41, -12.52, -14.08, ..., -18.7 , -21.47, -22.17],\n        ...,\n        [ -6.87,  -5.98,  -5.32, ..., -18.47, -12.26, -11.2 ],\n        [-11.18,  -6.31,  -6.12, ..., -20.17, -12.56, -11.61],\n        [-11.98,  -9.02,  -8.46, ..., -13.06, -10.4 ,  -9.  ]],\n\n       [[ -6.41,  -6.59,  -7.16, ..., -22.25, -25.96, -25.45],\n        [ -6.75,  -9.42,  -9.54, ..., -20.65, -26.34, -23.53],\n        [ -8.24, -12.04, -10.46, ..., -20.65, -20.63, -21.05],\n        ...,\n        [ -6.64,  -5.06,  -4.89, ..., -13.67, -12.26,  -9.96],\n        [ -9.62,  -8.06, -10.02, ..., -16.11, -14.74, -10.64],\n        [-11.93, -11.41, -12.68, ..., -19.01, -14.32, -14.22]]],\n      shape=(7, 1221, 1230))Coordinates: (4)time(time)datetime64[ns]2023-08-17T16:51:22 ... 2023-10-...array(['2023-08-17T16:51:22.000000000', '2023-08-29T16:51:23.000000000',\n       '2023-09-10T16:51:24.000000000', '2023-09-22T16:51:24.000000000',\n       '2023-10-04T16:51:24.000000000', '2023-10-16T16:51:24.000000000',\n       '2023-10-28T16:51:24.000000000'], dtype='datetime64[ns]')y(y)float641.571e+06 1.571e+06 ... 1.559e+06axis :Ylong_name :y coordinate of projectionstandard_name :projection_y_coordinateunits :metrearray([1570955., 1570945., 1570935., ..., 1558775., 1558765., 1558755.],\n      shape=(1221,))x(x)float645.282e+06 5.282e+06 ... 5.294e+06axis :Xlong_name :x coordinate of projectionstandard_name :projection_x_coordinateunits :metrearray([5281995., 5282005., 5282015., ..., 5294265., 5294275., 5294285.],\n      shape=(1230,))spatial_ref()int640GeoTransform :5281990.0 10.0 0.0 1570960.0 0.0 -10.0crs_wkt :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]false_easting :5837287.81977false_northing :2121415.69617geographic_crs_name :WGS 84grid_mapping_name :azimuthal_equidistanthorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563latitude_of_projection_origin :53.0longitude_of_prime_meridian :0.0longitude_of_projection_origin :24.0prime_meridian_name :Greenwichprojected_crs_name :Azimuthal_Equidistantreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]array(0)\nLet’s build up the Lee filter function:\ndef lee_filter(raster, size=...):\n    \"\"\"\n    Parameters:\n    raster: ndarray\n\n    size: int\n\n    Returns:\n    filtered_image (ndarray): The filtered image with reduced speckle noise\n    \"\"\"\n\n    filtered_image = ...  # YOUR CODE HERE\n\n    return filtered_image",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>G</span>  <span class='chapter-title'>Homework Exercise 7: Speckle Statistics</span>"
    ]
  },
  {
    "objectID": "unit_03/07_homework_exercise.html#question-2",
    "href": "unit_03/07_homework_exercise.html#question-2",
    "title": "Appendix G — Homework Exercise 7: Speckle Statistics",
    "section": "G.2 Question 2",
    "text": "G.2 Question 2\nApply your function and compute the Lee filter for at least two different kernel sizes (size number must be odd).\n\nsig0_da.data = ...  # YOUR CODE HERE\n\nPlot you results usign the following code:\n\nsig0_da.hvplot.image(\n    x=\"x\", y=\"y\", robust=True, data_aspect=1, cmap=\"Greys_r\", rasterize=True\n).opts(frame_height=600, framewise=False, aspect=\"equal\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>G</span>  <span class='chapter-title'>Homework Exercise 7: Speckle Statistics</span>"
    ]
  },
  {
    "objectID": "unit_03/07_homework_exercise.html#question-3",
    "href": "unit_03/07_homework_exercise.html#question-3",
    "title": "Appendix G — Homework Exercise 7: Speckle Statistics",
    "section": "G.3 Question 3",
    "text": "G.3 Question 3\nBased on your plotted results, select which of the below statement is correct:\n\nThe larger the kernel size, the lower the resolution of the resulting image.\nThe smaller the kernel size, the more speckle noise is removed.\nThe choice of the kernel size has no impact on the speckle noise removal.\nThe larger the kernel size, the more speckle noise is removed.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>G</span>  <span class='chapter-title'>Homework Exercise 7: Speckle Statistics</span>"
    ]
  },
  {
    "objectID": "unit_03/08_homework_exercise.html",
    "href": "unit_03/08_homework_exercise.html",
    "title": "Appendix H — Homework Exercise 8: Generation and Interpretation of an Interferogram using Sentinel-1 Imagery",
    "section": "",
    "text": "H.1 Load the data\nThe following data were acquired from Sentinel-1 on April 23, 2018, from 16:15:24 to 16:15:51 over the region of Hawaii. Use the provided code to load and plot the preprocessed SAR interferometric data. Observe, analyse, and visually interpret the results.\nurl = get_intake_url()\ncat = intake.open_catalog(url)\nds = cat.ex8.read().compute()\nds\n\nhttps://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/dev-exs/microwave-remote-sensing.yml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 105MB\nDimensions:      (y: 4131, x: 3179)\nCoordinates:\n  * y            (y) float64 33kB 20.14 20.14 20.14 20.14 ... 19.1 19.1 19.1\n  * x            (x) float64 25kB -155.5 -155.5 -155.5 ... -154.7 -154.7 -154.7\n    spatial_ref  int64 8B 0\nData variables:\n    CohBand      (y, x) float32 53MB 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0\n    PhaseBand    (y, x) float32 53MB 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0xarray.DatasetDimensions:y: 4131x: 3179Coordinates: (3)y(y)float6420.14 20.14 20.14 ... 19.1 19.1array([20.139453, 20.139201, 20.138949, ..., 19.100535, 19.100283, 19.100032],\n      shape=(4131,))x(x)float64-155.5 -155.5 ... -154.7 -154.7array([-155.499865, -155.499614, -155.499362, ..., -154.700543, -154.700291,\n       -154.70004 ], shape=(3179,))spatial_ref()int640GeoTransform :-155.51685341513007 0.00025167578292311846 0.0 20.13957861432755 0.0 -0.00025167578292311846crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]geographic_crs_name :WGS 84grid_mapping_name :latitude_longitudehorizontal_datum_name :World Geodetic System 1984inverse_flattening :298.257223563longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichreference_ellipsoid_name :WGS 84semi_major_axis :6378137.0semi_minor_axis :6356752.314245179spatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]array(0)Data variables: (2)CohBand(y, x)float320.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0AREA_OR_POINT :AreaSTATISTICS_APPROXIMATE :YESSTATISTICS_MAXIMUM :0.9790118932724STATISTICS_MEAN :0.07907648124917STATISTICS_MINIMUM :0STATISTICS_STDDEV :0.14581841958814STATISTICS_VALID_PERCENT :100TIFFTAG_RESOLUTIONUNIT :1 (unitless)TIFFTAG_XRESOLUTION :1TIFFTAG_YRESOLUTION :1array([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       ...,\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.]], shape=(4131, 3179), dtype=float32)PhaseBand(y, x)float320.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0AREA_OR_POINT :AreaSTATISTICS_APPROXIMATE :YESSTATISTICS_MAXIMUM :3.1328022480011STATISTICS_MEAN :-0.02452060501156STATISTICS_MINIMUM :-3.1353642940521STATISTICS_STDDEV :0.71084059253527STATISTICS_VALID_PERCENT :100TIFFTAG_RESOLUTIONUNIT :1 (unitless)TIFFTAG_XRESOLUTION :1TIFFTAG_YRESOLUTION :1array([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       ...,\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.]], shape=(4131, 3179), dtype=float32)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>H</span>  <span class='chapter-title'>Homework Exercise 8: Generation and Interpretation of an Interferogram using Sentinel-1 Imagery</span>"
    ]
  },
  {
    "objectID": "unit_03/08_homework_exercise.html#plotting-the-data",
    "href": "unit_03/08_homework_exercise.html#plotting-the-data",
    "title": "Appendix H — Homework Exercise 8: Generation and Interpretation of an Interferogram using Sentinel-1 Imagery",
    "section": "H.2 Plotting the data",
    "text": "H.2 Plotting the data\n\nstep = 4\n\ncmap_hls = sns.color_palette(\"hls\", n_colors=256).as_hex()\n\nds = ds.where(ds != 0)\nigf_data = ds.PhaseBand.isel(x=slice(0, -1, step), y=slice(0, -1, step))\ncoh_da = ds.CohBand.isel(x=slice(0, -1, step), y=slice(0, -1, step))\n\nigf_plot = igf_data.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    cmap=cmap_hls,\n    width=600,\n    height=600,\n    dynamic=False\n)\n\n\ncoh_plot = coh_da.hvplot.image(\n    x=\"x\",\n    y=\"y\",\n    cmap=\"viridis\",\n    width=600,\n    height=600,\n    dynamic=False,\n).opts(clim=(0, 1))\n\n(igf_plot + coh_plot).opts(shared_axes=True)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>H</span>  <span class='chapter-title'>Homework Exercise 8: Generation and Interpretation of an Interferogram using Sentinel-1 Imagery</span>"
    ]
  },
  {
    "objectID": "unit_03/08_homework_exercise.html#question-1",
    "href": "unit_03/08_homework_exercise.html#question-1",
    "title": "Appendix H — Homework Exercise 8: Generation and Interpretation of an Interferogram using Sentinel-1 Imagery",
    "section": "H.3 Question 1",
    "text": "H.3 Question 1\nPlease refer to the above plots. Which of the following statements are correct?\n\nThe image on the left shows a phase interferogram.\nThe image on the right shows an amplitude interferogram, also called coherence.\nThe image on the right shows a RTC sigma nougth backscatter.\n\nFocus on the left plot. Which of the following statements are correct?\n\nThe fringe pattern could be indicative of both local surface topography and ground deformation.\nThe circular fringe pattern on the left indicates an uplifiting displacement.\nThe circular fringe pattern on the left indicates a sinking displacement.\n\nDon’t change anything in the next cell, besides the step for sampling (skipping pixels in the plot), if the plotting takes too long to finish.\n\ncmap_hls = ListedColormap(sns.color_palette(\"hls\", 256).as_hex())\n\n\ndef array_to_img(data_array, cmap=\"viridis\"):\n    \"\"\"Convert an xarray DataArray to a base64-encoded PNG image.\"\"\"\n    fig, ax = plt.subplots(figsize=(6, 6), dpi=600)\n    data_array.plot(ax=ax, cmap=cmap, add_colorbar=False, add_labels=False)\n    ax.set_axis_off()\n    buf = BytesIO()\n    plt.savefig(\n        buf, format=\"png\", bbox_inches=\"tight\", pad_inches=0, transparent=True\n    )\n    plt.close(fig)\n    return base64.b64encode(buf.getvalue()).decode(\"utf-8\")\n\n\n# Prepare data\nstep = 1\nigf_image = array_to_img(\n    ds.PhaseBand.isel(x=slice(0, -1, step), y=slice(0, -1, step)),\n    cmap=cmap_hls,\n)\ncoh_image = array_to_img(\n    ds.CohBand.isel(x=slice(0, -1, step), y=slice(0, -1, step))\n)\n\n# Map setup and overlay function\nbounds = [\n    [float(ds.y.min()), float(ds.x.min())],\n    [float(ds.y.max()), float(ds.x.max())],\n]\nm = folium.Map(location=[ds.y.median(), ds.x.median()], zoom_start=10)\nfolium.TileLayer(\n    tiles=(\n        \"https://server.arcgisonline.com/ArcGIS/rest/\"\n        + \"services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n    ),\n    attr=\"Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ\",\n    name=\"ESRI World Imagery\",\n).add_to(m)\n\n\ndef overlay_image(map_obj, img_base64, bounds, name):\n    folium.raster_layers.ImageOverlay(\n        image=f\"data:image/png;base64,{img_base64}\",\n        bounds=bounds,\n        opacity=0.65,\n        name=name,\n    ).add_to(map_obj)\n\n\n# Add images and controls\noverlay_image(m, igf_image, bounds, \"IGF Data\")\noverlay_image(m, coh_image, bounds, \"Coherence Data\")\nfolium.LayerControl().add_to(m)\n\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>H</span>  <span class='chapter-title'>Homework Exercise 8: Generation and Interpretation of an Interferogram using Sentinel-1 Imagery</span>"
    ]
  },
  {
    "objectID": "unit_03/08_homework_exercise.html#question-2",
    "href": "unit_03/08_homework_exercise.html#question-2",
    "title": "Appendix H — Homework Exercise 8: Generation and Interpretation of an Interferogram using Sentinel-1 Imagery",
    "section": "H.4 Question 2",
    "text": "H.4 Question 2\nPlease refer to the above plot, select the “IGF Data” layer, and select the correct statements:\n\nThe interferogram above depicts ground deformation due to an earthquake event.\nThe interferogram above depicts ground deformation due to a volcanic eruption event.\nThe interferogram above does not show evidence of ground deformation.\n\nPlease refer to the above plot, select the “Coherence Data” layer, and select the correct statements:\n\nThe coherence is high (bright color) over urban areas.\nThe coherence is low (dark color) over forested areas.\nThe coherence is high over bare soil (non-forested areas).",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>H</span>  <span class='chapter-title'>Homework Exercise 8: Generation and Interpretation of an Interferogram using Sentinel-1 Imagery</span>"
    ]
  },
  {
    "objectID": "unit_03/09_homework_exercise.html",
    "href": "unit_03/09_homework_exercise.html",
    "title": "Appendix I — Homework Exercise 9: Phase Unwrapping Exercise",
    "section": "",
    "text": "I.1 Question 1\nYour task in this exercise is to read the provided data, plot it, unwrap and plot the phase, and calculate the displacement. Then interpret your results. The following data were acquired from Sentinel-1 on April 23, 2018, from 16:15:24 to 16:15:51 over the region of Hawaii (same data as 08_homework_exercise).\nPlot the above provided data. Please note that we are plotting images in Slant Range geometry (East-West flipped due to the descending acquisition pass).\nfig, axes = plt.subplots(1,3, figsize=(15,5))\nds.phase.where(mask).plot.imshow(cmap=cmap_cyc, ax=axes[0]).axes.set_title('Phase')\n# YOUR CODE HERE -&gt; (Plot intensity map)\n# YOUR CODE HERE -&gt; (Plot coherence map)\nplt.tight_layout()\ndef unwrap_array(data: xr.DataArray,\n                 mask: xr.DataArray = True,\n                 coherence: xr.DataArray = None,\n                 mask_nodata_value: int = 0,\n                 coh_low_threshold: float = None,\n                 coh_high_threshold: float = None,\n                 nlooks=1.0, cost=\"smooth\", init=\"mcf\",\n                 **kwargs) -&gt; xr.DataArray:\n    \"\"\"\n    Unwraps the phase data using the snaphu algorithm.\n\n    data: xarray DataArray with complex numbers\n    mask: xarray DataArray with mask values\n    coherence: xarray DataArray with coherence values (optional)\n    mask_nodata_value: Value of the no data pixels in the mask\n    coh_low_threshold: Lower threshold for the coherence values\n    coh_high_threshold: Higher threshold for the coherence values\n\n    Return: xarray DataArray with the unwrapped phase\n    \"\"\"\n\n    # Create a mask for areas with no data\n    if mask is True:\n        mask = (data.real != mask_nodata_value).astype(bool)\n\n    # Apply coherence thresholds if provided\n    if coherence is not None:\n        if coh_low_threshold is not None:\n            coh_mask = (coherence &gt;= coh_low_threshold).astype(bool)\n            mask = mask & coh_mask\n        if coh_high_threshold is not None:\n            coh_mask = (coherence &lt;= coh_high_threshold).astype(bool)\n            mask = mask & coh_mask\n\n    # Apply the mask to the data\n    data = data.where(mask)\n\n    if coherence is None:\n        coherence = np.ones_like(data.real)\n\n    # Unwrap the phase (already in complex form)\n    unw, _ = snaphu.unwrap(data,\n                           coherence, nlooks=nlooks,\n                           cost=cost, init=init,\n                           mask=mask, **kwargs)\n\n    # clear snaphu output\n    clear_output()\n\n    # Build xarray DataArray with the unwrapped phase\n    unw_da = xr.DataArray(unw, coords=data.coords, dims=data.dims)\n\n    # Mask the unwrapped phase\n    unw_da = unw_da.where(mask)\n    return unw_da",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>I</span>  <span class='chapter-title'>Homework Exercise 9: Phase Unwrapping Exercise</span>"
    ]
  },
  {
    "objectID": "unit_03/09_homework_exercise.html#question-2",
    "href": "unit_03/09_homework_exercise.html#question-2",
    "title": "Appendix I — Homework Exercise 9: Phase Unwrapping Exercise",
    "section": "I.2 Question 2",
    "text": "I.2 Question 2\nUse the above function to unwrap the given interferogram and to plot your result. Use a coherence threshold of 0.2 for your unwrapping and use the provided lines of code below to coarsen the input (to fasten the process). Kernels with values higher than 3 might lead the unwrapping function to crash, therefore please do not change it. It might take up to 1 or 2 minutes to execute the function, let the code run, and the output be printed (it will be cleared out at the end).\n\n# coarsen \nkernel = 3\nds = ds.coarsen(x=kernel, y=kernel, boundary=\"trim\").mean()\n\n\nunwrapped = ... # YOUR CODE HERE -&gt; perform unwrapping function\n\nunwrapped.plot.imshow(cmap=cmap_cyc)\n\n\ndef displacement(unwrapped, lambda_val: float = 0.056) -&gt; xr.DataArray:\n    \"\"\"\n    Calculates the displacement from the unwrapped phase\n\n    unw: xarray DataArray with the unwrapped phase\n    unw: xr.DataArray\n    lambda_val: Wavelength of the radar signal\n    lambda_val: float\n\n    Return: xarray DataArray with the displacement\n    \"\"\"\n    disp = unwrapped * - lambda_val / (4 * np.pi)\n    return disp",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>I</span>  <span class='chapter-title'>Homework Exercise 9: Phase Unwrapping Exercise</span>"
    ]
  },
  {
    "objectID": "unit_03/09_homework_exercise.html#question-3",
    "href": "unit_03/09_homework_exercise.html#question-3",
    "title": "Appendix I — Homework Exercise 9: Phase Unwrapping Exercise",
    "section": "I.3 Question 3",
    "text": "I.3 Question 3\nUse the above function to calculate the displacement from the unwrapped interferogram, then plot your result with the correct colormap. Can you guess which kind of phenomenon is responsible for the ground surface displacement that you observe?\n\n# YOUR CODE HERE -&gt; perform displacement function\n# YOUR CODE HERE -&gt; plot displacement map",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>I</span>  <span class='chapter-title'>Homework Exercise 9: Phase Unwrapping Exercise</span>"
    ]
  }
]